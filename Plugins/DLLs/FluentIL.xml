<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluentIL</name>
    </assembly>
    <members>
        <member name="T:FluentIL.AssemblyBuilderCache">
            <summary>
            Represents an <see cref="T:System.Reflection.Emit.AssemblyBuilder"/> cache.
            </summary>
        </member>
        <member name="F:FluentIL.AssemblyBuilderCache.cache">
            <summary>
            The cache.
            </summary>
        </member>
        <member name="M:FluentIL.AssemblyBuilderCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.AssemblyBuilderCache"/> class.
            </summary>
        </member>
        <member name="M:FluentIL.AssemblyBuilderCache.GetOrCreateAssemblyBuilder(System.String)">
            <summary>
            Gets or creates an <see cref="T:System.Reflection.Emit.AssemblyBuilder"/> and <see cref="T:System.Reflection.Emit.ModuleBuilder"/> pair.
            </summary>
            <param name="assemblyName">The name of the assembly builder.</param>
            <returns>An assembly builder instance.</returns>
        </member>
        <member name="M:FluentIL.AssemblyBuilderCache.RemoveAssemblyBuilder(System.String)">
            <summary>
            Removes an assembly builder and all of its module builders.
            </summary>
            <param name="name">The name of the assembly builder.</param>
            <returns>True if removed; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.AssemblyBuilderCache.GetAssemblies">
            <summary>
            Returns a list of assmiblies.
            </summary>
            <returns>A list of assemblies.</returns>
        </member>
        <member name="T:FluentIL.AssemblyCache">
            <summary>
             Represents a cache of assemblies in the current application.
            </summary>
        </member>
        <member name="M:FluentIL.AssemblyCache.GetType(System.String,System.Boolean)">
            <summary>
            Gets a type by name from the cache.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="dynamicOnly">Optional value indicating whether only dynamic assemblies should be checked or not.</param>
            <returns>A <see cref="T:System.Type"/> representing the type if found; otherwise null.</returns>
        </member>
        <member name="M:FluentIL.AssemblyCache.GetAssemblies(System.Boolean)">
            <summary>
            Gets a list of loaded assemblies.
            </summary>
            <param name="dynamicOnly">Optional value indicating whether only dynamic assemblies should be checked or not.</param>
            <returns>A list of assemblies.</returns>
        </member>
        <member name="T:FluentIL.Builders.ArrayBuilder">
            <summary>
            Generates the IL for handling an array.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.ArrayBuilder.emitter">
            <summary>
            The emitter to use.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.ArrayBuilder.localArray">
            <summary>
            A local varaible to hold the array.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.ArrayBuilder.#ctor(FluentIL.IEmitter,System.Type,System.Int32,FluentIL.ILocal)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Builders.ArrayBuilder"/> class.
            </summary>
            <param name="emitter">The <see cref="T:FluentIL.IEmitter"/>.</param>
            <param name="arrayType">The type of array.</param>
            <param name="length">The length of the array.</param>
            <param name="localArray">Optional local variable.</param>
        </member>
        <member name="M:FluentIL.Builders.ArrayBuilder.SetStart(System.Int32)">
            <summary>
            Emits the IL to start a set operation for the given index.
            </summary>
            <param name="index">The array index to set.</param>
        </member>
        <member name="M:FluentIL.Builders.ArrayBuilder.SetEnd">
            <summary>
            Emits the IL to store the element.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.ArrayBuilder.Set(System.Int32,System.Action)">
            <summary>
            Emits the IL to set an element of an array.
            </summary>
            <param name="index">The index of the element to set.</param>
            <param name="action">The action to call to emit the set code.</param>
        </member>
        <member name="M:FluentIL.Builders.ArrayBuilder.Set(System.Int32,System.Action{System.Int32})">
            <summary>
            Emits the IL to set an element of an array.
            </summary>
            <param name="index">The index of the element to set.</param>
            <param name="action">The action to call to emit the set code.</param>
        </member>
        <member name="M:FluentIL.Builders.ArrayBuilder.Get(System.Int32)">
            <summary>
            Emits the IL to load the given array element onto the evaluation stack.
            </summary>
            <param name="index">The index of the element to load.</param>
        </member>
        <member name="M:FluentIL.Builders.ArrayBuilder.Load">
            <summary>
            Emits the IL to load the array onto the evaluation stack.
            </summary>
        </member>
        <member name="T:FluentIL.Builders.FluentAssemblyBuilder">
            <summary>
            An implementation of the <see cref="T:FluentIL.IAssemblyBuilder"/> interafce.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentAssemblyBuilder.modules">
            <summary>
            A list of module builders.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.FluentAssemblyBuilder.#ctor(System.Reflection.Emit.AssemblyBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Builders.FluentAssemblyBuilder"/> class.
            </summary>
            <param name="assemblyBuilder">A <see cref="P:FluentIL.Builders.FluentAssemblyBuilder.AssemblyBuilder"/> instance.</param>
        </member>
        <member name="P:FluentIL.Builders.FluentAssemblyBuilder.AssemblyBuilder">
            <summary>
            Gets an <see cref="P:FluentIL.Builders.FluentAssemblyBuilder.AssemblyBuilder"/> instance.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.FluentAssemblyBuilder.NewDynamicModule(System.String)">
            <summary>
            Defines a module.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <returns>A <see cref="T:FluentIL.IModuleBuilder" /> instance.</returns>
        </member>
        <member name="T:FluentIL.Builders.FluentConstructorBuilder">
            <summary>
            An implementation of the <see cref="T:FluentIL.IConstructorBuilder"/> interface.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentConstructorBuilder.define">
            <summary>
            A function to define the constructor.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentConstructorBuilder.callingConvention">
            <summary>
            The constructors calling conversion.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentConstructorBuilder.parameters">
            <summary>
            A list of constructor parameters.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentConstructorBuilder.ctor">
            <summary>
            The constuctor builder.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentConstructorBuilder.methodImplAttributes">
            <summary>
            The method implementation attributes.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentConstructorBuilder.body">
            <summary>
            The body emitter.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.FluentConstructorBuilder.#ctor(System.Func{System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][],System.Reflection.Emit.ConstructorBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Builders.FluentConstructorBuilder"/> class.
            </summary>
            <param name="define">A constructor definition function.</param>
        </member>
        <member name="M:FluentIL.Builders.FluentConstructorBuilder.#ctor(System.Func{System.Reflection.MethodAttributes,System.Reflection.Emit.ConstructorBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Builders.FluentConstructorBuilder"/> class.
            </summary>
            <param name="define">A default constructor definition function.</param>
        </member>
        <member name="P:FluentIL.Builders.FluentConstructorBuilder.MethodAttributes">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentConstructorBuilder.Body">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentConstructorBuilder.CallingConvention(System.Reflection.CallingConventions)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentConstructorBuilder.Param(System.Type,System.String,System.Reflection.ParameterAttributes)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentConstructorBuilder.Param(FluentIL.IGenericParameterBuilder,System.String,System.Reflection.ParameterAttributes)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentConstructorBuilder.Param(System.Action{FluentIL.IParameterBuilder})">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentConstructorBuilder.Params(System.Type[])">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentConstructorBuilder.SetMethodAttributes(System.Reflection.MethodAttributes)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentConstructorBuilder.Define">
            <inheritdoc />
        </member>
        <member name="T:FluentIL.Builders.FluentDynamicMethodBuilder">
            <summary>
            Implementation of the <see cref="T:FluentIL.IDynamicMethodBuilder"/> interface.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentDynamicMethodBuilder.methodName">
            <summary>
            The methods name.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentDynamicMethodBuilder.methodOwner">
            <summary>
            The methods owning type.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentDynamicMethodBuilder.returnType">
            <summary>
            The methods return type.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentDynamicMethodBuilder.parms">
            <summary>
            The methods parameters.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentDynamicMethodBuilder.dynamicMethod">
            <summary>
            The dynamic method.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.FluentDynamicMethodBuilder.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Builders.FluentDynamicMethodBuilder"/> class.
            </summary>
            <param name="methodName">The name of the method.</param>
            <param name="methodOwner">The methods owning type.</param>
        </member>
        <member name="M:FluentIL.Builders.FluentDynamicMethodBuilder.ThrowIfDefined">
            <summary>
            Throws an exception if the method has been defined.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.FluentDynamicMethodBuilder.Body">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentDynamicMethodBuilder.Body(System.Action{FluentIL.IEmitter})">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentDynamicMethodBuilder.Returns``1">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentDynamicMethodBuilder.Returns(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentDynamicMethodBuilder.Param``1(System.String,System.Reflection.ParameterAttributes)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentDynamicMethodBuilder.Param(System.Type,System.String,System.Reflection.ParameterAttributes)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentDynamicMethodBuilder.Param(System.Action{FluentIL.IParameterBuilder})">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentDynamicMethodBuilder.Param(FluentIL.IParameterBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentDynamicMethodBuilder.Params(System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentDynamicMethodBuilder.Params(FluentIL.IParameterBuilder[])">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentDynamicMethodBuilder.CreateParam``1(System.String,System.Reflection.ParameterAttributes)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentDynamicMethodBuilder.CreateParam(System.Type,System.String,System.Reflection.ParameterAttributes)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentDynamicMethodBuilder.Define">
            <summary>
            Defines the method.
            </summary>
            <returns>A <see cref="T:System.Reflection.Emit.DynamicMethod"/> instance.</returns>
        </member>
        <member name="T:FluentIL.Builders.FluentEventBuilder">
            <summary>
            Implementation of the <see cref="T:FluentIL.IEventBuilder"/> interface.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentEventBuilder.eventName">
            <summary>
            The name of the event.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentEventBuilder.eventType">
            <summary>
            The events type.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentEventBuilder.define">
            <summary>
            A function to define the event.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.FluentEventBuilder.#ctor(System.String,System.Type,System.Func{System.String,System.Reflection.EventAttributes,System.Type,System.Reflection.Emit.EventBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Builders.FluentEventBuilder"/> class.
            </summary>
            <param name="eventName">The events name.</param>
            <param name="eventType">The events type.</param>
            <param name="define">A function to define the event.</param>
        </member>
        <member name="P:FluentIL.Builders.FluentEventBuilder.EventAttributes">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentEventBuilder.SpecialName">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentEventBuilder.RTSpecialName">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentEventBuilder.Define">
            <inheritdoc />
        </member>
        <member name="T:FluentIL.Builders.FluentFieldBuilder">
            <summary>
            Implementation of the <see cref="T:FluentIL.IFieldBuilder"/> interface.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentFieldBuilder.defineFunc">
            <summary>
            The function used to define the field.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentFieldBuilder.fieldBuilder">
            <summary>
            The field builder.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.FluentFieldBuilder.#ctor(System.String,System.Type,System.Func{System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes,System.Reflection.Emit.FieldBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Builders.FluentFieldBuilder"/> class.
            </summary>
            <param name="fieldName">The field name.</param>
            <param name="fieldType">The field type.</param>
            <param name="defineFunc">The field define function.</param>
        </member>
        <member name="P:FluentIL.Builders.FluentFieldBuilder.FieldName">
            <inheritdoc />
        </member>
        <member name="P:FluentIL.Builders.FluentFieldBuilder.FieldType">
            <inheritdoc />
        </member>
        <member name="P:FluentIL.Builders.FluentFieldBuilder.FieldAttributes">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentFieldBuilder.Attributes(System.Reflection.FieldAttributes)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentFieldBuilder.Define">
            <inheritdoc />
        </member>
        <member name="T:FluentIL.Builders.FluentGenericParameterBuilder">
            <summary>
            Implementation of the <see cref="T:FluentIL.IGenericParameterBuilder"/> interface.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.FluentGenericParameterBuilder.#ctor(System.String,System.Func{System.String,System.Reflection.Emit.GenericTypeParameterBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Builders.FluentGenericParameterBuilder"/> class.
            </summary>
            <param name="parameterName">The paramter name.</param>
            <param name="defineFunc">The builder action.</param>
        </member>
        <member name="P:FluentIL.Builders.FluentGenericParameterBuilder.ParameterName">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:FluentIL.Builders.FluentGenericParameterBuilder.ParameterBuilder">
            <summary>
            Gets the parameter builder.
            </summary>
        </member>
        <member name="P:FluentIL.Builders.FluentGenericParameterBuilder.Attributes">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentGenericParameterBuilder.BaseType``1">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentGenericParameterBuilder.BaseType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentGenericParameterBuilder.InterfaceType``1">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentGenericParameterBuilder.InterfaceType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentGenericParameterBuilder.Contravariant">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentGenericParameterBuilder.Covariant">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentGenericParameterBuilder.DefaultConstructor">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentGenericParameterBuilder.NotNullableValueType">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentGenericParameterBuilder.ReferenceType">
            <inheritdoc />
        </member>
        <member name="T:FluentIL.Builders.FluentMethodBuilder">
            <summary>
            Implementation of the <see cref="T:FluentIL.IMethodBuilder"/> interface.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentMethodBuilder.defineMethod">
            <summary>
            A reference to the function that creates the <see cref="T:System.Reflection.Emit.MethodBuilder"/>.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentMethodBuilder.body">
            <summary>
            The method body.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentMethodBuilder.methodName">
            <summary>
            The methods name.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentMethodBuilder.callingConvention">
            <summary>
            The methods calling convention.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentMethodBuilder.returnType">
            <summary>
            The methods return type.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentMethodBuilder.genericReturnType">
            <summary>
            The methods generic return type.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentMethodBuilder.genericReturnTypes">
            <summary>
            The methods return types generic paramters.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentMethodBuilder.parms">
            <summary>
            The methods parameters.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentMethodBuilder.genericParameterBuilders">
            <summary>
            The methods generic arguments.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentMethodBuilder.genericParameters">
            <summary>
            A generic type parameter builder.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentMethodBuilder.methodBuilder">
            <summary>
            The methods method builder.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentMethodBuilder.customAttributes">
            <summary>
            The methods custom attributes.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentMethodBuilder.methodImplAttributes">
            <summary>
            The method implementation attributes.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.#ctor(System.String,System.Func{System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][],System.Reflection.Emit.MethodBuilder},System.Func{System.Reflection.MethodInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Builders.FluentMethodBuilder"/> class.
            </summary>
            <param name="methodName">The name of the method.</param>
            <param name="defineMethod">A function to define the <see cref="T:System.Reflection.Emit.MethodBuilder"/>.</param>
            <param name="postAction">A function perform any post build actions.</param>
        </member>
        <member name="P:FluentIL.Builders.FluentMethodBuilder.ReturnType">
            <summary>
            Gets the return type.
            </summary>
        </member>
        <member name="P:FluentIL.Builders.FluentMethodBuilder.Attributes">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.Body">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.Body(System.Action{FluentIL.IEmitter})">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.Param``1(System.String,System.Reflection.ParameterAttributes)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.Param(System.Type,System.String,System.Reflection.ParameterAttributes)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.Param(System.Action{FluentIL.IParameterBuilder})">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.Param(FluentIL.IParameterBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.Params(System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.Params(FluentIL.IParameterBuilder[])">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.CreateParam``1(System.String,System.Reflection.ParameterAttributes)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.CreateParam(System.Type,System.String,System.Reflection.ParameterAttributes)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.HasParameter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.GetParameter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.MethodAttributes(System.Reflection.MethodAttributes)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.CallingConvention(System.Reflection.CallingConventions)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.Returns``1">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.Returns(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.Returns(FluentIL.IGenericParameterBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.Returns(System.Type,FluentIL.IGenericParameterBuilder[])">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.NewGenericParameter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.NewGenericParameter(System.String,System.Action{FluentIL.IGenericParameterBuilder})">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.NewGenericParameters(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.NewGenericParameters(System.String[],System.Action{FluentIL.IGenericParameterBuilder[]})">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.GetGenericParameter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.Define">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentMethodBuilder.ThrowIfDefined">
            <summary>
            Throws an exception if the method has been defined.
            </summary>
        </member>
        <member name="T:FluentIL.Builders.FluentModuleBuilder">
            <summary>
            Implementation of a <see cref="T:FluentIL.IModuleBuilder"/>.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentModuleBuilder.moduleBuilder">
            <summary>
            A <see cref="T:System.Reflection.Emit.ModuleBuilder"/> instance.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.FluentModuleBuilder.#ctor(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Builders.FluentModuleBuilder"/> class.
            </summary>
            <param name="moduleBuilder">A module builder.</param>
        </member>
        <member name="M:FluentIL.Builders.FluentModuleBuilder.NewType(System.String)">
            <inheritdoc />>
        </member>
        <member name="M:FluentIL.Builders.FluentModuleBuilder.NewGlobalMethod(System.String)">
            <inheritdoc />>
        </member>
        <member name="M:FluentIL.Builders.FluentModuleBuilder.CreateGlobalFunctions">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentModuleBuilder.GetMethod(System.String)">
            <inheritdoc />
        </member>
        <member name="T:FluentIL.Builders.FluentParameterBuilder">
            <summary>
            An implementation of the <see cref="T:FluentIL.IParameterBuilder"/> interface.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentParameterBuilder.parameterType">
            <summary>
            The parameters type.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.FluentParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Builders.FluentParameterBuilder"/> class.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.FluentParameterBuilder.#ctor(System.Type,System.String,System.Reflection.ParameterAttributes)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Builders.FluentParameterBuilder"/> class.
            </summary>
            <param name="parameterType">The parameters type.</param>
            <param name="parameterName">The parameters name.</param>
            <param name="attrs">The parameters attributes.</param>
        </member>
        <member name="M:FluentIL.Builders.FluentParameterBuilder.#ctor(FluentIL.IGenericParameterBuilder,System.String,System.Reflection.ParameterAttributes)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Builders.FluentParameterBuilder"/> class.
            </summary>
            <param name="parameterType">The parameters type.</param>
            <param name="parameterName">The parameters name.</param>
            <param name="attrs">The parameters attributes.</param>
        </member>
        <member name="P:FluentIL.Builders.FluentParameterBuilder.GenericParameterType">
            <summary>
            Gets the generic type parameter.
            </summary>
        </member>
        <member name="P:FluentIL.Builders.FluentParameterBuilder.ParameterType">
            <summary>
            Gets the parameters type.
            </summary>
        </member>
        <member name="P:FluentIL.Builders.FluentParameterBuilder.ParameterName">
            <summary>
            Gets the parameters name.
            </summary>
        </member>
        <member name="P:FluentIL.Builders.FluentParameterBuilder.Attributes">
            <summary>
            Gets the parameters attributes.
            </summary>
        </member>
        <member name="P:FluentIL.Builders.FluentParameterBuilder.CustomAttributes">
            <summary>
            Gets the parameters custom attributes.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.FluentParameterBuilder.Type``1">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentParameterBuilder.Type(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentParameterBuilder.Name(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentParameterBuilder.HasDefault">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentParameterBuilder.HasFieldMarshal">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentParameterBuilder.In">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentParameterBuilder.Lcid">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentParameterBuilder.Optional">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentParameterBuilder.Out">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentParameterBuilder.Retval">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:FluentIL.Builders.FluentPropertyBuilder">
            <summary>
            Implementation of the <see cref="T:FluentIL.IPropertyBuilder"/> interface.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentPropertyBuilder.define">
            <summary>
            A function to define a property.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentPropertyBuilder.typeBuilder">
            <summary>
             A type builder.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentPropertyBuilder.name">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentPropertyBuilder.propertyType">
            <summary>
            The property type.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentPropertyBuilder.callingConvention">
            <summary>
            The calling convention.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentPropertyBuilder.propertyBuilder">
            <summary>
            The defined property builder.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.FluentPropertyBuilder.#ctor(FluentIL.ITypeBuilder,System.String,System.Type,System.Func{System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][],System.Reflection.Emit.PropertyBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Builders.FluentPropertyBuilder"/> class.
            </summary>
            <param name="typeBuilder">A <see cref="T:FluentIL.ITypeBuilder"/> instance.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyType">The property type.</param>
            <param name="define">A function to define the property.</param>
        </member>
        <member name="P:FluentIL.Builders.FluentPropertyBuilder.PropertyAttributes">
            <inheritdoc />
        </member>
        <member name="P:FluentIL.Builders.FluentPropertyBuilder.SetMethod">
            <inheritdoc />
        </member>
        <member name="P:FluentIL.Builders.FluentPropertyBuilder.GetMethod">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentPropertyBuilder.Getter(System.Action{FluentIL.IMethodBuilder})">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentPropertyBuilder.Getter">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentPropertyBuilder.Setter(System.Action{FluentIL.IMethodBuilder})">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentPropertyBuilder.Setter">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentPropertyBuilder.Attributes(System.Reflection.PropertyAttributes)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentPropertyBuilder.CallingConvention(System.Reflection.CallingConventions)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentPropertyBuilder.Define">
            <inheritdoc />
        </member>
        <member name="T:FluentIL.Builders.FluentTypeBuilder">
            <summary>
            Implementation of the <see cref="T:FluentIL.ITypeBuilder"/> interface.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentTypeBuilder.moduleBuilder">
            <summary>
            The module the type belongs to.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentTypeBuilder.typeName">
            <summary>
            The name of the type.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentTypeBuilder.define">
            <summary>
            The function to define the type builder.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentTypeBuilder.baseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentTypeBuilder.typeBuilder">
            <summary>
            The type builder.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentTypeBuilder.interfaces">
            <summary>
            A list of interfaces the type implements.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentTypeBuilder.actions">
            <summary>
            A list of actions to execute upon creation of the type builder.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentTypeBuilder.genericParameters">
            <summary>
            A list of generic type parameters.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentTypeBuilder.customAttributes">
            <summary>
            A list of type attributes.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentTypeBuilder.typeInfo">
            <summary>
            The types information.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.FluentTypeBuilder.genericParemetersBuilt">
            <summary>
            A value indicating whether or not the generic parameters have been built.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.#ctor(System.Reflection.Emit.ModuleBuilder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Builders.FluentTypeBuilder"/> class.
            </summary>
            <param name="moduleBuilder">A <see cref="T:System.Reflection.Emit.ModuleBuilder"/> instance.</param>
            <param name="typeName">The name of the type.</param>
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.#ctor(System.String,System.Func{System.String,System.Reflection.TypeAttributes,System.Type,System.Type[],System.Reflection.Emit.TypeBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Builders.FluentTypeBuilder"/> class.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="define">A function to define the <see cref="T:System.Reflection.Emit.TypeBuilder"/>.</param>
        </member>
        <member name="P:FluentIL.Builders.FluentTypeBuilder.TypeName">
            <inheritdoc />
        </member>
        <member name="P:FluentIL.Builders.FluentTypeBuilder.TypeAttributes">
            <inheritdoc />
        </member>
        <member name="P:FluentIL.Builders.FluentTypeBuilder.Interfaces">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.Attributes(System.Reflection.TypeAttributes)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.InheritsFrom``1">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.InheritsFrom(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.Implements``1">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.Implements(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.NewConstructor">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.NewConstructor(System.Action{FluentIL.IConstructorBuilder})">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.NewDefaultConstructor(System.Reflection.MethodAttributes)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.NewField(System.String,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.NewField(System.String,System.Type,FluentIL.IGenericParameterBuilder[])">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.NewField(System.String,FluentIL.IGenericParameterBuilder)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.NewField(System.String,System.Type,System.Action{FluentIL.IFieldBuilder})">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.NewMethod(System.String,System.Action{FluentIL.IMethodBuilder})">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.NewMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.NewMethod(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.NewProperty(System.String,System.Type)">
            <summary>
            Defines a property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyType">The property type.</param>
            <returns>The field builder instance.</returns>
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.NewProperty(System.String,System.Type,System.Action{FluentIL.IPropertyBuilder})">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.NewEvent(System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.NewEvent(System.String,System.Type,System.Action{FluentIL.IEventBuilder})">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.NewNestedType(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.NewGenericParameter(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.NewGenericParameter(System.String,System.Action{FluentIL.IGenericParameterBuilder})">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.Define">
            <summary>
            Builds the type.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.CreateType">
            <summary>
            Creates the type.
            </summary>
            <returns>The created type.</returns>
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.ThrowIfAlreadyBuilt">
            <summary>
            Throws an error if the type has been built.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.BuildGenericParameters">
            <summary>
            Builds any generic parameters.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.FluentTypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
            <summary>
            Defines a method.
            </summary>
            <param name="name">The name of the method.</param>
            <param name="attributes">The methods attributes.</param>
            <param name="convention">The methods calling convention.</param>
            <param name="returnType">The methods return type.</param>
            <param name="returnTypeRequiredCustomModifiers">The return types required custom modifiers.</param>
            <param name="returnTypeOptionalCustomModifiers">The return types optional custom modifiers.</param>
            <param name="parameterTypes">The methods parameter types.</param>
            <param name="parameterTypeRequiredCustomModifiers">The parameter types required custom modifiers.</param>
            <param name="parameterTypeOptionalCustomModifiers">The parameter types optional custom modifiers.</param>
            <returns>A <see cref="T:System.Reflection.Emit.MethodBuilder"/> instance.</returns>
        </member>
        <member name="T:FluentIL.Builders.MethodInfoBuilder">
            <summary>
            Represents a <see cref="T:System.Reflection.MethodInfo"/> builder.
            </summary>
        </member>
        <member name="F:FluentIL.Builders.MethodInfoBuilder.methods">
            <summary>
            A list of matching methods.
            </summary>
        </member>
        <member name="M:FluentIL.Builders.MethodInfoBuilder.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Builders.MethodInfoBuilder"/> class.
            </summary>
            <param name="type">The type that the method belongs to.</param>
            <param name="methodName">The name of the method to find.</param>
        </member>
        <member name="M:FluentIL.Builders.MethodInfoBuilder.IsGenericDefinition">
            <summary>
            Looks forgeneric definition methods.
            </summary>
            <returns>The <see cref="T:FluentIL.Builders.MethodInfoBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Builders.MethodInfoBuilder.HasParameterTypes(System.Type[])">
            <summary>
            Lokks for methods with matching parameter types.
            </summary>
            <param name="types">A list of parameter types.</param>
            <returns>The <see cref="T:FluentIL.Builders.MethodInfoBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Builders.MethodInfoBuilder.HasMetadataToken(System.Int32)">
            <summary>
            Looks for methods with a given metadata token.
            </summary>
            <param name="metadataToken">THe metadata token.</param>
            <returns>The <see cref="T:FluentIL.Builders.MethodInfoBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Builders.MethodInfoBuilder.FirstOrDefault">
            <summary>
            Returns the first method found or null if there are no matching methods.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> instance; otherwise null.</returns>
        </member>
        <member name="M:FluentIL.Builders.MethodInfoBuilder.All">
            <summary>
            Returns all matching methods.
            </summary>
            <returns>A list of matching <see cref="T:System.Reflection.MethodInfo"/> instances.</returns>
        </member>
        <member name="M:FluentIL.Builders.MethodInfoBuilder.ParameterTypesMatch(System.Reflection.ParameterInfo[],System.Type[])">
            <summary>
            Checks if the parameters match the types.
            </summary>
            <param name="parms">The methods parameters.</param>
            <param name="types">The type list to match with.</param>
            <returns>True or false.</returns>
        </member>
        <member name="T:FluentIL.ConsoleOutput">
            <summary>
            Console implementation of the <see cref="T:FluentIL.IDebugOutput"/> interface.
            </summary>
        </member>
        <member name="M:FluentIL.ConsoleOutput.Write(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.ConsoleOutput.WriteLine(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.ConsoleOutput.WriteColor(System.ConsoleColor,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.ConsoleOutput.WriteLineColor(System.ConsoleColor,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:FluentIL.DebugOutput">
            <summary>
            Debug output helper.
            </summary>
        </member>
        <member name="P:FluentIL.DebugOutput.Output">
            <summary>
            Gets or sets the <see cref="T:FluentIL.IDebugOutput"/> instance.
            </summary>
            <returns>The <see cref="T:FluentIL.IDebugOutput"/> instsnce.</returns>
        </member>
        <member name="M:FluentIL.DebugOutput.Write(System.String,System.Object[])">
            <summary>
            Writes to debug output.
            </summary>
            <param name="format">A string format.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:FluentIL.DebugOutput.WriteLine(System.String,System.Object[])">
            <summary>
            Writes a line to debug output.
            </summary>
            <param name="format">A string format.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:FluentIL.DebugOutput.WriteColor(System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Writes to debug output in a specified colour.
            </summary>
            <param name="color">The colour of the string.</param>
            <param name="format">A string format.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:FluentIL.DebugOutput.WriteLineColor(System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Writes a line to debug output in a specified colour.
            </summary>
            <param name="color">The colour of the string.</param>
            <param name="format">A string format.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:FluentIL.DebugOutput.OutputMethodAttributes(System.Reflection.MethodAttributes)">
            <summary>
            Outputs method attributes as a string.
            </summary>
            <param name="methodAttributes">The method attributes.</param>
            <returns>A string representation.</returns>
        </member>
        <member name="T:FluentIL.DynamicMethodFactory">
            <summary>
            Represents a dynamic method factory.
            </summary>
        </member>
        <member name="F:FluentIL.DynamicMethodFactory.instance">
            <summary>
            The default <see cref="T:FluentIL.DynamicMethodFactory"/> instance.
            </summary>
        </member>
        <member name="P:FluentIL.DynamicMethodFactory.Default">
            <summary>
            Gets the default dynamic method factory.
            </summary>
        </member>
        <member name="M:FluentIL.DynamicMethodFactory.NewDynamicMethod(System.String,System.Type)">
            <summary>
            Creates a new dynamic method.
            </summary>
            <param name="methodName">The methods name.</param>
            <param name="methodOwner">The methods owner.</param>
            <returns>A <see cref="T:FluentIL.IDynamicMethodBuilder"/> instance.</returns>
        </member>
        <member name="T:FluentIL.Emitters.DebugEmitter">
            <summary>
            A debug implementation of the <see cref="T:FluentIL.IEmitter"/> interface to allow
            IL to be written to a <see cref="T:FluentIL.IDebugOutput"/> implemenation.
            </summary>
        </member>
        <member name="F:FluentIL.Emitters.DebugEmitter.emitter">
            <summary>
            The <see cref="T:FluentIL.IEmitter"/> to make the actual call to.
            </summary>
        </member>
        <member name="F:FluentIL.Emitters.DebugEmitter.debugOutput">
            <summary>
            The <see cref="T:FluentIL.IDebugOutput" /> to write output to.
            </summary>
        </member>
        <member name="F:FluentIL.Emitters.DebugEmitter.offset">
            <summary>
            The current IL offset.
            </summary>
        </member>
        <member name="F:FluentIL.Emitters.DebugEmitter.index">
            <summary>
            The current local index.
            </summary>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.#ctor(FluentIL.IEmitter,FluentIL.IDebugOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Emitters.DebugEmitter"/> class.
            </summary>
            <param name="emitter">The emitter to call through to.</param>
            <param name="debugOutput">The debug output to write to.</param>
        </member>
        <member name="P:FluentIL.Emitters.DebugEmitter.ILOffset">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.BeginCatchBlock(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.BeginExceptFilterBlock">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.BeginExceptionBlock(FluentIL.ILabel@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.BeginExceptionBlock(FluentIL.ILabel)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.BeginFaultBlock">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.BeginFinallyBlock">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.BeginScope">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.DeclareLocal(System.Type,FluentIL.ILocal@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.DeclareLocal(System.Type,System.String,FluentIL.ILocal@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.DeclareLocal(System.Type,System.Boolean,FluentIL.ILocal@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.DeclareLocal(System.Type,System.String,System.Boolean,FluentIL.ILocal@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.DeclareLocal(FluentIL.IGenericParameterBuilder,FluentIL.ILocal@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.DeclareLocal(System.Type,FluentIL.IGenericParameterBuilder[],FluentIL.ILocal@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.DeclareLocal(FluentIL.ITypeBuilder,FluentIL.ILocal@)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.DeclareLocal(FluentIL.ILocal)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.DefineLabel(FluentIL.ILabel@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.DefineLabel(System.String,FluentIL.ILabel@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.DefineLabel(FluentIL.ILabel)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Emit(System.Reflection.Emit.OpCode,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Emit(System.Reflection.Emit.OpCode,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Emit(System.Reflection.Emit.OpCode,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Emit(System.Reflection.Emit.OpCode,FluentIL.IFieldBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Emit(System.Reflection.Emit.OpCode,FluentIL.ILabel[])">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Emit(System.Reflection.Emit.OpCode,FluentIL.ILocal)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Emit(System.Reflection.Emit.OpCode,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Emit(System.Reflection.Emit.OpCode,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Emit(System.Reflection.Emit.OpCode,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Emit(System.Reflection.Emit.OpCode,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Emit(System.Reflection.Emit.OpCode,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Emit(System.Reflection.Emit.OpCode)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Emit(System.Reflection.Emit.OpCode,FluentIL.ILabel)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.EmitCall(System.Reflection.Emit.OpCode,System.Func{System.Reflection.MethodInfo})">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.EmitWriteLine(System.Reflection.FieldInfo)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.EmitWriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.EmitWriteLine(FluentIL.ILocal)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.EndExceptionBlock">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.EndScope">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.MarkLabel(FluentIL.ILabel)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.ThrowException(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.UsingNamespace(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Comment(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.Defer(System.Action{FluentIL.IEmitter})">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.EmitIL(System.Reflection.Emit.ILGenerator)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.OutputILOffset">
            <summary>
            Output the IL offset.
            </summary>
        </member>
        <member name="M:FluentIL.Emitters.DebugEmitter.OutputOpCode(System.Reflection.Emit.OpCode)">
            <summary>
            Outputs the <see cref="T:System.Reflection.Emit.OpCode"/>.
            </summary>
            <param name="opcode">An OpCode.</param>
        </member>
        <member name="T:FluentIL.Emitters.DeferredILGeneratorEmitter">
            <summary>
            <see cref="T:System.Reflection.Emit.ILGenerator"/> implementation of the <see cref="T:FluentIL.IEmitter"/> interface.
            </summary>
        </member>
        <member name="F:FluentIL.Emitters.DeferredILGeneratorEmitter.offset">
            <summary>
            The current IL offset.
            </summary>
        </member>
        <member name="F:FluentIL.Emitters.DeferredILGeneratorEmitter.actions">
            <summary>
            A list of deferred actions.
            </summary>
        </member>
        <member name="P:FluentIL.Emitters.DeferredILGeneratorEmitter.ILOffset">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.BeginCatchBlock(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.BeginExceptFilterBlock">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.BeginExceptionBlock(FluentIL.ILabel@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.BeginExceptionBlock(FluentIL.ILabel)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.BeginFaultBlock">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.BeginFinallyBlock">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.BeginScope">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.DeclareLocal(System.Type,FluentIL.ILocal@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.DeclareLocal(System.Type,System.String,FluentIL.ILocal@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.DeclareLocal(System.Type,System.Boolean,FluentIL.ILocal@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.DeclareLocal(System.Type,System.String,System.Boolean,FluentIL.ILocal@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.DeclareLocal(FluentIL.IGenericParameterBuilder,FluentIL.ILocal@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.DeclareLocal(System.Type,FluentIL.IGenericParameterBuilder[],FluentIL.ILocal@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.DeclareLocal(FluentIL.ITypeBuilder,FluentIL.ILocal@)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.DeclareLocal(FluentIL.ILocal)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.DefineLabel(FluentIL.ILabel@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.DefineLabel(System.String,FluentIL.ILabel@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.DefineLabel(FluentIL.ILabel)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,FluentIL.IFieldBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,FluentIL.ILabel[])">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,FluentIL.ILocal)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,FluentIL.ILabel)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.EmitCall(System.Reflection.Emit.OpCode,System.Func{System.Reflection.MethodInfo})">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.EmitWriteLine(System.Reflection.FieldInfo)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.EmitWriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.EmitWriteLine(FluentIL.ILocal)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.EndExceptionBlock">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.EndScope">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.MarkLabel(FluentIL.ILabel)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.ThrowException(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.UsingNamespace(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Comment(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.Defer(System.Action{FluentIL.IEmitter})">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.DeferredILGeneratorEmitter.EmitIL(System.Reflection.Emit.ILGenerator)">
            <summary>
            Defines the constructor.
            </summary>
            <param name="generator">An IL generator.</param>
        </member>
        <member name="T:FluentIL.Emitters.EmitterBase">
            <summary>
            Emitter base class.
            </summary>
        </member>
        <member name="P:FluentIL.Emitters.EmitterBase.ILOffset">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.BeginCatchBlock(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.BeginExceptFilterBlock">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.BeginExceptionBlock(FluentIL.ILabel@)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.BeginExceptionBlock(FluentIL.ILabel)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.BeginFaultBlock">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.BeginFinallyBlock">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.BeginScope">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Comment(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.DeclareLocal(System.Type,FluentIL.ILocal@)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.DeclareLocal(System.Type,System.String,FluentIL.ILocal@)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.DeclareLocal(System.Type,System.Boolean,FluentIL.ILocal@)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.DeclareLocal(System.Type,System.String,System.Boolean,FluentIL.ILocal@)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.DeclareLocal(FluentIL.IGenericParameterBuilder,FluentIL.ILocal@)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.DeclareLocal(System.Type,FluentIL.IGenericParameterBuilder[],FluentIL.ILocal@)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.DeclareLocal(FluentIL.ITypeBuilder,FluentIL.ILocal@)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.DeclareLocal(FluentIL.ILocal)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.DefineLabel(FluentIL.ILabel@)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.DefineLabel(System.String,FluentIL.ILabel@)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.DefineLabel(FluentIL.ILabel)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Emit(System.Reflection.Emit.OpCode,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Emit(System.Reflection.Emit.OpCode,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Emit(System.Reflection.Emit.OpCode,System.SByte)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Emit(System.Reflection.Emit.OpCode,FluentIL.IFieldBuilder)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Emit(System.Reflection.Emit.OpCode,FluentIL.ILabel[])">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Emit(System.Reflection.Emit.OpCode,FluentIL.ILocal)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Emit(System.Reflection.Emit.OpCode,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Emit(System.Reflection.Emit.OpCode,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Emit(System.Reflection.Emit.OpCode,System.Int16)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Emit(System.Reflection.Emit.OpCode,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Emit(System.Reflection.Emit.OpCode,System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Emit(System.Reflection.Emit.OpCode)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Emit(System.Reflection.Emit.OpCode,FluentIL.ILabel)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.EmitCall(System.Reflection.Emit.OpCode,System.Func{System.Reflection.MethodInfo})">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.EmitWriteLine(System.Reflection.FieldInfo)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.EmitWriteLine(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.EmitWriteLine(FluentIL.ILocal)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.EndExceptionBlock">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.EndScope">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.MarkLabel(FluentIL.ILabel)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.ThrowException(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.UsingNamespace(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Defer(System.Action{FluentIL.IEmitter})">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.EmitIL(System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits the IL.
            </summary>
            <param name="generator">An IL generator.</param>
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.OutputOpCode(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode)">
            <summary>
            Outputs the <see cref="T:System.Reflection.Emit.OpCode"/>.
            </summary>
            <param name="generator">The IL Generator.</param>
            <param name="opcode">An OpCode.</param>
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.OutputILOffset(System.Reflection.Emit.ILGenerator)">
            <summary>
            Output the IL offset.
            </summary>
            <param name="generator">The IL Generator.</param>
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.Write(System.String,System.Object[])">
            <summary>
            Writes to debug output.
            </summary>
            <param name="format">A string format.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.WriteLine(System.String,System.Object[])">
            <summary>
            Writes a line to debug output.
            </summary>
            <param name="format">A string format.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.WriteColor(System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Writes to debug output in a specified colour.
            </summary>
            <param name="color">The colour of the string.</param>
            <param name="format">A string format.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.WriteLineColor(System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Writes a line to debug output in a specified colour.
            </summary>
            <param name="color">The colour of the string.</param>
            <param name="format">A string format.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.WriteError(System.String,System.Object[])">
            <summary>
            Outputs an error.
            </summary>
            <param name="format">A format string.</param>
            <param name="args">A list of arguments.</param>
        </member>
        <member name="M:FluentIL.Emitters.EmitterBase.WriteLineError(System.String,System.Object[])">
            <summary>
            Outputs an error.
            </summary>
            <param name="format">A format string.</param>
            <param name="args">A list of arguments.</param>
        </member>
        <member name="T:FluentIL.Emitters.ILGeneratorEmitter">
            <summary>
            <see cref="T:System.Reflection.Emit.ILGenerator"/> implementation of the <see cref="T:FluentIL.IEmitter"/> interface.
            </summary>
        </member>
        <member name="F:FluentIL.Emitters.ILGeneratorEmitter.generator">
            <summary>
            The <see cref="T:System.Reflection.Emit.ILGenerator"/> to use.
            </summary>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.#ctor(System.Reflection.Emit.ILGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Emitters.ILGeneratorEmitter"/> class.
            </summary>
            <param name="generator">The <see cref="T:System.Reflection.Emit.ILGenerator"/> to use.</param>
        </member>
        <member name="P:FluentIL.Emitters.ILGeneratorEmitter.ILOffset">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.BeginCatchBlock(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.BeginExceptFilterBlock">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.BeginExceptionBlock(FluentIL.ILabel@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.BeginExceptionBlock(FluentIL.ILabel)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.BeginFaultBlock">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.BeginFinallyBlock">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.BeginScope">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.DeclareLocal(System.Type,FluentIL.ILocal@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.DeclareLocal(System.Type,System.String,FluentIL.ILocal@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.DeclareLocal(System.Type,System.Boolean,FluentIL.ILocal@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.DeclareLocal(System.Type,System.String,System.Boolean,FluentIL.ILocal@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.DeclareLocal(FluentIL.IGenericParameterBuilder,FluentIL.ILocal@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.DeclareLocal(System.Type,FluentIL.IGenericParameterBuilder[],FluentIL.ILocal@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.DeclareLocal(FluentIL.ITypeBuilder,FluentIL.ILocal@)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.DeclareLocal(FluentIL.ILocal)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.DefineLabel(FluentIL.ILabel@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.DefineLabel(System.String,FluentIL.ILabel@)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.DefineLabel(FluentIL.ILabel)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,FluentIL.IFieldBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,FluentIL.ILabel[])">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,FluentIL.ILocal)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Emit(System.Reflection.Emit.OpCode,FluentIL.ILabel)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.EmitCall(System.Reflection.Emit.OpCode,System.Func{System.Reflection.MethodInfo})">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.EmitWriteLine(System.Reflection.FieldInfo)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.EmitWriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.EmitWriteLine(FluentIL.ILocal)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.EndExceptionBlock">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.EndScope">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.MarkLabel(FluentIL.ILabel)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.ThrowException(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.UsingNamespace(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Comment(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.Defer(System.Action{FluentIL.IEmitter})">
            <inheritdoc/>
        </member>
        <member name="M:FluentIL.Emitters.ILGeneratorEmitter.EmitIL(System.Reflection.Emit.ILGenerator)">
            <inheritdoc/>
        </member>
        <member name="T:FluentIL.Emitters.LabelAdapter">
            <summary>
            A label adapter.
            </summary>
        </member>
        <member name="M:FluentIL.Emitters.LabelAdapter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Emitters.LabelAdapter"/> class.
            </summary>
            <param name="name">The name of the label.</param>
            <param name="label">The label.</param>
        </member>
        <member name="P:FluentIL.Emitters.LabelAdapter.Label">
            <inheritdoc/>
        </member>
        <member name="P:FluentIL.Emitters.LabelAdapter.Name">
            <inheritdoc/>
        </member>
        <member name="T:FluentIL.Emitters.LocalAdapter">
            <summary>
            A local variable adapter.
            </summary>
        </member>
        <member name="M:FluentIL.Emitters.LocalAdapter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Emitters.LocalAdapter"/> class.
            </summary>
            <param name="name">The name of the local.</param>
        </member>
        <member name="M:FluentIL.Emitters.LocalAdapter.#ctor(System.String,System.Type,System.Int32,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Emitters.LocalAdapter"/> class.
            </summary>
            <param name="name">The name of the local.</param>
            <param name="localType">The locals type.</param>
            <param name="localIndex">The locals index.</param>
            <param name="isPinned">A value indicating wheteher or not the local is pinned.</param>
            <param name="local">The local instance.</param>
        </member>
        <member name="M:FluentIL.Emitters.LocalAdapter.#ctor(System.String,FluentIL.IGenericParameterBuilder,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Emitters.LocalAdapter"/> class.
            </summary>
            <param name="name">The name of the local.</param>
            <param name="genericParameter">A generic parameter.</param>
            <param name="local">The local instance.</param>
        </member>
        <member name="M:FluentIL.Emitters.LocalAdapter.#ctor(System.String,System.Type,FluentIL.IGenericParameterBuilder[],System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Emitters.LocalAdapter"/> class.
            </summary>
            <param name="name">The name of the local.</param>
            <param name="localTypeDefinition">The local type definition.</param>
            <param name="genericTypeArgs">An array of generic type arguments.</param>
            <param name="local">The local instance.</param>
        </member>
        <member name="P:FluentIL.Emitters.LocalAdapter.Local">
            <inheritdoc/>
        </member>
        <member name="P:FluentIL.Emitters.LocalAdapter.Name">
            <inheritdoc/>
        </member>
        <member name="P:FluentIL.Emitters.LocalAdapter.IsPinned">
            <inheritdoc/>
        </member>
        <member name="P:FluentIL.Emitters.LocalAdapter.LocalIndex">
            <inheritdoc/>
        </member>
        <member name="P:FluentIL.Emitters.LocalAdapter.LocalType">
            <inheritdoc/>
        </member>
        <member name="T:FluentIL.Expressions.ExpressionBuilder">
            <summary>
            Used to build expressions.
            </summary>
        </member>
        <member name="F:FluentIL.Expressions.ExpressionBuilder.LDCI4">
            <summary>
            Load constant opcodes.
            </summary>
        </member>
        <member name="F:FluentIL.Expressions.ExpressionBuilder.emitter">
            <summary>
            A reference to an emitter.
            </summary>
        </member>
        <member name="F:FluentIL.Expressions.ExpressionBuilder.arguments">
            <summary>
            An argument stack.
            </summary>
        </member>
        <member name="F:FluentIL.Expressions.ExpressionBuilder.fieldNames">
            <summary>
            A field names stack.
            </summary>
        </member>
        <member name="F:FluentIL.Expressions.ExpressionBuilder.lastExpressionType">
            <summary>
            The last expression type.
            </summary>
        </member>
        <member name="F:FluentIL.Expressions.ExpressionBuilder.storeTrueLabel">
            <summary>
            A label to the true store.
            </summary>
        </member>
        <member name="F:FluentIL.Expressions.ExpressionBuilder.storeFalseLabel">
            <summary>
            A label to the false store.
            </summary>
        </member>
        <member name="F:FluentIL.Expressions.ExpressionBuilder.storeResultLabel">
            <summary>
            A label to the result store.
            </summary>
        </member>
        <member name="M:FluentIL.Expressions.ExpressionBuilder.#ctor(FluentIL.IEmitter)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.Expressions.ExpressionBuilder"/> class.
            </summary>
            <param name="emitter">A reference to the emitter.</param>
        </member>
        <member name="P:FluentIL.Expressions.ExpressionBuilder.StoreTrueLabel">
            <summary>
            Gets the store true label.
            </summary>
        </member>
        <member name="P:FluentIL.Expressions.ExpressionBuilder.StoreFalseLabel">
            <summary>
            Gets the store false label.
            </summary>
        </member>
        <member name="M:FluentIL.Expressions.ExpressionBuilder.EmitIF(System.Linq.Expressions.LambdaExpression,System.Action{FluentIL.IEmitter},System.Action{FluentIL.IEmitter})">
            <summary>
            Emits an IF statement.
            </summary>
            <param name="expression">The expression.</param>
            <param name="trueAction">The action to perform if the result of the expression is true.</param>
            <param name="falseAction">The action to perform if the result of the expression is false.</param>
        </member>
        <member name="M:FluentIL.Expressions.ExpressionBuilder.EmitWhile(System.Linq.Expressions.LambdaExpression,System.Action{FluentIL.IEmitter})">
            <summary>
            Emits a while loop.
            </summary>
            <param name="expression">The while expression.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:FluentIL.Expressions.ExpressionBuilder.EmitDoWhile(System.Linq.Expressions.LambdaExpression,System.Action{FluentIL.IEmitter})">
            <summary>
            Emits a do while loop.
            </summary>
            <param name="expression">The do while expression.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:FluentIL.Expressions.ExpressionBuilder.EmitFor(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Action{FluentIL.IEmitter})">
            <summary>
            Emits a for loop.
            </summary>
            <param name="initialiser">The initialiser expression.</param>
            <param name="condition">The condition expression.</param>
            <param name="iterator">The iterator expression.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:FluentIL.Expressions.ExpressionBuilder.EmitStoreTrueFalse">
            <summary>
            Emits the IL to store the true and false.
            </summary>
        </member>
        <member name="M:FluentIL.Expressions.ExpressionBuilder.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Expressions.ExpressionBuilder.VisitMember(System.Linq.Expressions.MemberExpression)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Expressions.ExpressionBuilder.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Expressions.ExpressionBuilder.GetValue(System.Object)">
            <summary>
            Gets the value of an object.
            </summary>
            <param name="input">The input object.</param>
            <returns>The objects value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.ExpressionBuilder.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc />
        </member>
        <member name="M:FluentIL.Expressions.ExpressionBuilder.ProcessOperator(System.Linq.Expressions.ExpressionType,System.Type)">
            <summary>
            Processs the operator.
            </summary>
            <param name="expressionType">The expression type.</param>
            <param name="comparisonType">The comparison type.</param>
        </member>
        <member name="T:FluentIL.Expressions.ExpressionExtensions">
            <summary>
            Expression extension methods.
            </summary>
        </member>
        <member name="F:FluentIL.Expressions.ExpressionExtensions.SupportedMethods">
            <summary>
            A list of supported method.
            </summary>
        </member>
        <member name="M:FluentIL.Expressions.ExpressionExtensions.EmitMethod(FluentIL.IEmitter,System.Reflection.MethodInfo,System.Collections.Generic.Stack{System.Object})">
            <summary>
            Emits an expression method.
            </summary>
            <param name="emitter">A reference to an emitter.</param>
            <param name="expressionMethod">A reference to the expression method.</param>
            <param name="arguments">A reference to the argument stack.</param>
        </member>
        <member name="T:FluentIL.Expressions.ICondition">
            <summary>
            Defines the condition interface.
            </summary>
        </member>
        <member name="M:FluentIL.Expressions.ICondition.LdLoc``1(FluentIL.ILocal)">
            <summary>
            Loads a local value onto the top of the evaluation stack.
            </summary>
            <typeparam name="T">The local type.</typeparam>
            <param name="local">A reference to a local.</param>
            <returns>The local value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.ICondition.LdLoc0``1">
            <summary>
            Loads the value from local at position 0 onto the top of the evaluation stack.
            </summary>
            <typeparam name="T">The local type.</typeparam>
            <returns>The local value.</returns>l
        </member>
        <member name="M:FluentIL.Expressions.ICondition.LdLoc1``1">
            <summary>
            Loads the value from local at position 1 onto the top of the evaluation stack.
            </summary>
            <typeparam name="T">The local type.</typeparam>
            <returns>The local value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.ICondition.LdLoc2``1">
            <summary>
            Loads the value from local at position 2 onto the top of the evaluation stack.
            </summary>
            <typeparam name="T">The local type.</typeparam>
            <returns>The local value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.ICondition.LdLoc3``1">
            <summary>
            Loads the value from local at position 3 onto the top of the evaluation stack.
            </summary>
            <typeparam name="T">The local type.</typeparam>
            <returns>The local value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.ICondition.LdcI4(System.Int32)">
            <summary>
            Loads an integer value onto the top of the evaluation stack.
            </summary>
            <param name="value">The value to load.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.ICondition.LdcI4_0">
            <summary>
            Loads an integer value 0 onto the top of the evaluation stack.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.ICondition.LdcI4_1">
            <summary>
            Loads an integer value 1 onto the top of the evaluation stack.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.ICondition.LdcI4_2">
            <summary>
            Loads an integer value 2 onto the top of the evaluation stack.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.ICondition.LdcI4_3">
            <summary>
            Loads an integer value 3 onto the top of the evaluation stack.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.ICondition.LdcI4_4">
            <summary>
            Loads an integer value 4 onto the top of the evaluation stack.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.ICondition.LdcI4_5">
            <summary>
            Loads an integer value 5 onto the top of the evaluation stack.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.ICondition.LdcI4_6">
            <summary>
            Loads an integer value 6 onto the top of the evaluation stack.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.ICondition.LdcI4_7">
            <summary>
            Loads an integer value 7 onto the top of the evaluation stack.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.ICondition.LdcI4_8">
            <summary>
            Loads an integer value 8 onto the top of the evaluation stack.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="T:FluentIL.Expressions.IExpression">
            <summary>
            Defines the expressiom interface.
            </summary>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdArg(System.Int32)">
            <summary>
            Loads an argument onto the top of the evaluation stack.
            </summary>
            <param name="index">The argument index.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdArgS(System.Int32)">
            <summary>
            Loads an argument onto the top of the evaluation stack (short form).
            </summary>
            <param name="index">The argument index.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdArg0">
            <summary>
            Loads the first argument onto the top of the evaluation stack.
            </summary>
            <returns>The expression.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdArg1">
            <summary>
            Loads the second argument onto the top of the evaluation stack.
            </summary>
            <returns>The expression.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdArg2">
            <summary>
            Loads the third argument onto the top of the evaluation stack.
            </summary>
            <returns>The expression.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdArg3">
            <summary>
            Loads the fourth argument onto the top of the evaluation stack.
            </summary>
            <returns>The expression.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdArg``1(System.Int32)">
            <summary>
            Loads an argument onto the top of the evaluation stack.
            </summary>
            <typeparam name="T">The argument type.</typeparam>
            <param name="index">The argument index.</param>
            <returns>The argument value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdArgS``1(System.Int32)">
            <summary>
            Loads an argument onto the top of the evaluation stack.
            </summary>
            <typeparam name="T">The argument type.</typeparam>
            <param name="index">The argument index.</param>
            <returns>The argument value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdArg0``1">
            <summary>
            Loads the first argument onto the top of the evaluation stack.
            </summary>
            <typeparam name="T">The argument type.</typeparam>
            <returns>The argument value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdArg1``1">
            <summary>
            Loads the second argument onto the top of the evaluation stack.
            </summary>
            <typeparam name="T">The argument type.</typeparam>
            <returns>The argument value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdArg2``1">
            <summary>
            Loads the third argument onto the top of the evaluation stack.
            </summary>
            <typeparam name="T">The argument type.</typeparam>
            <returns>The argument value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdArg3``1">
            <summary>
            Loads the fourth argument onto the top of the evaluation stack.
            </summary>
            <typeparam name="T">The argument type.</typeparam>
            <returns>The argument value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdLoc(FluentIL.ILocal)">
            <summary>
            Loads a local value onto the evaluaton stack.
            </summary>
            <param name="local">The local to load.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdLoc``1(FluentIL.ILocal)">
            <summary>
            Loads a local value onto the evaluaton stack.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="local">The local to load.</param>
            <returns>The local value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdLocS``1(FluentIL.ILocal)">
            <summary>
            Loads a local value onto the evaluaton stack.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="local">The local to load.</param>
            <returns>The local value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdLoc0``1">
            <summary>
            Loads the value of the first local onto the evaluaton stack.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <returns>The local value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdLoc1``1">
            <summary>
            Loads the value of the second local onto the evaluaton stack.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <returns>The local value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdLoc2``1">
            <summary>
            Loads the value of the third local onto the evaluaton stack.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <returns>The local value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdLoc3``1">
            <summary>
            Loads the value of the fourth local onto the evaluaton stack.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <returns>The local value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdNull">
            <summary>
            Loads a null value onto the top of the evaluation stack.
            </summary>
            <returns>The loaded value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdcI4(System.Int32)">
            <summary>
            Loads an integer value onto the top of the evaluation stack.
            </summary>
            <param name="value">The value to load.</param>
            <returns>The loaded value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdcI4_0">
            <summary>
            Loads the value 0 onto the top of the evaluation stack.
            </summary>
            <returns>The loaded value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdcI4_1">
            <summary>
            Loads the value 1 onto the top of the evaluation stack.
            </summary>
            <returns>The loaded value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdcI4_2">
            <summary>
            Loads the value 2 onto the top of the evaluation stack.
            </summary>
            <returns>The loaded value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdcI4_3">
            <summary>
            Loads the value 3 onto the top of the evaluation stack.
            </summary>
            <returns>The loaded value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdcI4_4">
            <summary>
            Loads the value 4 onto the top of the evaluation stack.
            </summary>
            <returns>The loaded value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdcI4_5">
            <summary>
            Loads the value 5 onto the top of the evaluation stack.
            </summary>
            <returns>The loaded value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdcI4_6">
            <summary>
            Loads the value 6 onto the top of the evaluation stack.
            </summary>
            <returns>The loaded value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdcI4_7">
            <summary>
            Loads the value 7 onto the top of the evaluation stack.
            </summary>
            <returns>The loaded value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdcI4_8">
            <summary>
            Loads the value 8 onto the top of the evaluation stack.
            </summary>
            <returns>The loaded value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdcI4_M1">
            <summary>
            Loads the value of -1 onto the top of the evaluation stack.
            </summary>
            <returns>The loaded value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdcI4_S">
            <summary>
            Loads an int value onto the top of the evaluation stack.
            </summary>
            <returns>The loaded value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdcI8(System.Int64)">
            <summary>
            Loads a long value onto the top of the evaluation stack.
            </summary>
            <param name="value">The value to load.</param>
            <returns>The loaded value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdcR4(System.Single)">
            <summary>
            Loads a double value onto the top of the evaluation stack.
            </summary>
            <param name="value">The value to load.</param>
            <returns>The loaded value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdcR8(System.Double)">
            <summary>
            Loads a double value onto the top of the evaluation stack.
            </summary>
            <param name="value">The value to load.</param>
            <returns>The loaded value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdFld``1(FluentIL.IFieldBuilder)">
            <summary>
            Loads the value of a field onto the evaluation stack.
            </summary>
            <typeparam name="T">The fields type.</typeparam>
            <param name="field">The field.</param>
            <returns>The field value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.LdFld(FluentIL.IFieldBuilder)">
            <summary>
            Loads a field.
            </summary>
            <param name="field">The field to load.</param>
            <returns>An expression.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.Value``1">
            <summary>
            Returns the value on top of the evaluation stack.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <returns>The value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.Value(System.Type)">
            <summary>
            Returns the value on top of the evaluation stack.
            </summary>
            <param name="type">The value type.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IExpression.Call``1(System.Reflection.MethodInfo)">
            <summary>
            Calls a method.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="methodInfo">The method to call.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:FluentIL.Expressions.IInitialiser">
            <summary>
            Defines the intialiser interface.
            </summary>
        </member>
        <member name="M:FluentIL.Expressions.IInitialiser.DeclareLocal``1(FluentIL.ILocal@)">
            <summary>
            Declares a local.
            </summary>
            <typeparam name="T">The locals type.</typeparam>
            <param name="local">A variable to receive a local.</param>
            <returns>The <see cref="T:FluentIL.Expressions.IInitialiser"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IInitialiser.DeclareLocal``1(System.String,FluentIL.ILocal@)">
            <summary>
            Declares a local.
            </summary>
            <typeparam name="T">The locals type.</typeparam>
            <param name="localName">The name of the local.</param>
            <param name="local">A variable to receive a local.</param>
            <returns>The <see cref="T:FluentIL.Expressions.IInitialiser"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IInitialiser.LdLoc(FluentIL.ILocal)">
            <summary>
            Loads a local value onto the top of the evaluation stack.
            </summary>
            <param name="local">A reference to a local.</param>
            <returns>The <see cref="T:FluentIL.Expressions.IInitialiser"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IInitialiser.StLoc(FluentIL.ILocal)">
            <summary>
            Stores the value on the top of the evaluation stack in the local.
            </summary>
            <param name="local">A reference to a local.</param>
            <returns>The <see cref="T:FluentIL.Expressions.IInitialiser"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IInitialiser.LdcI4(System.Int32)">
            <summary>
            Loads an <see cref="T:System.Int32"/> value on the top of the evaluation stack.
            </summary>
            <param name="value">The value.</param>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IInitialiser.LdcI4_0">
            <summary>
            Loads the value 0 on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IInitialiser"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IInitialiser.LdcI4_1">
            <summary>
            Loads the value 1 on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IInitialiser"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IInitialiser.LdcI4_2">
            <summary>
            Loads the value 2 on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IInitialiser"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IInitialiser.LdcI4_3">
            <summary>
            Loads the value 3 on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IInitialiser"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IInitialiser.LdcI4_4">
            <summary>
            Loads the value 4 on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IInitialiser"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IInitialiser.LdcI4_5">
            <summary>
            Loads the value 5 on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IInitialiser"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IInitialiser.LdcI4_6">
            <summary>
            Loads the value 6 on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IInitialiser"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IInitialiser.LdcI4_7">
            <summary>
            Loads the value 7 on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IInitialiser"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IInitialiser.LdcI4_8">
            <summary>
            Loads the value 8 on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IInitialiser"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IInitialiser.LdcI4_M1">
            <summary>
            Loads the value minus one on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IInitialiser"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IInitialiser.LdcI8(System.Int32)">
            <summary>
            Loads an <see cref="T:System.Int64"/> value on the top of the evaluation stack.
            </summary>
            <param name="value">The value.</param>
            <returns>The <see cref="T:FluentIL.Expressions.IInitialiser"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IInitialiser.LdcR4(System.Single)">
            <summary>
            Loads an <see cref="T:System.Single"/> value on the top of the evaluation stack.
            </summary>
            <param name="value">The value.</param>
            <returns>The <see cref="T:FluentIL.Expressions.IInitialiser"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IInitialiser.LdcR8(System.Double)">
            <summary>
            Loads an <see cref="T:System.Double"/> value on the top of the evaluation stack.
            </summary>
            <param name="value">The value.</param>
            <returns>The <see cref="T:FluentIL.Expressions.IInitialiser"/> instance.</returns>
        </member>
        <member name="T:FluentIL.Expressions.IIterator">
            <summary>
            Defines the iterator interface.
            </summary>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.LdLoc(FluentIL.ILocal)">
            <summary>
            Loads a local value onto the top of the evaluation stack.
            </summary>
            <param name="local">A reference to a local.</param>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.LdLoc0">
            <summary>
            Loads the value from local at location 0 onto the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.LdLoc1">
            <summary>
            Loads the value from local at localtion 1 onto the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.LdLoc2">
            <summary>
            Loads the value from local at location 2 onto the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.LdLoc3">
            <summary>
            Loads the value from local at location 3 onto the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.StLoc(FluentIL.ILocal)">
            <summary>
            Stores the value on the top of the evaluation stack in the local.
            </summary>
            <param name="local">A reference to a local.</param>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.StLoc0">
            <summary>
            Stores the value on the top of the evaluation stack in location 0.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.StLoc1">
            <summary>
            Stores the value on the top of the evaluation stack in location 1.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.StLoc2">
            <summary>
            Stores the value on the top of the evaluation stack in location 2.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.StLoc3">
            <summary>
            Stores the value on the top of the evaluation stack in location 3.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.LdcI4(System.Int32)">
            <summary>
            Loads an <see cref="T:System.Int32"/> value on the top of the evaluation stack.
            </summary>
            <param name="value">The value.</param>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.LdcI4_0">
            <summary>
            Loads the value 0 on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.LdcI4_1">
            <summary>
            Loads the value 1 on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.LdcI4_2">
            <summary>
            Loads the value 2 on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.LdcI4_3">
            <summary>
            Loads the value 3 on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.LdcI4_4">
            <summary>
            Loads the value 4 on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.LdcI4_5">
            <summary>
            Loads the value 5 on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.LdcI4_6">
            <summary>
            Loads the value 6 on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.LdcI4_7">
            <summary>
            Loads the value 7 on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.LdcI4_8">
            <summary>
            Loads the value 8 on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.LdcI4_M1">
            <summary>
            Loads the value minus one on the top of the evaluation stack.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.LdcI8(System.Int32)">
            <summary>
            Loads an <see cref="T:System.Int64"/> value on the top of the evaluation stack.
            </summary>
            <param name="value">The value.</param>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.LdcR4(System.Single)">
            <summary>
            Loads an <see cref="T:System.Single"/> value on the top of the evaluation stack.
            </summary>
            <param name="value">The value.</param>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.LdcR8(System.Double)">
            <summary>
            Loads an <see cref="T:System.Double"/> value on the top of the evaluation stack.
            </summary>
            <param name="value">The value.</param>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.Add">
            <summary>
            Adds together the two values on the top of the evaluation stack and
            replaces them with the result.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.AddOvf">
            <summary>
            Adds together the two values on the top of the evaluation stack and
            replaces them with the result.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.AddOvfUn">
            <summary>
            Adds together the two values on the top of the evaluation stack and
            replaces them with the result.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.Sub">
            <summary>
            Subtracts the two values on the top of the evaluation stack and
            replaces them with the result.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.SubOvf">
            <summary>
            Subtracts the two values on the top of the evaluation stack and
            replaces them with the result.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.SubOvfUn">
            <summary>
            Subtracts the two values on the top of the evaluation stack and
            replaces them with the result.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.Div">
            <summary>
            Divides the two values on the top of the evaluation stack and
            replaces them with the result.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.DivUn">
            <summary>
            Divides the two values on the top of the evaluation stack and
            replaces them with the result.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.Mul">
            <summary>
            Multilies the two values on the top of the evaluation stack and
            replaces them with the result.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.MulUn">
            <summary>
            Multilies the two values on the top of the evaluation stack and
            replaces them with the result.
            </summary>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.Inc(FluentIL.ILocal)">
            <summary>
            Increments the contents of a local.
            </summary>
            <param name="local">The local to increment.</param>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.Expressions.IIterator.Dec(FluentIL.ILocal)">
            <summary>
            Decrements the contents of a local.
            </summary>
            <param name="local">The local to increment.</param>
            <returns>The <see cref="T:FluentIL.Expressions.IIterator"/> instance.</returns>
        </member>
        <member name="T:FluentIL.ConstructorBuilderExtensionMethods">
            <summary>
            <see cref="T:FluentIL.IConstructorBuilder"/> and <see cref="T:System.Reflection.Emit.ConstructorBuilder"/> extension methods.
            </summary>
        </member>
        <member name="M:FluentIL.ConstructorBuilderExtensionMethods.Public(FluentIL.IConstructorBuilder)">
            <summary>
            Adds the 'Public' attribute to the constructor.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IConstructorBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ConstructorBuilderExtensionMethods.Private(FluentIL.IConstructorBuilder)">
            <summary>
            Adds the 'Private' attribute to the constructor.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IConstructorBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ConstructorBuilderExtensionMethods.HideBySig(FluentIL.IConstructorBuilder)">
            <summary>
            Adds the 'HideBySig' attribute to the constructor.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IConstructorBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ConstructorBuilderExtensionMethods.Assembly(FluentIL.IConstructorBuilder)">
            <summary>
            Adds the 'Assembly' attribute to the constructor.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IConstructorBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ConstructorBuilderExtensionMethods.FamANDAssem(FluentIL.IConstructorBuilder)">
            <summary>
            Adds the 'FamANDAssembly' attribute to the constructor.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IConstructorBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ConstructorBuilderExtensionMethods.Family(FluentIL.IConstructorBuilder)">
            <summary>
            Adds the 'Family' attribute to the constructor.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IConstructorBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ConstructorBuilderExtensionMethods.FamORAssem(FluentIL.IConstructorBuilder)">
            <summary>
            Adds the 'FamORAssem' attribute to the constructor.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IConstructorBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ConstructorBuilderExtensionMethods.SpecialName(FluentIL.IConstructorBuilder)">
            <summary>
            Adds the 'SpecialName' attribute to the constructor.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IConstructorBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ConstructorBuilderExtensionMethods.RTSpecialName(FluentIL.IConstructorBuilder)">
            <summary>
            Adds the 'RTSpecialName' attribute to the constructor.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IConstructorBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ConstructorBuilderExtensionMethods.Static(FluentIL.IConstructorBuilder)">
            <summary>
            Defines the constructor as static.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IConstructorBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ConstructorBuilderExtensionMethods.Param``1(FluentIL.IConstructorBuilder,System.String)">
            <summary>
            Adds a parameter.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <param name="builder">A <see cref="T:FluentIL.IConstructorBuilder"/> instance.</param>
            <param name="parameterName">The parameter name.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ConstructorBuilderExtensionMethods.Body(System.Reflection.Emit.ConstructorBuilder)">
            <summary>
            Returns a <see cref="T:FluentIL.IEmitter"/> to define the constructors body.
            </summary>
            <param name="constructorBuilder">A <see cref="T:System.Reflection.Emit.ConstructorBuilder"/> instance.</param>
            <returns>An <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="T:FluentIL.DynamicMethodExtensionMethods">
            <summary>
            <see cref="T:FluentIL.IDynamicMethodBuilder"/> extension methods.
            </summary>
        </member>
        <member name="M:FluentIL.DynamicMethodExtensionMethods.Create(FluentIL.IDynamicMethodBuilder,System.Type)">
            <summary>
            Defines the method.
            </summary>
            <param name="dynamicMethodBuilder">The dynamic method builder.</param>
            <param name="delegateType">The delegates type.</param>
            <returns>The <see cref="T:System.Delegate"/> instance.</returns>
        </member>
        <member name="M:FluentIL.DynamicMethodExtensionMethods.CreateAction(FluentIL.IDynamicMethodBuilder)">
            <summary>
            Creates the action.
            </summary>
            <param name="dynamicMethodBuilder">The dynamic method builder.</param>
            <returns>The <see cref="T:System.Action"/> instance.</returns>
        </member>
        <member name="M:FluentIL.DynamicMethodExtensionMethods.CreateAction``1(FluentIL.IDynamicMethodBuilder)">
            <summary>
            Creates the action.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <param name="dynamicMethodBuilder">The dynamic method builder.</param>
            <returns>The <see cref="T:System.Action"/> instance.</returns>
        </member>
        <member name="M:FluentIL.DynamicMethodExtensionMethods.CreateAction``2(FluentIL.IDynamicMethodBuilder)">
            <summary>
            Creates the action.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <param name="dynamicMethodBuilder">The dynamic method builder.</param>
            <returns>The <see cref="T:System.Action"/> instance.</returns>
        </member>
        <member name="M:FluentIL.DynamicMethodExtensionMethods.CreateAction``3(FluentIL.IDynamicMethodBuilder)">
            <summary>
            Creates the action.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <param name="dynamicMethodBuilder">The dynamic method builder.</param>
            <returns>The <see cref="T:System.Action"/> instance.</returns>
        </member>
        <member name="M:FluentIL.DynamicMethodExtensionMethods.CreateFunc``1(FluentIL.IDynamicMethodBuilder)">
            <summary>
            Creates the function.
            </summary>
            <typeparam name="TReturn">The return type.</typeparam>
            <param name="dynamicMethodBuilder">The dynamic method builder.</param>
            <returns>The <see cref="T:System.Func`1"/> instance.</returns>
        </member>
        <member name="M:FluentIL.DynamicMethodExtensionMethods.CreateFunc``2(FluentIL.IDynamicMethodBuilder)">
            <summary>
            Creates the function.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <typeparam name="TReturn">The return type.</typeparam>
            <param name="dynamicMethodBuilder">The dynamic method builder.</param>
            <returns>The <see cref="T:System.Func`2"/> instance.</returns>
        </member>
        <member name="M:FluentIL.DynamicMethodExtensionMethods.CreateFunc``3(FluentIL.IDynamicMethodBuilder)">
            <summary>
            Creates the function.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="TReturn">The return type.</typeparam>
            <param name="dynamicMethodBuilder">The dynamic method builder.</param>
            <returns>The <see cref="T:System.Func`3"/> instance.</returns>
        </member>
        <member name="M:FluentIL.DynamicMethodExtensionMethods.CreateFunc``4(FluentIL.IDynamicMethodBuilder)">
            <summary>
            Creates the function.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="TReturn">The return type.</typeparam>
            <param name="dynamicMethodBuilder">The dynamic method builder.</param>
            <returns>The <see cref="T:System.Func`4"/> instance.</returns>
        </member>
        <member name="T:FluentIL.EmitterArithmeticExtensions">
            <summary>
            Arithmetic <see cref="T:FluentIL.IEmitter"/> extension methods.
            </summary>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.CkFinite(FluentIL.IEmitter)">
            <summary>
            Throws ArithmeticException if value is not a finite number.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.Neg(FluentIL.IEmitter)">
            <summary>
            Negates a value and pushes the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.Add(FluentIL.IEmitter)">
            <summary>
            Adds two values and pushes the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.Add(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal)">
            <summary>
            Adds two values and pushes the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first local value.</param>
            <param name="localValue2">The second local value.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.AddOvf(FluentIL.IEmitter)">
            <summary>
            Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.AddOvf(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal)">
            <summary>
            Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first local value.</param>
            <param name="localValue2">The second local value.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.AddOvfUn(FluentIL.IEmitter)">
            <summary>
            Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.AddOvfUn(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal)">
            <summary>
            Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first local value.</param>
            <param name="localValue2">The second local value.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.Sub(FluentIL.IEmitter)">
            <summary>
            Subtracts one value from another and pushes the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.Sub(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal)">
            <summary>
            Subtracts one value from another and pushes the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first local value.</param>
            <param name="localValue2">The second local value.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.SubOvf(FluentIL.IEmitter)">
            <summary>
            Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.SubOvf(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal)">
            <summary>
            Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first local value.</param>
            <param name="localValue2">The second local value.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.SubOvfUn(FluentIL.IEmitter)">
            <summary>
            Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.SubOvfUn(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal)">
            <summary>
            Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first local value.</param>
            <param name="localValue2">The second local value.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.Mul(FluentIL.IEmitter)">
            <summary>
            Multiplies two values and pushes the result on the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.Mul(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal)">
            <summary>
            Multiplies two values and pushes the result on the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first local value.</param>
            <param name="localValue2">The second local value.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.MulOvf(FluentIL.IEmitter)">
            <summary>
            Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.MulOvf(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal)">
            <summary>
            Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first local value.</param>
            <param name="localValue2">The second local value.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.MulOvfUn(FluentIL.IEmitter)">
            <summary>
            Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.MulOvfUn(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal)">
            <summary>
            Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first local value.</param>
            <param name="localValue2">The second local value.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.Div(FluentIL.IEmitter)">
            <summary>
            Divides two values and pushes the result as a floating-point (type F) or quotient (type int32) onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.Div(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal)">
            <summary>
            Divides two values and pushes the result as a floating-point (type F) or quotient (type int32) onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first local value.</param>
            <param name="localValue2">The second local value.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.DivUn(FluentIL.IEmitter)">
            <summary>
            Divides two unsigned integer values and pushes the result (int32) onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.DivUn(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal)">
            <summary>
            Divides two unsigned integer values and pushes the result (int32) onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first local value.</param>
            <param name="localValue2">The second local value.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.Rem(FluentIL.IEmitter)">
            <summary>
            Divides two values and pushes the remainder onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.Rem(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal)">
            <summary>
            Divides two values and pushes the remainder onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first local value.</param>
            <param name="localValue2">The second local value.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.RemUn(FluentIL.IEmitter)">
            <summary>
            Divides two unsigned values and pushes the remainder onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArithmeticExtensions.RemUn(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal)">
            <summary>
            Divides two unsigned values and pushes the remainder onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first local value.</param>
            <param name="localValue2">The second local value.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="T:FluentIL.EmitterArrayExtensions">
            <summary>
            Array helper/extension methods.
            </summary>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.NewArr``1(FluentIL.IEmitter)">
            <summary>
            Emits the <see cref="F:System.Reflection.Emit.OpCodes.Newarr"/> IL opcode.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.NewArr(FluentIL.IEmitter,System.Type)">
            <summary>
            Emits the <see cref="F:System.Reflection.Emit.OpCodes.Newarr"/> IL opcode.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="arrayType">The array type.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.NewArr``1(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emits the IL to create an array of a given length and type onto
            the top of the evaluation stack.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="length">The array length.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.NewArr(FluentIL.IEmitter,System.Type,System.Int32)">
            <summary>
            Emits the IL to create an array of a given length and type onto
            the top of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="arrayType">The array type.</param>
            <param name="length">The array length.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.NewArr``1(FluentIL.IEmitter,System.Int32,FluentIL.ILocal)">
            <summary>
            Emits the IL to create an array of a given length and type, and
            stores it in a given local.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="length">The array length.</param>
            <param name="localArray">The local to store the array in.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.NewArr(FluentIL.IEmitter,System.Type,System.Int32,FluentIL.ILocal)">
            <summary>
            Emits the IL to create an array of a given length and type, and
            stores it in a given local.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="arrayType">The array type.</param>
            <param name="length">The array length.</param>
            <param name="localArray">The local to store the array in.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdLen(FluentIL.IEmitter)">
            <summary>
            Emits IL to load the length of an array onto the top of the evaluation stack.
            The array is popped from top of the evaluation stack so must have been put
            there prior to making this call.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdLen(FluentIL.IEmitter,FluentIL.ILocal)">
            <summary>
            Emits IL to load the length of an array onto the tp of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localArray">A local containing an array.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdArrayElem``1(FluentIL.IEmitter)">
            <summary>
            Emits the <see cref="F:System.Reflection.Emit.OpCodes.Ldelem"/> opcode.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdArrayElem(FluentIL.IEmitter,System.Type)">
            <summary>
            Emits the <see cref="F:System.Reflection.Emit.OpCodes.Ldelem"/> opcode.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="elementType">The element type.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdArrayElem``1(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emits the IL to load and array element onto the top of the evalation stack.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The index of the array element to load.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdArrayElem(FluentIL.IEmitter,System.Type,System.Int32)">
            <summary>
            Emits the IL to load and array element onto the top of the evalation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="elementType">The element type.</param>
            <param name="index">The index of the array element to load.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdArrayElem(FluentIL.IEmitter,FluentIL.ILocal,System.Int32)">
            <summary>
            Emits the IL to load an array element of a given array onto the top of the evalation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localArray">A local containing an array.</param>
            <param name="index">The index of the array element to load.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemI(FluentIL.IEmitter)">
            <summary>
            Emits the IL to load a array element of type <b>native int</b> onto the top
            of the evaluation stack as a <b>native int</b>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemI(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emits the IL to load a array element of type <b>native int</b> onto the top
            of the evaluation stack as a <b>native int</b>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemI1(FluentIL.IEmitter)">
            <summary>
            Emits the IL to load a array element of type <see cref="T:System.Byte"/> onto the top
            of the evaluation stack as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemI1(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emits the IL to load a array element of type <see cref="T:System.Byte"/> onto the top
            of the evaluation stack as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemI2(FluentIL.IEmitter)">
            <summary>
            Emits the IL to load a array element of type <see cref="T:System.Int16"/> onto the top
            of the evaluation stack as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemI2(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emits the IL to load a array element of type <see cref="T:System.Int16"/> onto the top
            of the evaluation stack as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemI4(FluentIL.IEmitter)">
            <summary>
            Emits the IL to load a array element of type <see cref="T:System.Int32"/> onto the top
            of the evaluation stack as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemI4(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emits the IL to load a array element of type <see cref="T:System.Int32"/> onto the top
            of the evaluation stack as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemI8(FluentIL.IEmitter)">
            <summary>
            Emits the IL to load a array element of type <see cref="T:System.Int64"/> onto the top
            of the evaluation stack as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemI8(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emits the IL to load a array element of type <see cref="T:System.Int64"/> onto the top
            of the evaluation stack as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemR4(FluentIL.IEmitter)">
            <summary>
            Emits the IL to load a array element of type <see cref="T:System.Single"/> onto the top
            of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemR4(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emits the IL to load a array element of type <see cref="T:System.Single"/> onto the top
            of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemR8(FluentIL.IEmitter)">
            <summary>
            Emits the IL to load a array element of type <see cref="T:System.Double"/> onto the top
            of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemR8(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emits the IL to load a array element of type <see cref="T:System.Double"/> onto the top
            of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemRef(FluentIL.IEmitter)">
            <summary>
            Emits the IL to load a array element containing an object reference onto the top
            of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemRef(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emits the IL to load a array element containing an object reference onto the top
            of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemU1(FluentIL.IEmitter)">
            <summary>
            Emits the IL to load a array element of type <b>unsigned int8</b> onto the top
            of the evaluation stack as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemU1(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emits the IL to load a array element of type <b>unsigned int8</b> onto the top
            of the evaluation stack as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemU2(FluentIL.IEmitter)">
            <summary>
            Emits the IL to load a array element of type <see cref="T:System.UInt16"/> onto the top
            of the evaluation stack as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemU2(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emits the IL to load a array element of type <see cref="T:System.UInt16"/> onto the top
            of the evaluation stack as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemU4(FluentIL.IEmitter)">
            <summary>
            Emits the IL to load a array element of type <see cref="T:System.UInt32"/> onto the top
            of the evaluation stack as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemU4(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emits the IL to load a array element of type <see cref="T:System.UInt32"/> onto the top
            of the evaluation stack as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemAddr(FluentIL.IEmitter)">
            <summary>
            Emits the IL to load the address of a given array element onto the top
            of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.LdElemAddr(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emits the IL to load the address of a given array element onto the top
            of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElem``1(FluentIL.IEmitter)">
            <summary>
            Emits the IL to replace the array element at a given index with the value on the top
            of the evaluation stack.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElem(FluentIL.IEmitter,System.Type)">
            <summary>
            Emits the IL to replace the array element at a given index with the value on the top
            of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="elementType">The elements type.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElem(FluentIL.IEmitter,System.Type,System.Int32,FluentIL.ILocal)">
            <summary>
            Emits the IL to replace the array element at a given index of the array on the top of the
            evaluation stack with a value in a local.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="elementType">The elements type.</param>
            <param name="index">The element index.</param>
            <param name="localValue">A local conatng the value to store.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElem(FluentIL.IEmitter,FluentIL.ILocal,System.Int32,FluentIL.ILocal)">
            <summary>
            Emits the IL to replace the array element at a given index of a given array with the
            value in a local.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localArray">A local contaning an array.</param>
            <param name="index">The element index.</param>
            <param name="localValue">A local conatng the value to store.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemI(FluentIL.IEmitter)">
            <summary>
            Emit IL to set an array element.
            The array, index, and value must have previously been pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemI(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emit IL to set an array element to a given value.
            The array and index must have previously been pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="value">A value to store.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemI(FluentIL.IEmitter,System.Int32,System.Int32)">
            <summary>
            Emit IL to set an array element to a given value.
            The array must have previously been pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The element index.</param>
            <param name="value">A value to store.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemI(FluentIL.IEmitter,FluentIL.ILocal,System.Int32,System.Int32)">
            <summary>
            Emit IL to set an array element to a given value.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localArray">A local containing an array.</param>
            <param name="index">The array element index.</param>
            <param name="value">The value to set.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemI1(FluentIL.IEmitter)">
            <summary>
            Emit IL to set an array element.
            The array, index, and value must have previously been pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemI1(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emit IL to set an array element to a given value.
            The array must have previously been pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemI1(FluentIL.IEmitter,FluentIL.ILocal,System.Int32)">
            <summary>
            Emit IL to set an array element to a given value.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localArray">A local containing an array.</param>
            <param name="index">The array element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemI2(FluentIL.IEmitter)">
            <summary>
            Emit IL to set an array element.
            The array, index, and value must have previously been pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemI2(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emit IL to set an array element to a given value.
            The array must have previously been pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemI2(FluentIL.IEmitter,FluentIL.ILocal,System.Int32)">
            <summary>
            Emit IL to set an array element to a given value.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localArray">A local containing an array.</param>
            <param name="index">The array element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemI4(FluentIL.IEmitter)">
            <summary>
            Emit IL to set an array element.
            The array, index, and value must have previously been pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemI4(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emit IL to set an array element to a given value.
            The array must have previously been pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The array element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemI4(FluentIL.IEmitter,FluentIL.ILocal,System.Int32)">
            <summary>
            Emit IL to set an array element to a given value.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localArray">A local containing an array.</param>
            <param name="index">The array element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemI8(FluentIL.IEmitter)">
            <summary>
            Emit IL to set an array element.
            The array, index, and value must have previously been pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemI8(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emit IL to set an array element to a given value.
            The array must have previously been pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The array element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemI8(FluentIL.IEmitter,FluentIL.ILocal,System.Int32)">
            <summary>
            Emit IL to set an array element to a given value.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localArray">A local containing an array.</param>
            <param name="index">The array element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemR4(FluentIL.IEmitter)">
            <summary>
            Emit IL to set an array element.
            The array, index, and value must have previously been pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemR4(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emit IL to set an array element to a given value.
            The array must have previously been pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The array element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemR4(FluentIL.IEmitter,FluentIL.ILocal,System.Int32)">
            <summary>
            Emit IL to set an array element to a given value.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localArray">A local containing an array.</param>
            <param name="index">The array element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemR8(FluentIL.IEmitter)">
            <summary>
            Emit IL to set an array element.
            The array, index, and value must have previously been pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemR8(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emit IL to set an array element to a given value.
            The array must have previously been pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The array element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemR8(FluentIL.IEmitter,FluentIL.ILocal,System.Int32)">
            <summary>
            Emit IL to set an array element to a given value.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localArray">A local containing an array.</param>
            <param name="index">The array element index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.StElemRef(FluentIL.IEmitter)">
            <summary>
            Replaces the array element at a given index with the object ref value (type O) on the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.Array(FluentIL.IEmitter,FluentIL.ILocal,System.Int32,System.Action{System.Int32})">
            <summary>
            Emits the IL to allocate and fill an array.
            </summary>
            <param name="emitter">The <see cref="T:FluentIL.IEmitter"/> to use.</param>
            <param name="localArray">The local to store the array in.</param>
            <param name="length">The size of the array.</param>
            <param name="action">The action to execute for each index in the array.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.Array(FluentIL.IEmitter,System.Type,FluentIL.ILocal,System.Int32,System.Action{System.Int32})">
            <summary>
            Emits the IL to allocate and fill an array.
            </summary>
            <param name="emitter">The <see cref="T:FluentIL.IEmitter"/> to use.</param>
            <param name="arrayType">The <see cref="T:System.Type"/> to array to emit.</param>
            <param name="localArray">The local to store the array in.</param>
            <param name="length">The size of the array.</param>
            <param name="action">The action to execute for each index in the array.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.TypeArray(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal[])">
            <summary>
            Emits the IL to allocate and fill an array.
            </summary>
            <param name="emitter">The <see cref="T:FluentIL.IEmitter"/> to use.</param>
            <param name="localArray">The local to store the array in.</param>
            <param name="localTypes">The local variables to add to the array.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterArrayExtensions.TypeArray(FluentIL.IEmitter,FluentIL.ILocal,System.Type[])">
            <summary>
            Emits the IL to allocate and fill an array.
            </summary>
            <param name="emitter">The <see cref="T:FluentIL.IEmitter"/> to use.</param>
            <param name="localArray">The local to store the array in.</param>
            <param name="types">The types to add to the array.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="T:FluentIL.EmitterCompareAndBranchExtensions">
            <summary>
            Branch and compare <see cref="T:FluentIL.IEmitter"/> extension methods.
            </summary>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.Br(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Unconditionally transfers control to a target instruction.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BrS(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Unconditionally transfers control to a target instruction.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.Beq(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the two values on the top of the evaluation stack are equal.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.Beq(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if two values are equal.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BeqS(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if two values on the top of the evaluation stack are equal (Short form).
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BeqS(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if two values are equal (Short form).
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.Bgt(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value on the evaluation stack is greater than the second value on the evaluaton stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.Bgt(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is greater than the second value.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BgtS(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value on the evaluation stack is greater than the second value on the evaluaton stack (Short form).
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BgtS(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is greater than the second value (Short form).
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BgtUn(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BgtUn(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BgtUnS(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BgtUnS(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.Bge(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value on the evaluation stack is greater than or equal to the second value on the evaluaton stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.Bge(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is greater than or equal to the second value.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BgeS(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value on the evaluation stack is greater than or equal to the second value on the evaluaton stack (Short form).
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BgeS(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is greater than or equal to the second value (Short form).
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BgeUn(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BgeUn(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BgeUnS(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BgeUnS(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.Blt(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value on the evaluation stack is less than the second value on the evaluaton stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.Blt(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is less than the second value.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BltS(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value on the evaluation stack is less than the second value on the evaluaton stack (Short form).
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BltS(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is less than the second value (Short form).
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BltUn(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BltUn(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BltUnS(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BltUnS(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.Ble(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value on the evaluation stack is less than or equal to the second value on the evaluaton stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.Ble(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is less than or equal to the second value.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BleS(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value on the evaluation stack is less than or equal to the second value on the evaluaton stack (Short form).
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BleS(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is less than or equal to the second value (Short form).
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BleUn(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value on the evaluation stack is less than or equal to the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BleUn(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is less than or equal to the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BleUnS(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value on the evaluation stack is less than or equal to the second value,
            when comparing unsigned integer values or unordered float values (Short form).
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BleUnS(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction if the first value is less than or equal to the second value,
            when comparing unsigned integer values or unordered float values (Short form).
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BneUn(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BneUn(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BneUnS(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BneUnS(FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal,FluentIL.ILabel)">
            <summary>
            Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localValue1">The first value.</param>
            <param name="localValue2">The second value.</param>
            <param name="target">The target instruction.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BrTrue(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Branches if the value on the top of the evaluation stack is true.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target label to jump to.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BrTrueS(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Branches if the value on the top of the evaluation stack is true.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target label to jump to.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BrFalse(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Branches if the value on the top of the evaluation stack is false.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target label to jump to.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.BrFalseS(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Branches if the value on the top of the evaluation stack is false.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The target label to jump to.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.Ceq(FluentIL.IEmitter)">
            <summary>
            Compares two values. If they are equal, the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.Cgt(FluentIL.IEmitter)">
            <summary>
            Compares two values. If the first value is greater than the second, the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.CgtUn(FluentIL.IEmitter)">
            <summary>
            Compares two unsigned or unordered values. If the first value is greater than the second, the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.Clt(FluentIL.IEmitter)">
            <summary>
            Compares two values. If the first value is less than the second, the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterCompareAndBranchExtensions.CltUn(FluentIL.IEmitter)">
            <summary>
            Compares the unsigned or unordered values value1 and value2. If value1 is less than value2, then the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="T:FluentIL.EmitterConvExtensions">
            <summary>
            Conversion <see cref="T:FluentIL.IEmitter"/> extension methods.
            </summary>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvI(FluentIL.IEmitter)">
            <summary>
            Converts the value on the top of the evaluation stack to a native int.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvI1(FluentIL.IEmitter)">
            <summary>
            Converts the value on the top of the evaluation stack to int8 then pads it to int32.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvI2(FluentIL.IEmitter)">
            <summary>
            Converts the value on the top of the evaluation stack to int16 then pads it to int32.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvI4(FluentIL.IEmitter)">
            <summary>
            Converts the value on the top of the evaluation stack to int32.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvI8(FluentIL.IEmitter)">
            <summary>
            Converts the value on the top of the evaluation stack to int64.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvOvfI(FluentIL.IEmitter)">
            <summary>
            Converts the signed value on top of the evaluation stack to signed native int, throwing OverflowException on overflow.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvOvfI1(FluentIL.IEmitter)">
            <summary>
            Converts the signed value on top of the evaluation stack to signed int8 and extends it to int32, throwing OverflowException on overflow.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvOvfI2(FluentIL.IEmitter)">
            <summary>
            Converts the signed value on top of the evaluation stack to signed int16 and extending it to int32, throwing OverflowException on overflow.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvOvfI4(FluentIL.IEmitter)">
            <summary>
            Converts the signed value on top of the evaluation stack to signed int32, throwing OverflowException on overflow.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvOvfI8(FluentIL.IEmitter)">
            <summary>
            Converts the signed value on top of the evaluation stack to signed int64, throwing OverflowException on overflow.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvOvfIUn(FluentIL.IEmitter)">
            <summary>
            Converts the unsigned value on top of the evaluation stack to signed native int, throwing OverflowException on overflow.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvOvfI1Un(FluentIL.IEmitter)">
            <summary>
            Converts the unsigned value on top of the evaluation stack to signed int8 and extends it to int32, throwing OverflowException on overflow.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvOvfI2Un(FluentIL.IEmitter)">
            <summary>
            Converts the unsigned value on top of the evaluation stack to signed int16 and extending it to int32, throwing OverflowException on overflow.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvOvfI4Un(FluentIL.IEmitter)">
            <summary>
            Converts the unsigned value on top of the evaluation stack to signed int32, throwing OverflowException on overflow.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvOvfI8Un(FluentIL.IEmitter)">
            <summary>
            Converts the unsigned value on top of the evaluation stack to signed int64, throwing OverflowException on overflow.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvRUn(FluentIL.IEmitter)">
            <summary>
            Converts the unsigned integer value on top of the evaluation stack to float32.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvR4(FluentIL.IEmitter)">
            <summary>
            Converts the value on top of the evaluation stack to float32.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvR8(FluentIL.IEmitter)">
            <summary>
            Converts the value on top of the evaluation stack to float64.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvU(FluentIL.IEmitter)">
            <summary>
            Converts the value on top of the evaluation stack to unsigned native int, and extends it to native int.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvU1(FluentIL.IEmitter)">
            <summary>
            Converts the value on top of the evaluation stack to unsigned int8, and extends it to int32.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvU2(FluentIL.IEmitter)">
            <summary>
            Converts the value on top of the evaluation stack to unsigned int16, and extends it to int32.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvU4(FluentIL.IEmitter)">
            <summary>
            Converts the value on top of the evaluation stack to unsigned int32, and extends it to int32.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.ConvU8(FluentIL.IEmitter)">
            <summary>
            Converts the value on top of the evaluation stack to unsigned int64, and extends it to int64.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.Conv(FluentIL.IEmitter,System.Type,System.Type,System.Boolean)">
            <summary>
            Emits IL to convert one type to another.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="sourceType">The source type.</param>
            <param name="targetType">The destination type.</param>
            <param name="isAddress">A value indicating whether or not the convert is for an address.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterConvExtensions.EmitConv(FluentIL.IEmitter,System.Type)">
            <summary>
            Emits IL to convert a type.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="type">The type.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="T:FluentIL.EmitterExtensions">
            <summary>
            Various <see cref="T:FluentIL.IEmitter"/> extension methods.
            </summary>
        </member>
        <member name="F:FluentIL.EmitterExtensions.DisposeMethodInfo">
            <summary>
            The <see cref="T:System.Reflection.MethodInfo"/> for the <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
        </member>
        <member name="F:FluentIL.EmitterExtensions.TypeGetTypeFromHandle">
            <summary>
            The <see cref="T:System.Reflection.MethodInfo"/> for the <see cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)"/> method.
            </summary>
        </member>
        <member name="F:FluentIL.EmitterExtensions.TypeFactoryGetType">
            <summary>
            The <see cref="T:System.Reflection.MethodInfo"/> for the <see cref="M:FluentIL.TypeFactory.GetType(System.String,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="F:FluentIL.EmitterExtensions.MethodBaseGetMethodFromHandle">
            <summary>
            The <see cref="T:System.Reflection.MethodInfo"/> for the <see cref="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)"/> method.
            </summary>
        </member>
        <member name="F:FluentIL.EmitterExtensions.MethodBaseGetMethodFromHandleGeneric">
            <summary>
            The <see cref="T:System.Reflection.MethodInfo"/> for the <see cref="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)"/> method.
            </summary>
        </member>
        <member name="F:FluentIL.EmitterExtensions.ObjectGetType">
            <summary>
            A <see cref="T:System.Reflection.MethodInfo"/> for the <see cref="M:System.Object.GetType"/> method.
            </summary>
        </member>
        <member name="F:FluentIL.EmitterExtensions.TypeGetType">
            <summary>
            A <see cref="T:System.Reflection.MethodInfo"/> for the <see cref="M:System.Type.GetType(System.String,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="F:FluentIL.EmitterExtensions.TypeIsAssignableFrom">
            <summary>
            A <see cref="T:System.Reflection.MethodInfo"/> for the 'IsAssignableFrom' method.
            </summary>
        </member>
        <member name="M:FluentIL.EmitterExtensions.WriteLineLoc(FluentIL.IEmitter,FluentIL.ILocal)">
            <summary>
            Writes a local to standard output.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="local">The local to write out.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Newobj(FluentIL.IEmitter,System.Reflection.ConstructorInfo)">
            <summary>
            Emits a <see cref="F:System.Reflection.Emit.OpCodes.Newobj"/>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="ctor">A constructor.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Newobj(FluentIL.IEmitter,FluentIL.IConstructorBuilder)">
            <summary>
            Emits a <see cref="F:System.Reflection.Emit.OpCodes.Newobj"/>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="ctorBuilder">A constructor builder.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Nop(FluentIL.IEmitter)">
            <summary>
            Emits a <see cref="F:System.Reflection.Emit.OpCodes.Nop"/>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Dup(FluentIL.IEmitter)">
            <summary>
            Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Not(FluentIL.IEmitter)">
            <summary>
            Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.And(FluentIL.IEmitter)">
            <summary>
            Computes the bitwise AND of two values and pushes the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Or(FluentIL.IEmitter)">
            <summary>
            Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Xor(FluentIL.IEmitter)">
            <summary>
            Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Pop(FluentIL.IEmitter)">
            <summary>
            Removes the value currently on top of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Ret(FluentIL.IEmitter)">
            <summary>
            Emits a <see cref="F:System.Reflection.Emit.OpCodes.Ret"/>.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.SizeOf(FluentIL.IEmitter,System.Type)">
            <summary>
            Pushes the size, in bytes, of a supplied value type onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="valueType">The values type.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Break(FluentIL.IEmitter)">
            <summary>
            Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.CastClass``1(FluentIL.IEmitter)">
            <summary>
            Attempts to cast an object passed by reference to the specified class.
            </summary>
            <typeparam name="T">The type to cast to.</typeparam>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.CastClass(FluentIL.IEmitter,FluentIL.IGenericParameterBuilder)">
            <summary>
            Attempts to cast an object passed by reference to the specified class.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="genericParameter">The generic type to cast to.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.CastClass(FluentIL.IEmitter,System.Type)">
            <summary>
            Attempts to cast an object passed by reference to the specified class.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="castToType">The <see cref="T:System.Type"/> to cast to.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Constrained``1(FluentIL.IEmitter)">
            <summary>
            Constrains the type on which a virtual method call is made.
            </summary>
            <typeparam name="T">The type to constrain to.</typeparam>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Constrained(FluentIL.IEmitter,System.Type)">
            <summary>
            Constrains the type on which a virtual method call is made.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="constrainedType">The <see cref="T:System.Type"/> to cast to.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Switch(FluentIL.IEmitter,FluentIL.ILabel[])">
            <summary>
            Implements a jump table.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="labels">An arrsay of labels.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.TailCall(FluentIL.IEmitter)">
            <summary>
            Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Unaligned(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following ldind, stind, ldfld,
            stfld, ldobj, stobj, initblk, or cpblk instruction.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="label">A label.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Unaligned(FluentIL.IEmitter,System.Byte)">
            <summary>
            Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following ldind, stind, ldfld,
            stfld, ldobj, stobj, initblk, or cpblk instruction.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="alignment">The byte alignment.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.LocalAlloc(FluentIL.IEmitter)">
            <summary>
            Emits IL to allocate a block of memory on the stack and push the pointer onto the evaluation stack.
            The size of memory block to be allocated is determined by the value on the top of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Box``1(FluentIL.IEmitter)">
            <summary>
            Converts a value type to an object reference (type O).
            </summary>
            <typeparam name="T">The type to box.</typeparam>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Box(FluentIL.IEmitter,System.Type)">
            <summary>
            Converts a value type to an object reference (type O).
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="valueType">A value type.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Box(FluentIL.IEmitter,System.Type,FluentIL.ILocal)">
            <summary>
            Converts a value type to an object reference (type O).
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="refType">A reference type.</param>
            <param name="localValue">A local containing a value type.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Unbox``1(FluentIL.IEmitter)">
            <summary>
            Converts the boxed representation of a value type to its unboxed form.
            </summary>
            <typeparam name="T">The type to unbox.</typeparam>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Unbox(FluentIL.IEmitter,System.Type)">
            <summary>
            Converts the boxed representation of a value type to its unboxed form.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="valueType">A reference type.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.UnboxAny``1(FluentIL.IEmitter)">
            <summary>
            Converts the boxed representation of a type specified in the instruction to its unboxed form.
            </summary>
            <typeparam name="T">The type to unbox.</typeparam>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.UnboxAny(FluentIL.IEmitter,System.Type)">
            <summary>
            Converts the boxed representation of a type specified in the instruction to its unboxed form.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="valueType">A value type.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.MkRefAny(FluentIL.IEmitter,System.Type)">
            <summary>
            Pushes a typed reference to an instance of a specific type onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="refType">A reference type.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.LocalAlloc(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emits IL to allocate a block of memory on the stack and push the pointer onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="length">A value indicating the size of the memory block.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.InitBlk(FluentIL.IEmitter)">
            <summary>
            Initializes a specified block of memory at a specific address to a given size and initial value.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.InitObj``1(FluentIL.IEmitter)">
            <summary>
            Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.InitObj(FluentIL.IEmitter,FluentIL.IGenericParameterBuilder)">
            <summary>
            Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="genericParameter">A generic type.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.InitObj(FluentIL.IEmitter,System.Type)">
            <summary>
            Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="valueType">A value type.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.IsInst(FluentIL.IEmitter,System.Type)">
            <summary>
            Tests whether an object reference (type O) is an instance of a particular class.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="type">A type.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.ArgList(FluentIL.IEmitter)">
            <summary>
            Returns an unmanaged pointer to the argmument list of the current method.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Leave(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Exits a protected region of code, unconditionally transferring control to a specific target instruction.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The label to jump to.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.LeaveS(FluentIL.IEmitter,FluentIL.ILabel)">
            <summary>
            Exits a protected region of code, unconditionally transferring control to a target instruction (short form).
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="target">The label to jump to.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.LdFunc(FluentIL.IEmitter,System.Reflection.MethodInfo)">
            <summary>
            Emits IL to load the address of an objects method (type native int) onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="methodInfo">The method to load the address of.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.LdFunc(FluentIL.IEmitter,FluentIL.IMethodBuilder)">
            <summary>
            Emits IL to load the address of an objects method (type native int) onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="methodBuilder">The method to load the address of.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.LdVirtFunc(FluentIL.IEmitter,System.Reflection.MethodInfo)">
            <summary>
            Emits IL to load the address of an objects virtual method (type native int) onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="methodInfo">The method to load the address of.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.LdVirtFunc(FluentIL.IEmitter,FluentIL.IMethodBuilder)">
            <summary>
            Emits IL to load the address of an objects virtual method (type native int) onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="methodBuilder">The method to load the address of.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Jmp(FluentIL.IEmitter,System.Reflection.MethodInfo)">
            <summary>
            Exits current method and jumps to specified method.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="methodInfo">The method to jump to.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Call(FluentIL.IEmitter,System.Func{System.Reflection.MethodInfo})">
            <summary>
            Emits the IL to call a method.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="action">The method to call.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Call(FluentIL.IEmitter,System.Reflection.MethodInfo)">
            <summary>
            Emits the IL to call a method.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="method">The method to call.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Call(FluentIL.IEmitter,FluentIL.IMethodBuilder)">
            <summary>
            Emits to call a method.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="method">The method to call.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Call``1(FluentIL.IEmitter,System.String,System.Type[])">
            <summary>
            Emits the IL to call a method.
            </summary>
            <typeparam name="T">The type to call.</typeparam>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="methodName">The method to call.</param>
            <param name="argumentTypes">Optional method argument types.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Call(FluentIL.IEmitter,System.Type,System.String,System.Type[])">
            <summary>
            Emits the IL to call a method.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="type">The type that implements the method to call.</param>
            <param name="methodName">The name of the method to call.</param>
            <param name="argumentTypes">Optional method argument types.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Call(FluentIL.IEmitter,System.Type,System.String,System.Collections.Generic.IEnumerable{FluentIL.IGenericParameterBuilder},System.Type[])">
            <summary>
            Emits the IL to call a method.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="type">The type that implements the method to call.</param>
            <param name="methodName">The method to call.</param>
            <param name="genArgs">Generic argument types.</param>
            <param name="argumentTypes">Optional method argument types.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Call(FluentIL.IEmitter,FluentIL.IMethodBuilder,FluentIL.ILocal[])">
            <summary>
            Emits a <see cref="F:System.Reflection.Emit.OpCodes.Call"/> to a method.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="method">The method to call.</param>
            <param name="locals">Method parameters as local variables.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Call(FluentIL.IEmitter,System.Reflection.MethodInfo,FluentIL.ILocal[])">
            <summary>
            Emits a <see cref="F:System.Reflection.Emit.OpCodes.Call"/> to a method.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="method">The method to call.</param>
            <param name="locals">Method parameters as local variables.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Call(FluentIL.IEmitter,System.Type,FluentIL.IGenericParameterBuilder[],System.String,System.Type[])">
            <summary>
            Emits a <see cref="F:System.Reflection.Emit.OpCodes.Call"/> to a method.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="genericTypeDefinition">A generic type definition.</param>
            <param name="genericTypeArgs">A list of generic type arguments.</param>
            <param name="methodName">The name of the method.</param>
            <param name="argumentTypes">A list of argument types.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Call(FluentIL.IEmitter,FluentIL.IConstructorBuilder)">
            <summary>
            Emits the IL to call a constructor.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="ctor">The constructor to call.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Call(FluentIL.IEmitter,System.Reflection.ConstructorInfo)">
            <summary>
            Emits the IL to call a constructor.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="ctor">The constructor to call.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Call(FluentIL.IEmitter,FluentIL.IConstructorBuilder,FluentIL.ILocal[])">
            <summary>
            Emits the IL to call a constructor.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="ctor">The constructor to call.</param>
            <param name="locals">The constructors parameters as local variables.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Call(FluentIL.IEmitter,System.Reflection.ConstructorInfo,FluentIL.ILocal[])">
            <summary>
            Emits the IL to call a constructor.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="ctor">The constructor to call.</param>
            <param name="locals">The constructors parameters as local variables.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Calli(FluentIL.IEmitter,FluentIL.IMethodBuilder)">
            <summary>
            Emits a <see cref="F:System.Reflection.Emit.OpCodes.Calli"/> to a method.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="method">The method to call.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Calli(FluentIL.IEmitter,System.Reflection.MethodInfo)">
            <summary>
            Emits a <see cref="F:System.Reflection.Emit.OpCodes.Calli"/> to a method.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="method">The method to call.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.CallVirt(FluentIL.IEmitter,FluentIL.IMethodBuilder)">
            <summary>
            Emits a <see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/> to a method.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="method">The method to call.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.CallVirt(FluentIL.IEmitter,System.Reflection.MethodInfo)">
            <summary>
            Emits a <see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/> to a method.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/> of the method to call.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Inc(FluentIL.IEmitter,FluentIL.ILocal)">
            <summary>
            Emits the IL to increment the contents of a local by one.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="local">The local to increment.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Dec(FluentIL.IEmitter,FluentIL.ILocal)">
            <summary>
            Emits the IL to decrement the contents of a local by one.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="local">The local to increment.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.EmitTypeOf``1(FluentIL.IEmitter)">
            <summary>
            Perform a 'typeof()' style operation.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to emit the 'typeof()' for.</typeparam>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.EmitTypeOf(FluentIL.IEmitter,System.Type)">
            <summary>
            Perform a 'typeof()' style operation.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="type">The <see cref="T:System.Type"/> to emit the 'typeof()' for.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.EmitIsAssignableFrom``1(FluentIL.IEmitter,FluentIL.ILocal)">
            <summary>
            Emits the IL to perform an 'IsAssignableFrom' operation.
            </summary>
            <typeparam name="T">The type..</typeparam>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="local">A <see cref="T:System.Reflection.Emit.LocalBuilder"/> to check.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.EmitIsAssignableFrom(FluentIL.IEmitter,System.Type,FluentIL.ILocal)">
            <summary>
            Emits the IL to perform an 'IsAssignableFrom' operation.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="from">The <see cref="T:System.Type"/> to check is assignable from.</param>
            <param name="local">A <see cref="T:System.Reflection.Emit.LocalBuilder"/> to check.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.EmitIsAssignableFrom(FluentIL.IEmitter,System.Type,System.Type)">
            <summary>
            Emits the IL to perform an 'IsAssignableFrom' operation.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="from">The <see cref="T:System.Type"/> to check is assignable from.</param>
            <param name="to">A <see cref="T:System.Type"/> to check.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.EmitMethod(FluentIL.IEmitter,System.Reflection.MethodInfo)">
            <summary>
            Emit IL to get method.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/>.</param>
            <returns>The <see cref="T:System.Reflection.Emit.ILGenerator"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.EmitMethod(FluentIL.IEmitter,System.Reflection.MethodInfo,System.Type)">
            <summary>
            Emit IL to get method.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/>.</param>
            <param name="declaringType">The methods decalring type.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Using(FluentIL.IEmitter,FluentIL.ILocal,System.Action)">
            <summary>
            Emits IL for 'using' pattern.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="disposableObj">The disposable object.</param>
            <param name="generateBlock">The code block inside the using block.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.StringFormat(FluentIL.IEmitter,System.String,FluentIL.ILocal[])">
            <summary>
            Emits IL to call the static Format method on the <see cref="T:System.String"/> object.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="format">The format to use.</param>
            <param name="locals">An array of <see cref="T:System.Reflection.Emit.LocalBuilder"/> to use.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.For(FluentIL.IEmitter,FluentIL.ILocal,System.Action{FluentIL.ILocal})">
            <summary>
            Emits IL to perform a for loop over an array without element loading.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <param name="localLength">The local variable holding the length.</param>
            <param name="action">An action to allow the injecting of the loop code.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.For(FluentIL.IEmitter,FluentIL.ILocal,System.Action{FluentIL.IEmitter,FluentIL.ILocal})">
            <summary>
            Emits IL to perform a for loop over an array without element loading.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <param name="localLength">The local variable holding the length.</param>
            <param name="action">An action to allow the injecting of the loop code.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.For(FluentIL.IEmitter,FluentIL.ILocal,System.Action{FluentIL.ILocal,FluentIL.ILocal})">
            <summary>
            Emits IL to perform a for loop over an array with element loading.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <param name="localArray">The local variable holding the array.</param>
            <param name="action">An action to allow the injecting of the loop code.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.For(FluentIL.IEmitter,FluentIL.ILocal,System.Action{FluentIL.IEmitter,FluentIL.ILocal,FluentIL.ILocal})">
            <summary>
            Emits IL to perform a for loop over an array with element loading.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <param name="localArray">The local variable holding the array.</param>
            <param name="action">An action to allow the injecting of the loop code.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.ForEach(FluentIL.IEmitter,FluentIL.ILocal,System.Action{FluentIL.ILocal})">
            <summary>
            Emits IL to perform a for loop over an array.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localEnumerable">The local variable holding the enumerable object.</param>
            <param name="action">An action to allow the injecting of the loop code.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.ForEach(FluentIL.IEmitter,FluentIL.ILocal,System.Action{FluentIL.IEmitter,FluentIL.ILocal})">
            <summary>
            Emits IL to perform a for loop over an array.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localEnumerable">The local variable holding the enumerable object.</param>
            <param name="action">An action to allow the injecting of the loop code.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.ForEach(FluentIL.IEmitter,FluentIL.ILocal,System.Action{FluentIL.ILocal,System.Action})">
            <summary>
            Emits IL to perform a for loop over an enumerable object.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localEnumerable">The local variable holding the enumerable object.</param>
            <param name="action">An action to allow the injecting of the loop code.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.ForEach(FluentIL.IEmitter,FluentIL.ILocal,System.Action{FluentIL.IEmitter,FluentIL.ILocal,System.Action})">
            <summary>
            Emits IL to perform a for loop over an enumerable object.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="localEnumerable">The local variable holding the enumerable instance`.</param>
            <param name="action">An action to allow the injecting of the loop code.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.DeclareLocal``1(FluentIL.IEmitter,FluentIL.ILocal@)">
            <summary>
            Declares a local.
            </summary>
            <typeparam name="T">The locals type.</typeparam>
            <param name="emitter">An emitter instance.</param>
            <param name="local">A variable to receive a local.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.DeclareLocal``1(FluentIL.IEmitter,System.String,FluentIL.ILocal@)">
            <summary>
            Declares a local.
            </summary>
            <typeparam name="T">The locals type.</typeparam>
            <param name="emitter">An emitter instance.</param>
            <param name="localName">The name of the local.</param>
            <param name="local">A variable to receive a local.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.DeclareLocal``1(FluentIL.IEmitter,System.String,System.Boolean,FluentIL.ILocal@)">
            <summary>
            Declares a local.
            </summary>
            <typeparam name="T">The locals type.</typeparam>
            <param name="emitter">An emitter instance.</param>
            <param name="localName">The name of the local.</param>
            <param name="pinned">The value indicating whether or not the local is pinned.</param>
            <param name="local">A variable to receive a local.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.DeclareLocal``1(FluentIL.IEmitter,System.Boolean,FluentIL.ILocal@)">
            <summary>
            Declares a local.
            </summary>
            <typeparam name="T">The locals type.</typeparam>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>> instance.</param>
            <param name="pinned">The value indicating whether or not the local is pinned.</param>
            <param name="local">A variable to receive a local.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Try(FluentIL.IEmitter)">
            <summary>
            Starts a try block.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Try(FluentIL.IEmitter,FluentIL.ILabel@)">
            <summary>
            Starts a try block.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>> instance.</param>
            <param name="label">The label for the end of the block.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Catch``1(FluentIL.IEmitter)">
            <summary>
            Starts a catch block.
            </summary>
            <typeparam name="TException">The exception type.</typeparam>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Catch(FluentIL.IEmitter,System.Type)">
            <summary>
            Starts a catch block.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>> instance.</param>
            <param name="exceptionType">The label for the end of the block.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Catch(FluentIL.IEmitter,System.Type,FluentIL.ILocal)">
            <summary>
            Starts a catch block and stores the exception in the local.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>> instance.</param>
            <param name="exceptionType">The label for the end of the block.</param>
            <param name="local">A <see cref="T:FluentIL.ILocal"/> to store the exception in.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Finally(FluentIL.IEmitter)">
            <summary>
            Starts a finally block.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Finally(FluentIL.IEmitter,System.Action{FluentIL.IEmitter})">
            <summary>
            Emits a finally block.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>> instance.</param>
            <param name="block">An <see cref="T:System.Action`1"/>> block.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Fault(FluentIL.IEmitter)">
            <summary>
            Starts a fault block.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Filter(FluentIL.IEmitter)">
            <summary>
            Starts a filter block.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.Throw(FluentIL.IEmitter)">
            <summary>
            Throws an exception.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.ThrowException``1(FluentIL.IEmitter,System.String)">
            <summary>
            Throws an exception.
            </summary>
            <typeparam name="TException">The exception type.</typeparam>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>> instance.</param>
            <param name="message">The exception message.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.GetType(FluentIL.IEmitter,FluentIL.ILocal,System.Boolean)">
            <summary>
            Emits IL to load the type for a given type name onto the evaluation stack.
            </summary>
            <param name="emitter">The <see cref="T:FluentIL.IEmitter"/> to use.</param>
            <param name="typeNameLocal">The <see cref="T:System.Reflection.Emit.LocalBuilder"/> containing the type name.</param>
            <param name="dynamicOnly">A value indicating whether or not to only check for dynamically generated types.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterExtensions.GetType(FluentIL.IEmitter,System.String,System.Boolean)">
            <summary>
            Emits IL to load the type for a given type name onto the evaluation stack.
            </summary>
            <param name="emitter">The <see cref="T:FluentIL.IEmitter"/> to use.</param>
            <param name="typeName">The type name.</param>
            <param name="dynamicOnly">A value indicating whether or not to only check for dynamically generated types.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="T:FluentIL.EmitterLdcExtensions">
            <summary>
            Load constant <see cref="T:FluentIL.IEmitter"/> extension methods.
            </summary>
        </member>
        <member name="M:FluentIL.EmitterLdcExtensions.LdcI4(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emits the IL to push a supplied value onto the top of the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="value">The value to load.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdcExtensions.LdcI4_0(FluentIL.IEmitter)">
            <summary>
            Emits the IL to push the value 0 onto the top of the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdcExtensions.LdcI4_1(FluentIL.IEmitter)">
            <summary>
            Emits the IL to push the value 1 onto the top of the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdcExtensions.LdcI4_2(FluentIL.IEmitter)">
            <summary>
            Emits the IL to push the value 2 onto the top of the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdcExtensions.LdcI4_3(FluentIL.IEmitter)">
            <summary>
            Emits the IL to push the value 3 onto the top of the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdcExtensions.LdcI4_4(FluentIL.IEmitter)">
            <summary>
            Emits the IL to push the value 4 onto the top of the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdcExtensions.LdcI4_5(FluentIL.IEmitter)">
            <summary>
            Emits the IL to push the value 5 onto the top of the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdcExtensions.LdcI4_6(FluentIL.IEmitter)">
            <summary>
            Emits the IL to push the value 6 onto the top of the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdcExtensions.LdcI4_7(FluentIL.IEmitter)">
            <summary>
            Emits the IL to push the value 7 onto the top of the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdcExtensions.LdcI4_8(FluentIL.IEmitter)">
            <summary>
            Emits the IL to push the value 8 onto the top of the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdcExtensions.LdcI4_M1(FluentIL.IEmitter)">
            <summary>
            Pushes the integer value of -1 onto the evaluation stack as an int32.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdcExtensions.LdcI4_S(FluentIL.IEmitter,System.Byte)">
            <summary>
            Pushes the supplied int8 value onto the evaluation stack as an int32, short form.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="value">A value.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdcExtensions.LdcI8(FluentIL.IEmitter,System.Int64)">
            <summary>
            Pushes a supplied value of type int64 onto the evaluation stack as an int64.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="value">A value.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdcExtensions.LdcR4(FluentIL.IEmitter,System.Single)">
            <summary>
            Pushes a supplied value of type float32 onto the evaluation stack as type F (float).
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="value">A value.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdcExtensions.LdcR8(FluentIL.IEmitter,System.Double)">
            <summary>
            Pushes a supplied value of type float64 onto the evaluation stack as type F (float).
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="value">A value.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="T:FluentIL.EmitterLdExtensions">
            <summary>
            Load <see cref="T:FluentIL.IEmitter"/> extension methods.
            </summary>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdStr(FluentIL.IEmitter,System.String)">
            <summary>
            Emits the IL to load a string onto the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <param name="value">The string to load.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdLoc(FluentIL.IEmitter,FluentIL.ILocal)">
            <summary>
            Emits the IL to load a local onto the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <param name="local">The local to load.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdLocS(FluentIL.IEmitter,FluentIL.ILocal)">
            <summary>
            Emits the IL to load a local onto the evaluation stack (short form).
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <param name="local">The local to load.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdLoc0(FluentIL.IEmitter)">
            <summary>
            Emits the IL to load a local at position 0 onto the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdLoc1(FluentIL.IEmitter)">
            <summary>
            Emits the IL to load a local at position 1 onto the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdLoc2(FluentIL.IEmitter)">
            <summary>
            Emits the IL to load a local at position 2 onto the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdLoc3(FluentIL.IEmitter)">
            <summary>
            Emits the IL to load a local at position 3 onto the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdLocA(FluentIL.IEmitter,FluentIL.ILocal)">
            <summary>
            Emits the IL to load the address of a local onto the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="local">A local.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdLocA(FluentIL.IEmitter,System.Int32)">
            <summary>
            Emits the IL to load the address of a local onto the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">A locals index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdLocAS(FluentIL.IEmitter,FluentIL.ILocal)">
            <summary>
            Emits IL to load the address of a local onto the evaluation stack (short form).
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="local">The local.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdLocAS(FluentIL.IEmitter,System.Byte)">
            <summary>
            Emits IL to load the address of a local onto the evaluation stack (short form).
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">A locals index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdFld(FluentIL.IEmitter,System.Reflection.FieldInfo)">
            <summary>
            Emits the IL to load the value of a field onto the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="field">The field to load.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdFld(FluentIL.IEmitter,FluentIL.IFieldBuilder)">
            <summary>
            Emits the IL to load the value of a field onto the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="field">The field to load.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdFlda(FluentIL.IEmitter,System.Reflection.Emit.FieldBuilder)">
            <summary>
            Emits the IL to load the address of a field onto the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="field">The field to load the address of.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdFlda(FluentIL.IEmitter,FluentIL.IFieldBuilder)">
            <summary>
            Emits the IL to load the address of a field onto the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="field">The field to load the address of.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdsFld(FluentIL.IEmitter,FluentIL.IFieldBuilder)">
            <summary>
            Emits the IL to load the value of a static field onto the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="field">A <see cref="T:FluentIL.IFieldBuilder"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdsFld(FluentIL.IEmitter,System.Reflection.Emit.FieldBuilder)">
            <summary>
            Emits the IL to load the value of a static field onto the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="field">A <see cref="T:System.Reflection.Emit.FieldBuilder"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdsFlda(FluentIL.IEmitter,FluentIL.IFieldBuilder)">
            <summary>
            Emits the IL to load the address of a static field onto the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="field">A <see cref="T:FluentIL.IFieldBuilder"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdsFlda(FluentIL.IEmitter,System.Reflection.Emit.FieldBuilder)">
            <summary>
            Emits the IL to load the address of a static field onto the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="field">A <see cref="T:System.Reflection.Emit.FieldBuilder"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdArg(FluentIL.IEmitter,System.Int32)">
            <summary>
            Loads an argument by index.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The arguments index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdArg0(FluentIL.IEmitter)">
            <summary>
            Loads the first argument.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdArg1(FluentIL.IEmitter)">
            <summary>
            Loads the second argument.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdArg2(FluentIL.IEmitter)">
            <summary>
            Loads the third argument.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdArg3(FluentIL.IEmitter)">
            <summary>
            Loads the forth argument.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdArgS(FluentIL.IEmitter,System.Byte)">
            <summary>
            Loads an argument by index (short form).
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="index">The argument index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdToken(FluentIL.IEmitter,System.Type)">
            <summary>
            Loads a types token.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="type">The type to load the token for.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdToken(FluentIL.IEmitter,System.Reflection.MethodInfo)">
            <summary>
            Loads a method token.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="method">The method to load the token for.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdToken(FluentIL.IEmitter,System.Reflection.FieldInfo)">
            <summary>
            Loads a fields token.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="field">The field to load the token for.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdToken(FluentIL.IEmitter,FluentIL.IFieldBuilder)">
            <summary>
            Loads a fields token.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="field">The field to load the token for.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdNull(FluentIL.IEmitter)">
            <summary>
            Emits the IL to Load a null onto the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdObj(FluentIL.IEmitter,System.Type)">
            <summary>
            Emits the IL to indirectly copy a value type onto the evaluation stack.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="type">The type.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdIndI(FluentIL.IEmitter)">
            <summary>
            Emits the IL to indirectly load a native int onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdIndI1(FluentIL.IEmitter)">
            <summary>
            Emits the IL to indirectly load an int8 onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdIndI2(FluentIL.IEmitter)">
            <summary>
            Emits the IL to indirectly load an int16 onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdIndI4(FluentIL.IEmitter)">
            <summary>
            Emits the IL to indirectly load an int32 onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdIndI8(FluentIL.IEmitter)">
            <summary>
            Emits the IL to indirectly load an int64 onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdIndR4(FluentIL.IEmitter)">
            <summary>
            Emits the IL to indirectly load a float32 onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdIndR8(FluentIL.IEmitter)">
            <summary>
            Emits the IL to indirectly load a float64 onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdIndRef(FluentIL.IEmitter)">
            <summary>
            Emits the IL to indirectly load an object onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdIndU1(FluentIL.IEmitter)">
            <summary>
            Emits the IL to indirectly load an unsigned int8 onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdIndU2(FluentIL.IEmitter)">
            <summary>
            Emits the IL to indirectly load an unsigned int16 onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdIndU4(FluentIL.IEmitter)">
            <summary>
            Emits the IL to indirectly load an unsigned int32 onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterLdExtensions.LdInd(FluentIL.IEmitter,System.Type)">
            <summary>
            Emits the IL to indirectly load a value onto the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="type">The type to load.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="T:FluentIL.EmitterStExtensions">
            <summary>
            Store <see cref="T:FluentIL.IEmitter"/> extension methods.
            </summary>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StArg(FluentIL.IEmitter,System.Int16)">
            <summary>
            Emits IL to store the value at the top of the evaluation stack in an argument.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <param name="index">A arguments index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StArgS(FluentIL.IEmitter,System.Byte)">
            <summary>
            Emits IL to store the value at the top of the evaluation stack in an argument.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <param name="index">A arguments index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StArg(FluentIL.IEmitter,FluentIL.ILocal,System.Int16)">
            <summary>
            Emits IL to store the value at the top of the evaluation stack in an argument.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <param name="localValue">A local.</param>
            <param name="index">A arguments index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StArgS(FluentIL.IEmitter,FluentIL.ILocal,System.Byte)">
            <summary>
            Emits IL to store the value at the top of the evaluation stack in an argument.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <param name="localValue">A local.</param>
            <param name="index">A arguments index.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StLoc(FluentIL.IEmitter,FluentIL.ILocal)">
            <summary>
            Emits IL to store the value at the top of the evaluation stack in a local.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <param name="local">A local.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StLocS(FluentIL.IEmitter,FluentIL.ILocal)">
            <summary>
            Emits IL to store the value at the top of the evaluation stack in a local.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <param name="local">A local.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StLoc0(FluentIL.IEmitter)">
            <summary>
            Emits IL to store the value at the top of the evaluation stack in first local.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StLoc1(FluentIL.IEmitter)">
            <summary>
            Emits IL to store the value at the top of the evaluation stack in second local.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StLoc2(FluentIL.IEmitter)">
            <summary>
            Emits IL to store the object at the top of the evaluation stack in third local.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StLoc3(FluentIL.IEmitter)">
            <summary>
            Emits IL to store the value at the top of the evaluation stack in fourth local.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StFld(FluentIL.IEmitter,FluentIL.IFieldBuilder)">
            <summary>
            Emits IL to store the value at the top of the evaluation stack in a field.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <param name="field">A field.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StFld(FluentIL.IEmitter,System.Reflection.FieldInfo)">
            <summary>
            Emits IL to store the value at the top of the evaluation stack in a field.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <param name="field">A field.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StSFld(FluentIL.IEmitter,FluentIL.IFieldBuilder)">
            <summary>
            Emits IL to store the value at the top of the evaluation stack in a static field.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <param name="field">A static field.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StSFld(FluentIL.IEmitter,System.Reflection.FieldInfo)">
            <summary>
            Emits IL to store the value at the top of the evaluation stack in a static field.
            </summary>
            <param name="emitter">An <see cref="T:FluentIL.IEmitter"/>.</param>
            <param name="field">A static field.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StObj(FluentIL.IEmitter,System.Type)">
            <summary>
            Emits the IL to copy a value of a specified type from the top of the evaluation stack
            into the supplied address.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="type">The type to store.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StIndI(FluentIL.IEmitter)">
            <summary>
            Emits the IL to indirectly store a value of type native int from the top of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StIndI1(FluentIL.IEmitter)">
            <summary>
            Emits the IL to indirectly store a value of type int8 from the top of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StIndI2(FluentIL.IEmitter)">
            <summary>
            Emits the IL to indirectly store a value of type int16 from the top of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StIndI4(FluentIL.IEmitter)">
            <summary>
            Emits the IL to indirectly store a value of type int32 from the top of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StIndI8(FluentIL.IEmitter)">
            <summary>
            Emits the IL to indirectly store a value of type int64 from the top of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StIndR4(FluentIL.IEmitter)">
            <summary>
            Emits the IL to indirectly store a value of type float32 from the top of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StIndR8(FluentIL.IEmitter)">
            <summary>
            Emits the IL to indirectly store a value of type float64 from the top of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StIndRef(FluentIL.IEmitter)">
            <summary>
            Emits the IL to indirectly store a object reference from the top of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.EmitterStExtensions.StInd(FluentIL.IEmitter,System.Type)">
            <summary>
            Emits the IL to indirectly store a value from the top of the evaluation stack.
            </summary>
            <param name="emitter">A <see cref="T:FluentIL.IEmitter"/> instance.</param>
            <param name="type">The type to store.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="T:FluentIL.FieldBuilderExtensionMethods">
            <summary>
            <see cref="T:FluentIL.IFieldBuilder"/> extension methods.
            </summary>
        </member>
        <member name="M:FluentIL.FieldBuilderExtensionMethods.Private(FluentIL.IFieldBuilder)">
            <summary>
            Specifies that the field is accessible only by the parent type.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IFieldBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IFieldBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.FieldBuilderExtensionMethods.FamANDAssem(FluentIL.IFieldBuilder)">
            <summary>
            Specifies that the field is accessible only by subtypes in this assembly.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IFieldBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IFieldBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.FieldBuilderExtensionMethods.Assembly(FluentIL.IFieldBuilder)">
            <summary>
            Specifies that the field is accessible throughout the assembly.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IFieldBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IFieldBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.FieldBuilderExtensionMethods.Family(FluentIL.IFieldBuilder)">
            <summary>
            Specifies that the field is accessible only by type and subtypes.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IFieldBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IFieldBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.FieldBuilderExtensionMethods.FamORAssem(FluentIL.IFieldBuilder)">
            <summary>
            Specifies that the field is accessible by subtypes anywhere, as well as throughout
            this assembly.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IFieldBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IFieldBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.FieldBuilderExtensionMethods.Public(FluentIL.IFieldBuilder)">
            <summary>
            Specifies that the field is accessible by any member for whom this scope is visible.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IFieldBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IFieldBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.FieldBuilderExtensionMethods.Static(FluentIL.IFieldBuilder)">
            <summary>
            Specifies that the field represents the defined type, or else it is per-instance.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IFieldBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IFieldBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.FieldBuilderExtensionMethods.InitOnly(FluentIL.IFieldBuilder)">
            <summary>
            Specifies that the field is initialized only, and can be set only in the body
            of a constructor.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IFieldBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IFieldBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.FieldBuilderExtensionMethods.Literal(FluentIL.IFieldBuilder)">
            <summary>
            Specifies that the field's value is a compile-time (static or early bound) constant.
            Any attempt to set it throws a System.FieldAccessException.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IFieldBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IFieldBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.FieldBuilderExtensionMethods.NotSerialized(FluentIL.IFieldBuilder)">
            <summary>
            Specifies that the field does not have to be serialized when the type is remoted.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IFieldBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IFieldBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.FieldBuilderExtensionMethods.HasFieldRVA(FluentIL.IFieldBuilder)">
            <summary>
            Specifies that the field has a relative virtual address (RVA). The RVA is the
            location of the method body in the current image, as an address relative to the
            start of the image file in which it is located.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IFieldBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IFieldBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.FieldBuilderExtensionMethods.SpecialName(FluentIL.IFieldBuilder)">
            <summary>
            Specifies a special method, with the name describing how the method is special.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IFieldBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IFieldBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.FieldBuilderExtensionMethods.RTSpecialName(FluentIL.IFieldBuilder)">
            <summary>
            Specifies that the common language runtime (metadata internal APIs) should check
            the name encoding.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IFieldBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IFieldBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.FieldBuilderExtensionMethods.HasFieldMarshal(FluentIL.IFieldBuilder)">
            <summary>
            Specifies that the field has marshaling information.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IFieldBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IFieldBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.FieldBuilderExtensionMethods.HasDefault(FluentIL.IFieldBuilder)">
            <summary>
            Specifies that the field has a default value.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IFieldBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IFieldBuilder"/> instance.</returns>
        </member>
        <member name="T:FluentIL.MethodBuilderExtensionMethods">
            <summary>
            <see cref="T:FluentIL.IMethodBuilder"/> and <see cref="T:System.Reflection.Emit.MethodBuilder"/> extension methods.
            </summary>
        </member>
        <member name="M:FluentIL.MethodBuilderExtensionMethods.Public(FluentIL.IMethodBuilder)">
            <summary>
            Indicates that the method is accessible to any object for which this object is in scope.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IMethodBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.MethodBuilderExtensionMethods.Private(FluentIL.IMethodBuilder)">
            <summary>
            Indicates that the method is accessible only to the current class.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IMethodBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.MethodBuilderExtensionMethods.Virtual(FluentIL.IMethodBuilder)">
            <summary>
            Indicates that the method is virtual.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IMethodBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.MethodBuilderExtensionMethods.HideBySig(FluentIL.IMethodBuilder)">
            <summary>
            Indicates that the method hides by name and signature; otherwise, by name only.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IMethodBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.MethodBuilderExtensionMethods.SpecialName(FluentIL.IMethodBuilder)">
            <summary>
            Indicates that the method.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IMethodBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.MethodBuilderExtensionMethods.RTSpecialName(FluentIL.IMethodBuilder)">
            <summary>
            Indicates that the method.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IMethodBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.MethodBuilderExtensionMethods.NewSlot(FluentIL.IMethodBuilder)">
            <summary>
            Indicates that the method always gets a new slot in the vtable.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IMethodBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.MethodBuilderExtensionMethods.Static(FluentIL.IMethodBuilder)">
            <summary>
            Indicates that the method is defined on the type; otherwise, it is defined per instance.
            </summary>
            <param name="builder">A <see cref="T:FluentIL.IMethodBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.MethodBuilderExtensionMethods.Param``1(FluentIL.IMethodBuilder)">
            <summary>
            Defines a parameter.
            </summary>
            <typeparam name="TParam">The parameter type.</typeparam>
            <param name="methodBuilder">A <see cref="T:FluentIL.IMethodBuilder"/> instance.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.MethodBuilderExtensionMethods.Param``1(FluentIL.IMethodBuilder,System.String,System.Reflection.ParameterAttributes)">
            <summary>
            Defines a parameter.
            </summary>
            <typeparam name="TParam">The parameter type.</typeparam>
            <param name="methodBuilder">A <see cref="T:FluentIL.IMethodBuilder"/> instance.</param>
            <param name="parameterName">The name of parameter.</param>
            <param name="attrs">The parameters attribtes.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.MethodBuilderExtensionMethods.OutParam``1(FluentIL.IMethodBuilder,System.String)">
            <summary>
            Defines an out parameter.
            </summary>
            <typeparam name="TParam">The parameter type.</typeparam>
            <param name="methodBuilder">A <see cref="T:FluentIL.IMethodBuilder"/> instance.</param>
            <param name="parameterName">The name of parameter.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.MethodBuilderExtensionMethods.RefParam``1(FluentIL.IMethodBuilder,System.String)">
            <summary>
            Defines an ref parameter.
            </summary>
            <typeparam name="TParam">The parameter type.</typeparam>
            <param name="methodBuilder">A <see cref="T:FluentIL.IMethodBuilder"/> instance.</param>
            <param name="parameterName">The name of parameter.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.MethodBuilderExtensionMethods.Body(System.Reflection.Emit.MethodBuilder)">
            <summary>
            Returns a <see cref="T:FluentIL.IEmitter"/> for the method body.
            </summary>
            <param name="methodBuilder">A <see cref="T:System.Reflection.Emit.MethodBuilder"/> instance.</param>
            <returns>An <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="T:FluentIL.ParameterInfoExtensions">
            <summary>
            Extensions to the <see cref="T:System.Reflection.ParameterInfo"/> class.
            </summary>
        </member>
        <member name="M:FluentIL.ParameterInfoExtensions.HasAttribute(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Checks if a parameter has an attribute applied to it.
            </summary>
            <param name="parameterInfo">The parameter.</param>
            <param name="attributeType">The attribute type.</param>
            <returns>True if it has; otherwise false.</returns>
        </member>
        <member name="T:FluentIL.PropertyExtensionMethods">
            <summary>
            <see cref="T:FluentIL.IPropertyBuilder"/> extension methods.
            </summary>
        </member>
        <member name="M:FluentIL.PropertyExtensionMethods.IsProperty(System.Reflection.MethodInfo)">
            <summary>
            Gets a value indicating whether or not the <see cref="T:System.Reflection.MethodInfo"/> is a property method.
            </summary>
            <param name="methodInfo">The method info.</param>
            <returns>True if the <see cref="T:System.Reflection.MethodInfo"/> is a property method; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.PropertyExtensionMethods.IsPropertyGet(System.Reflection.MethodInfo)">
            <summary>
            Gets a value indicating whether or not the <see cref="T:System.Reflection.MethodInfo"/> is a property get method.
            </summary>
            <param name="methodInfo">The method info.</param>
            <returns>True if the <see cref="T:System.Reflection.MethodInfo"/> is a property get method; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.PropertyExtensionMethods.IsPropertySet(System.Reflection.MethodInfo)">
            <summary>
            Gets a value indicating whether or not the <see cref="T:System.Reflection.MethodInfo"/> is a property set method.
            </summary>
            <param name="methodInfo">The method info.</param>
            <returns>True if the <see cref="T:System.Reflection.MethodInfo"/> is a property set method; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.PropertyExtensionMethods.PropertyGetName(System.Reflection.MemberInfo)">
            <summary>
            Returns the name of the get method if the given <see cref="T:System.Reflection.MemberInfo"/> is a property.
            </summary>
            <param name="memberInfo">The member info.</param>
            <returns>The name of the get method if the <see cref="T:System.Reflection.MemberInfo"/> is a property; otherwise null.</returns>
        </member>
        <member name="M:FluentIL.PropertyExtensionMethods.PropertySetName(System.Reflection.MemberInfo)">
            <summary>
            Returns the name of the set method if the given <see cref="T:System.Reflection.MemberInfo"/> is a property.
            </summary>
            <param name="memberInfo">The member info.</param>
            <returns>The name of the set method if the <see cref="T:System.Reflection.MemberInfo"/> is a property; otherwise null.</returns>
        </member>
        <member name="M:FluentIL.PropertyExtensionMethods.Getter(System.Reflection.Emit.PropertyBuilder,System.Func{System.Reflection.Emit.MethodBuilder})">
            <summary>
            Defines a properties get method.
            </summary>
            <param name="propertyBuilder">A property builder.</param>
            <param name="action">A lambda to define the properties get method.</param>
            <returns>The <see cref="T:FluentIL.IPropertyBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.PropertyExtensionMethods.Setter(System.Reflection.Emit.PropertyBuilder,System.Func{System.Reflection.Emit.MethodBuilder})">
            <summary>
            Defines a properties set method.
            </summary>
            <param name="propertyBuilder">A property builder.</param>
            <param name="action">A lambda to define the properties get method.</param>
            <returns>The <see cref="T:FluentIL.IPropertyBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.PropertyExtensionMethods.GetProperty(FluentIL.IEmitter,System.String,FluentIL.ILocal)">
            <summary>
            Emits IL to load the contents of a property onto the evaluation stack.
            </summary>
            <param name="emitter">The <see cref="T:FluentIL.IEmitter"/> to use.</param>
            <param name="propertyName">The property name.</param>
            <param name="local">The <see cref="T:FluentIL.ILocal"/> that contains the property to read.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.PropertyExtensionMethods.GetProperty``1(FluentIL.IEmitter,System.String)">
            <summary>
            Emits IL to load the contents of a property onto the evaluation stack.
            </summary>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="emitter">The <see cref="T:FluentIL.IEmitter"/> to use.</param>
            <param name="propertyName">The property name.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.PropertyExtensionMethods.GetProperty(FluentIL.IEmitter,System.String,System.Type)">
            <summary>
            Emits IL to load the contents of a property onto the evaluation stack.
            </summary>
            <param name="emitter">The <see cref="T:FluentIL.IEmitter"/> to use.</param>
            <param name="propertyName">The property name.</param>
            <param name="propertyType">The property type.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.PropertyExtensionMethods.SetProperty(FluentIL.IEmitter,System.String,FluentIL.ILocal)">
            <summary>
            Emits IL to pass the value on the top of set evaluation stack to a property set method.
            </summary>
            <param name="emitter">The <see cref="T:FluentIL.IEmitter"/> to use.</param>
            <param name="propertyName">The property name.</param>
            <param name="local">The <see cref="T:FluentIL.ILocal"/> that contains the property to set.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.PropertyExtensionMethods.SetProperty(FluentIL.IEmitter,System.String,System.Type)">
            <summary>
            Emits IL to call the set method of a property.
            </summary>
            <param name="emitter">The <see cref="T:FluentIL.IEmitter"/> to use.</param>
            <param name="propertyName">The property name.</param>
            <param name="propertyType">The property type.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.PropertyExtensionMethods.SetProperty``1(FluentIL.IEmitter,System.String)">
            <summary>
            Emits IL to call the set method of a property.
            </summary>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="emitter">The <see cref="T:FluentIL.IEmitter"/> to use.</param>
            <param name="propertyName">The property name.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="T:FluentIL.ReflectionEmitExtensions">
            <summary>
            Reflection emit extension methods.
            </summary>
        </member>
        <member name="M:FluentIL.ReflectionEmitExtensions.DefineGlobalMethod(System.Reflection.Emit.ModuleBuilder,System.String,System.Type)">
            <summary>
            Defines a global method.
            </summary>
            <param name="moduleBuilder">A <see cref="T:System.Reflection.Emit.ModuleBuilder"/> instance.</param>
            <param name="methodName">The name of the method.</param>
            <param name="returnType">The return type.</param>
            <returns>A <see cref="T:FluentIL.IModuleBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ReflectionEmitExtensions.DefineGlobalMethod``1(System.Reflection.Emit.ModuleBuilder,System.String)">
            <summary>
            Defines a global method.
            </summary>
            <typeparam name="TReturn">The return type.</typeparam>
            <param name="moduleBuilder">A <see cref="T:System.Reflection.Emit.ModuleBuilder"/> instance.</param>
            <param name="methodName">The name of the method.</param>
            <returns>A <see cref="T:FluentIL.IModuleBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ReflectionEmitExtensions.DefineGlobalMethod(System.Reflection.Emit.ModuleBuilder,System.String)">
            <summary>
            Defines a global method.
            </summary>
            <param name="moduleBuilder">A <see cref="T:System.Reflection.Emit.ModuleBuilder"/> instance.</param>
            <param name="methodName">The name of the method.</param>
            <returns>A <see cref="T:FluentIL.IModuleBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ReflectionEmitExtensions.SetCustomAttributes(System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Action{System.Reflection.Emit.CustomAttributeBuilder})">
            <summary>
            Helper method for setting custom attributes.
            </summary>
            <param name="attrs">A list of custom attributes.</param>
            <param name="action">An action for settin the attribute.</param>
        </member>
        <member name="M:FluentIL.ReflectionEmitExtensions.IfNotNull(FluentIL.IEmitter,FluentIL.ILocal,System.Action{FluentIL.IEmitter},System.Action{FluentIL.IEmitter})">
            <summary>
            Emits IL to check if the passed in local variable is null or not, executing the emitted body if not.
            </summary>
            <param name="emitter">The <see cref="T:FluentIL.IEmitter"/> to use.</param>
            <param name="local">The locval variable to check.</param>
            <param name="emitBody">A function to emit the IL to be executed if the object is not null.</param>
            <param name="emitElse">A function to emit the IL to be executed if the object is null.</param>
            <returns>The passed in <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.ReflectionEmitExtensions.IfNotNull(FluentIL.IEmitter,System.Action{FluentIL.IEmitter},System.Action{FluentIL.IEmitter})">
            <summary>
            Emits IL to check if the object on the top of the evaluation stack is not null, executing the emitted body if not.
            </summary>
            <param name="emitter">The <see cref="T:FluentIL.IEmitter"/> to use.</param>
            <param name="emitBody">A function to emit the IL to be executed if the object is not null.</param>
            <param name="emitElse">A function to emit the IL to be executed if the object is null.</param>
            <returns>The passed in <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.ReflectionEmitExtensions.If(FluentIL.IEmitter,System.Linq.Expressions.Expression{System.Func{FluentIL.Expressions.IExpression,System.Boolean}},System.Action{FluentIL.IEmitter},System.Action{FluentIL.IEmitter})">
            <summary>
            Emits an if operation.
            </summary>
            <param name="emitter">The <see cref="T:FluentIL.IEmitter"/> to use.</param>
            <param name="expression">An expression.</param>
            <param name="action">An action to perform if the expression is true.</param>
            <param name="elseAction">An action to perform if the expression is false.</param>
            <returns>The passed in <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.ReflectionEmitExtensions.While(FluentIL.IEmitter,System.Linq.Expressions.Expression{System.Func{FluentIL.Expressions.IExpression,System.Boolean}},System.Action{FluentIL.IEmitter})">
            <summary>
            Emits a while loop.
            </summary>
            <param name="emitter">The <see cref="T:FluentIL.IEmitter"/> to use.</param>
            <param name="expression">The while expression.</param>
            <param name="action">The action to execute.</param>
            <returns>The passed in <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.ReflectionEmitExtensions.Do(FluentIL.IEmitter,System.Linq.Expressions.Expression{System.Func{FluentIL.Expressions.IExpression,System.Boolean}},System.Action{FluentIL.IEmitter})">
            <summary>
            Emits a do while loop.
            </summary>
            <param name="emitter">The <see cref="T:FluentIL.IEmitter"/> to use.</param>
            <param name="expression">The do while expression.</param>
            <param name="action">The action to execute.</param>
            <returns>The passed in <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.ReflectionEmitExtensions.For(FluentIL.IEmitter,System.Linq.Expressions.Expression{System.Action{FluentIL.Expressions.IInitialiser}},System.Linq.Expressions.Expression{System.Func{FluentIL.Expressions.ICondition,System.Boolean}},System.Linq.Expressions.Expression{System.Action{FluentIL.Expressions.IIterator}},System.Action{FluentIL.IEmitter})">
            <summary>
            Emits a for loop.
            </summary>
            <param name="emitter">The <see cref="T:FluentIL.IEmitter"/> to use.</param>
            <param name="initialiser">The initialiser expression.</param>
            <param name="condition">The condition expression.</param>
            <param name="iterator">The iterator expression.</param>
            <param name="action">The action to execute.</param>
            <returns>The passed in <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="T:FluentIL.ReflectionExtensions">
            <summary>
            Reflection extension methods.
            </summary>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethodAction``1(System.Object,System.String)">
            <summary>
            Gets a method action.
            </summary>
            <typeparam name="T">The first paremeter type.</typeparam>
            <param name="instance">The object to get the method from.</param>
            <param name="methodName">The method name.</param>
            <returns>The delegate.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethodAction``2(System.Object,System.String)">
            <summary>
            Gets a method action.
            </summary>
            <typeparam name="T1">The first paremeter type.</typeparam>
            <typeparam name="T2">The second paremeter type.</typeparam>
            <param name="instance">The object to get the method from.</param>
            <param name="methodName">The method name.</param>
            <returns>The delegate.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethodAction``3(System.Object,System.String)">
            <summary>
            Gets a method action.
            </summary>
            <typeparam name="T1">The first paremeter type.</typeparam>
            <typeparam name="T2">The second paremeter type.</typeparam>
            <typeparam name="T3">The third paremeter type.</typeparam>
            <param name="instance">The object to get the method from.</param>
            <param name="methodName">The method name.</param>
            <returns>The delegate.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethodAction``4(System.Object,System.String)">
            <summary>
            Gets a method action.
            </summary>
            <typeparam name="T1">The first paremeter type.</typeparam>
            <typeparam name="T2">The second paremeter type.</typeparam>
            <typeparam name="T3">The third paremeter type.</typeparam>
            <typeparam name="T4">The fourth paremeter type.</typeparam>
            <param name="instance">The object to get the method from.</param>
            <param name="methodName">The method name.</param>
            <returns>The delegate.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethodFunc``1(System.Object,System.String)">
            <summary>
            Gets a method <see cref="T:System.Func`1"/>.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="instance">The object to get the method from.</param>
            <param name="methodName">The method name.</param>
            <returns>The delegate.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethodFunc``2(System.Object,System.String)">
            <summary>
            Gets a method <see cref="T:System.Func`1"/>.
            </summary>
            <typeparam name="T">The first parameter type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="instance">The object to get the method from.</param>
            <param name="methodName">The method name.</param>
            <returns>The delegate.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethodFunc``3(System.Object,System.String)">
            <summary>
            Gets a method <see cref="T:System.Func`1"/>.
            </summary>
            <typeparam name="T1">The first paremeter type.</typeparam>
            <typeparam name="T2">The second paremeter type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="instance">The object to get the method from.</param>
            <param name="methodName">The method name.</param>
            <returns>The delegate.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethodFunc``4(System.Object,System.String)">
            <summary>
            Gets a method <see cref="T:System.Func`1"/>.
            </summary>
            <typeparam name="T1">The first paremeter type.</typeparam>
            <typeparam name="T2">The second paremeter type.</typeparam>
            <typeparam name="T3">The third paremeter type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="instance">The object to get the method from.</param>
            <param name="methodName">The method name.</param>
            <returns>The delegate.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethodFunc``5(System.Object,System.String)">
            <summary>
            Gets a method <see cref="T:System.Func`1"/>.
            </summary>
            <typeparam name="T1">The first paremeter type.</typeparam>
            <typeparam name="T2">The second paremeter type.</typeparam>
            <typeparam name="T3">The third paremeter type.</typeparam>
            <typeparam name="T4">The fourth paremeter type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="instance">The object to get the method from.</param>
            <param name="methodName">The method name.</param>
            <returns>The delegate.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetGenericMethod``1(System.Type,System.String)">
            <summary>
            Gets a generic method by name.
            </summary>
            <typeparam name="T">The methods generic argument.</typeparam>
            <param name="type">The type to search for the method.</param>
            <param name="name">The name of the method.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> if the method is found; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetGenericMethod``2(System.Type,System.String)">
            <summary>
            Gets a generic method by name.
            </summary>
            <typeparam name="T1">The methods first generic argument.</typeparam>
            <typeparam name="T2">The methods second generic argument.</typeparam>
            <param name="type">The type to search for the method.</param>
            <param name="name">The name of the method.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> if the method is found; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetGenericMethod``3(System.Type,System.String)">
            <summary>
            Gets a generic method by name.
            </summary>
            <typeparam name="T1">The methods first generic argument.</typeparam>
            <typeparam name="T2">The methods second generic argument.</typeparam>
            <typeparam name="T3">The methods third generic argument.</typeparam>
            <param name="type">The type to search for the method.</param>
            <param name="name">The name of the method.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> if the method is found; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetGenericMethod``4(System.Type,System.String)">
            <summary>
            Gets a generic method by name.
            </summary>
            <typeparam name="T1">The methods first generic argument.</typeparam>
            <typeparam name="T2">The methods second generic argument.</typeparam>
            <typeparam name="T3">The methods third generic argument.</typeparam>
            <typeparam name="T4">The methods fourth generic argument.</typeparam>
            <param name="type">The type to search for the method.</param>
            <param name="name">The name of the method.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> if the method is found; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethodWithNameAndOptionalTypes(System.Type,System.String,System.Type[])">
            <summary>
            Gets a method from a type using the methods name and optional argument type list.
            </summary>
            <param name="type">The type to get the method from.</param>
            <param name="methodName">The method name.</param>
            <param name="argumentTypes">The methods argument types.</param>
            <returns>A method if found; otherwise null.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethod(System.Type,System.String,System.Int32,System.Type[])">
            <summary>
            Gets a generic method by name.
            </summary>
            <param name="type">The type to search for the method.</param>
            <param name="name">The name of the method.</param>
            <param name="genericArgumentCount">The number of generic arguments expected.</param>
            <param name="argumentTypes">An array of argument types.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> if the method is found; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethodWithParameters``1(System.Type,System.String)">
            <summary>
            Gets a method by name and paramters.
            </summary>
            <typeparam name="T">The methods parameter type.</typeparam>
            <param name="type">The type to search for the method.</param>
            <param name="name">The name of the method.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> if the method is found; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethodWithParameters``1(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets a generic method by name.
            </summary>
            <typeparam name="T">The methods parameter type.</typeparam>
            <param name="type">The type to search for the method.</param>
            <param name="name">The name of the method.</param>
            <param name="bindingFlags">The binding flags to use.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> if the method is found; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethodWithParameters``2(System.Type,System.String)">
            <summary>
            Gets a method by name and paramters.
            </summary>
            <typeparam name="T1">The methods first parameter type.</typeparam>
            <typeparam name="T2">The methods second parameter type.</typeparam>
            <param name="type">The type to search for the method.</param>
            <param name="name">The name of the method.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> if the method is found; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethodWithParameters``2(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets a method by name and paramters.
            </summary>
            <typeparam name="T1">The methods first parameter type.</typeparam>
            <typeparam name="T2">The methods second parameter type.</typeparam>
            <param name="type">The type to search for the method.</param>
            <param name="name">The name of the method.</param>
            <param name="bindingFlags">The binding flags to use.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> if the method is found; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethodWithParameters(System.Type,System.String,System.Type[])">
            <summary>
            Gets a method by name and paramters.
            </summary>
            <param name="type">The type to search for the method.</param>
            <param name="name">The name of the method.</param>
            <param name="parameterTypes">The parameters the method must have.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> if the method is found; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethodWithParameters(System.Type,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Gets a method by name and paramters.
            </summary>
            <param name="type">The type to search for the method.</param>
            <param name="name">The name of the method.</param>
            <param name="bindingFlags">The binding flags to use.</param>
            <param name="parameterTypes">The parameters the method must have.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> if the method is found; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethodWithParameters(System.Type,System.String,System.Reflection.ParameterInfo[])">
            <summary>
            Gets a method of the given name with the given parameters.
            </summary>
            <param name="type">The type to search for the method.</param>
            <param name="name">The name of the method.</param>
            <param name="parameters">The parameters the method must have.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> representing the method if one has been found; otherwise null.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethodWithParameters(System.Type,System.String,System.Reflection.BindingFlags,System.Reflection.ParameterInfo[])">
            <summary>
            Gets a method of the given name with the given parameters.
            </summary>
            <param name="type">The type to search for the method.</param>
            <param name="name">The name of the method.</param>
            <param name="bindingFlags">The binding flags to use.</param>
            <param name="parameters">The parameters the method must have.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> representing the method if one has been found; otherwise null.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethodWithParametersOrAttribute(System.Type,System.String,System.Reflection.BindingFlags,System.Reflection.ParameterInfo[],System.Type)">
            <summary>
            Gets a method of the given name with the given parameters or attribute.
            </summary>
            <param name="type">The type to search for the method.</param>
            <param name="name">The name of the method.</param>
            <param name="bindingFlags">The binding flags to use.</param>
            <param name="parameters">The parameters the method must have.</param>
            <param name="attributeType">The attribute to check for.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> representing the method if one has been found; otherwise null.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Type[],System.Type[])">
            <summary>
            Gets a method by name and paramters.
            </summary>
            <param name="type">The type to search for the method.</param>
            <param name="name">The name of the method.</param>
            <param name="bindingFlags">The binding flags to use.</param>
            <param name="genericArgs">An array of generic argument types.</param>
            <param name="parameters">An array of parameter types.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> if the method is found; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetMethod(System.Type,System.Int32)">
            <summary>
            Gets a method by name and paramters.
            </summary>
            <param name="type">The type to search for the method.</param>
            <param name="methodToken">The method token.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> if the method is found; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetSimilarMethod(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Searches a <see cref="T:System.Type"/> for a method similar to the supplied one.
            </summary>
            <param name="type">The type to search.</param>
            <param name="methodInfo">The method to search for.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> if found; otherwise null.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetSimilarMethod(System.Type,System.Reflection.MethodInfo,System.Reflection.BindingFlags,System.Type)">
            <summary>
            Searches a <see cref="T:System.Type"/> for a method similar to the supplied one.
            </summary>
            <param name="type">The type to search.</param>
            <param name="methodInfo">The method to search for.</param>
            <param name="bindingFlags">The binding flags.</param>
            <param name="attributeType">An attribute that a method parameter can have.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> if found; otherwise null.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.FindMethod(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Type[],System.Reflection.ParameterInfo[],System.Type)">
            <summary>
            Finds a method.
            </summary>
            <param name="methods">A list of <see cref="T:System.Reflection.MethodInfo"/> instances.</param>
            <param name="genArgs">A list of generic arguments.</param>
            <param name="parameters">A list of parameters.</param>
            <param name="attributeType">An attribute type.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> if found; otherwise null.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.FindExtensionMethod(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Type[],System.Reflection.ParameterInfo[],System.Type,System.Type)">
            <summary>
            Finds an extension method.
            </summary>
            <param name="methods">A list of <see cref="T:System.Reflection.MethodInfo"/> instance.</param>
            <param name="genArgs">A list of generic type arguments.</param>
            <param name="parameters">A list of parameters.</param>
            <param name="extensionType">The extension type.</param>
            <param name="attributeType">An attribute type.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> if found; otherwise null.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.ParameterTypesAreSimilar(System.Reflection.ParameterInfo[],System.Type[])">
            <summary>
            Checks a parameter list against a type lits to see if the types are similar.
            </summary>
            <param name="source">The source parameter list.</param>
            <param name="dest">The destination parameter type list.</param>
            <returns>True if the lists are similar; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.ParameterTypesMatch(System.Reflection.ParameterInfo[],System.Type[])">
            <summary>
            Checks a parameter list against a type list to see if they match.
            </summary>
            <param name="parameters">The source parameter list.</param>
            <param name="parameterTypes">The destination parameter type list.</param>
            <returns>True if the lists are similar; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.ParameterTypesMatch(System.Reflection.ParameterInfo[],System.Int32,System.Type[],System.Int32,System.Int32)">
            <summary>
            Checks a parameter list against a type list to see if they match.
            </summary>
            <param name="parameters">The parameter list.</param>
            <param name="parametersStartIndex">The parameter list index to start at.</param>
            <param name="parameterTypes">The parameter type list.</param>
            <param name="parameterTypesStartIndex">The parameter type list index to start at.</param>
            <param name="length">The number of parameters to check.</param>
            <returns>True if the lists are similar; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.ParameterTypesMatchOrAttribute(System.Reflection.ParameterInfo[],System.Reflection.ParameterInfo[],System.Type)">
            <summary>
            Checks the parameter lists to see if the parameters are similar or if the destination parameter has a specific attribute applied.
            </summary>
            <param name="source">The source parameter list.</param>
            <param name="dest">The destination parameter list.</param>
            <param name="attribute">The optional attribute to check for.</param>
            <returns>True if the lists are similar or they have the attribute applied; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.ParameterTypesMatchOrAttribute(System.Reflection.ParameterInfo[],System.Int32,System.Reflection.ParameterInfo[],System.Int32,System.Int32,System.Type)">
            <summary>
            Checks if two parameter lists have similar types or the parameter has an attribute.
            </summary>
            <param name="source">The first parameter list.</param>
            <param name="sourceIndex">The first start index.</param>
            <param name="dest">The second parameter list.</param>
            <param name="destIndex">The second start index.</param>
            <param name="length">The number of parameters to check.</param>
            <param name="attribute">The attribute to check for.</param>
            <returns>True if they are similar or they have the atrribute; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.IsSimilarType(System.Type,System.Type)">
            <summary>
            Determines if the two types are either identical, or are both generic
            parameters or generic types with generic parameters in the same
            locations (generic parameters match any other generic paramter,
            but NOT concrete types).
            </summary>
            <param name="thisType">The <see cref="T:System.Type"/> being compared with.</param>
            <param name="type">The <see cref="T:System.Type"/> being compared.</param>
            <returns>True if they are similar; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.GetGenericMethod(System.Type,System.String,System.Type[])">
            <summary>
            Gets a named method from a type with specific generic type arguments.
            </summary>
            <param name="type">The type to search for the method.</param>
            <param name="name">The method name.</param>
            <param name="genericTypes">A list of generic type arguments.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> if found; otherwise null.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.TypeNamesMatch(System.Type[],System.Type[])">
            <summary>
            Checks if two Type arrays match by name.
            </summary>
            <param name="array1">The first type array.</param>
            <param name="array2">The second type array.</param>
            <returns>True if the types match; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.TypeListsMatch(System.Type[],System.Type[])">
            <summary>
            Checks if two Type lists match.
            </summary>
            <param name="source">The first type array.</param>
            <param name="dest">The second type array.</param>
            <returns>True if the types match; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.ReflectionExtensions.BuildMethodInfo(System.Type,System.String)">
            <summary>
            Builds <see cref="T:System.Reflection.MethodInfo"/> instances.
            </summary>
            <param name="type">The type to build a <see cref="T:System.Reflection.MethodInfo"/> for.</param>
            <param name="methodName">The name of the method.</param>
            <returns>A <see cref="T:FluentIL.Builders.MethodInfoBuilder"/> instance.</returns>
        </member>
        <member name="T:FluentIL.TypeBuilderExtensionMethods">
            <summary>
            <see cref="T:FluentIL.ITypeBuilder"/> extension methods.
            </summary>
        </member>
        <member name="M:FluentIL.TypeBuilderExtensionMethods.Public(FluentIL.ITypeBuilder)">
            <summary>
            Specifies that the type is public.
            </summary>
            <param name="typeBuilder">A type builder.</param>
            <returns>The type builder instance.</returns>
        </member>
        <member name="M:FluentIL.TypeBuilderExtensionMethods.NotPublic(FluentIL.ITypeBuilder)">
            <summary>
            Specifies that the type is not public.
            </summary>
            <param name="typeBuilder">A type builder.</param>
            <returns>The type builder instance.</returns>
        </member>
        <member name="M:FluentIL.TypeBuilderExtensionMethods.Class(FluentIL.ITypeBuilder)">
            <summary>
            Specifies that the type is a class.
            </summary>
            <param name="typeBuilder">A type builder.</param>
            <returns>A field builder.</returns>
        </member>
        <member name="M:FluentIL.TypeBuilderExtensionMethods.Sealed(FluentIL.ITypeBuilder)">
            <summary>
            Specifies that the type is sealed.
            </summary>
            <param name="typeBuilder">A type builder.</param>
            <returns>A field builder.</returns>
        </member>
        <member name="M:FluentIL.TypeBuilderExtensionMethods.Interface(FluentIL.ITypeBuilder)">
            <summary>
            Specifies that the type is an interface.
            </summary>
            <param name="typeBuilder">A type builder.</param>
            <returns>A field builder.</returns>
        </member>
        <member name="M:FluentIL.TypeBuilderExtensionMethods.Abstract(FluentIL.ITypeBuilder)">
            <summary>
            Specifies that the type is abstract.
            </summary>
            <param name="typeBuilder">A type builder.</param>
            <returns>A field builder.</returns>
        </member>
        <member name="M:FluentIL.TypeBuilderExtensionMethods.BeforeFieldInit(FluentIL.ITypeBuilder)">
            <summary>
            Specifies that calling static methods on the type does not force the system
            to initialize the type.
            </summary>
            <param name="typeBuilder">A type builder.</param>
            <returns>A field builder.</returns>
        </member>
        <member name="M:FluentIL.TypeBuilderExtensionMethods.NewField``1(FluentIL.ITypeBuilder,System.String)">
            <summary>
            Creates a field.
            </summary>
            <typeparam name="T">The field type.</typeparam>
            <param name="typeBuilder">A type builder.</param>
            <param name="fieldName">The name of the field.</param>
            <returns>A field builder.</returns>
        </member>
        <member name="M:FluentIL.TypeBuilderExtensionMethods.NewProperty``1(FluentIL.ITypeBuilder,System.String)">
            <summary>
            Creates a property.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="typeBuilder">A type builder.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>A properrty builder.</returns>
        </member>
        <member name="M:FluentIL.TypeBuilderExtensionMethods.NewMethod``1(FluentIL.ITypeBuilder,System.String)">
            <summary>
            Creates a method.
            </summary>
            <typeparam name="TReturn">The return type.</typeparam>
            <param name="typeBuilder">A type builder.</param>
            <param name="name">The name of the method.</param>
            <returns>A method builder instance.</returns>
        </member>
        <member name="T:FluentIL.TypeExtensions">
            <summary>
            Extensions to Type and Object classes.
            </summary>
        </member>
        <member name="M:FluentIL.TypeExtensions.HasProperty(System.Object,System.String)">
            <summary>
            Checks if an object has a name property.
            </summary>
            <param name="obj">The object to check.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>True if the object has the property; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.TypeExtensions.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="obj">The object which has the property.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:FluentIL.TypeExtensions.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="obj">The object to set the property on.</param>
            <param name="propertyName">The name of the property to set.</param>
            <param name="propertyValue">The value to set the property to.</param>
        </member>
        <member name="M:FluentIL.TypeExtensions.PropertyValuesAsString(System.Object)">
            <summary>
            Returns the representation an object as a string containing the properties with values.
            </summary>
            <param name="obj">The object.</param>
            <returns>String containing the object property values.</returns>
        </member>
        <member name="M:FluentIL.TypeExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks if an <see cref="T:System.Collections.Generic.IEnumerable`1"/> list is null or empty.
            </summary>
            <typeparam name="T">The list type.</typeparam>
            <param name="list">The list instance.</param>
            <returns>True if the list is null or empty.</returns>
        </member>
        <member name="M:FluentIL.TypeExtensions.IsNullOrEmpty``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Checks if a <see cref="T:System.Collections.Generic.IDictionary`2"/> is null or empty.
            </summary>
            <typeparam name="TKey">The dictionary key type.</typeparam>
            <typeparam name="TValue">The dictionary value type.</typeparam>
            <param name="dictionary">The dictionary instance.</param>
            <returns>True if the dictionary is null or empty.</returns>
        </member>
        <member name="M:FluentIL.TypeExtensions.IsDelegate(System.Type)">
            <summary>
            Checks if a <see cref="T:System.Type"/> is a delegate.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if it is; otherwise false.</returns>
        </member>
        <member name="T:FluentIL.IAdaptedLabel">
            <summary>
            Defines the adapted label interface.
            </summary>
        </member>
        <member name="P:FluentIL.IAdaptedLabel.Label">
            <summary>
            Gets or sets the adapted label.
            </summary>
        </member>
        <member name="T:FluentIL.IAdaptedLocal">
            <summary>
            Defines an adapted object.
            </summary>
        </member>
        <member name="P:FluentIL.IAdaptedLocal.Local">
            <summary>
            Gets or sets the adapted local object.
            </summary>
        </member>
        <member name="T:FluentIL.IAssemblyBuilder">
            <summary>
            Defines the assembly builder interface.
            </summary>
        </member>
        <member name="M:FluentIL.IAssemblyBuilder.NewDynamicModule(System.String)">
            <summary>
            Creates a module.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <returns>A <see cref="T:FluentIL.IModuleBuilder"/> instance.</returns>
        </member>
        <member name="T:FluentIL.IConstructorBuilder">
            <summary>
            Defines the Constructor builder interface.
            </summary>
        </member>
        <member name="P:FluentIL.IConstructorBuilder.MethodAttributes">
            <summary>
            Gets or sets the methods attributes.
            </summary>
        </member>
        <member name="M:FluentIL.IConstructorBuilder.Body">
            <summary>
            Gets the constructors body emitter.
            </summary>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IConstructorBuilder.CallingConvention(System.Reflection.CallingConventions)">
            <summary>
            Sets the constructors calling convention.
            </summary>
            <param name="callingConvention">The calling convention.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IConstructorBuilder.Param(System.Type,System.String,System.Reflection.ParameterAttributes)">
            <summary>
            Defines a constructor parameter.
            </summary>
            <param name="parameterType">The parameters type.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="attrs">The parameters attributes.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IConstructorBuilder.Param(FluentIL.IGenericParameterBuilder,System.String,System.Reflection.ParameterAttributes)">
            <summary>
            Defines a constructor parameter.
            </summary>
            <param name="genericParameter">The parameters generic type.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="attrs">The parameters attributes.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IConstructorBuilder.Param(System.Action{FluentIL.IParameterBuilder})">
            <summary>
            Defines a constructor parameter.
            </summary>
            <param name="action">Parameter builder action.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IConstructorBuilder.Params(System.Type[])">
            <summary>
            Defines the constructor parameters.
            </summary>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IConstructorBuilder.SetMethodAttributes(System.Reflection.MethodAttributes)">
            <summary>
            Sets the constructors atrributes.
            </summary>
            <param name="attributes">The attributes.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
            <summary>
            Sets the constructors implementation attributes.
            </summary>
            <param name="attributes">The attributes.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IConstructorBuilder.Define">
            <summary>
            Defines the constructor.
            </summary>
            <returns>A <see cref="T:System.Reflection.Emit.ConstructorBuilder"/> instance.</returns>
        </member>
        <member name="T:FluentIL.IDebugOutput">
            <summary>
            Defines the debug output interface.
            </summary>
        </member>
        <member name="M:FluentIL.IDebugOutput.Write(System.String,System.Object[])">
            <summary>
            Writes to debug output.
            </summary>
            <param name="format">A string format.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:FluentIL.IDebugOutput.WriteLine(System.String,System.Object[])">
            <summary>
            Writes a line to debug output.
            </summary>
            <param name="format">A string format.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:FluentIL.IDebugOutput.WriteColor(System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Writes to debug output in a specified colour.
            </summary>
            <param name="color">The colour of the string.</param>
            <param name="format">A string format.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:FluentIL.IDebugOutput.WriteLineColor(System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Writes a line to debug output in a specified colour.
            </summary>
            <param name="color">The colour of the string.</param>
            <param name="format">A string format.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="T:FluentIL.IDynamicMethodBuilder">
            <summary>
            Defines the dynamic method builder interface.
            </summary>
        </member>
        <member name="M:FluentIL.IDynamicMethodBuilder.Body">
            <summary>
            Gets the methods body.
            </summary>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IDynamicMethodBuilder.Body(System.Action{FluentIL.IEmitter})">
            <summary>
            Provides access to the method body.
            </summary>
            <param name="action">An action to emit the body IL.</param>
            <returns>The <see cref="T:FluentIL.IDynamicMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IDynamicMethodBuilder.Returns``1">
            <summary>
            Sets the methods return type.
            </summary>
            <typeparam name="TReturn">The return type.</typeparam>
            <returns>The <see cref="T:FluentIL.IDynamicMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IDynamicMethodBuilder.Returns(System.Type)">
            <summary>
            Sets the methods return type.
            </summary>
            <param name="returnType">The return type.</param>
            <returns>The <see cref="T:FluentIL.IDynamicMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IDynamicMethodBuilder.Param``1(System.String,System.Reflection.ParameterAttributes)">
            <summary>
            Adds a parameter to the method.
            </summary>
            <typeparam name="TParam">The parameters type.</typeparam>
            <param name="parameterName">The parameters name.</param>
            <param name="attrs">The parameters attributes.</param>
            <returns>The <see cref="T:FluentIL.IDynamicMethodBuilder"/> instsnce.</returns>
        </member>
        <member name="M:FluentIL.IDynamicMethodBuilder.Param(System.Type,System.String,System.Reflection.ParameterAttributes)">
            <summary>
            Adds a parameter to the method.
            </summary>
            <param name="parameterType">The parameters type.</param>
            <param name="parameterName">The parameters name.</param>
            <param name="attrs">The parameters attributes.</param>
            <returns>The <see cref="T:FluentIL.IDynamicMethodBuilder"/> instsnce.</returns>
        </member>
        <member name="M:FluentIL.IDynamicMethodBuilder.Param(System.Action{FluentIL.IParameterBuilder})">
            <summary>
            Adds a parameter to the method.
            </summary>
            <param name="action">A parameter builder action.</param>
            <returns>The <see cref="T:FluentIL.IDynamicMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IDynamicMethodBuilder.Param(FluentIL.IParameterBuilder)">
            <summary>
            Adds a parameter to the method.
            </summary>
            <param name="parameter">A parameter builder.</param>
            <returns>The <see cref="T:FluentIL.IDynamicMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IDynamicMethodBuilder.Params(System.Type[])">
            <summary>
            Defines the methods parameters.
            </summary>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The <see cref="T:FluentIL.IDynamicMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IDynamicMethodBuilder.Params(FluentIL.IParameterBuilder[])">
            <summary>
            Defines the methods parameters.
            </summary>
            <param name="parameters">A list of parameter builders.</param>
            <returns>The <see cref="T:FluentIL.IDynamicMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IDynamicMethodBuilder.CreateParam``1(System.String,System.Reflection.ParameterAttributes)">
            <summary>
            Creates a parameter.
            </summary>
            <typeparam name="TParam">The parameters type.</typeparam>
            <param name="parameterName">The parameters name.</param>
            <param name="attrs">The parameters attributes.</param>
            <returns>The <see cref="T:FluentIL.IParameterBuilder"/> instsnce.</returns>
        </member>
        <member name="M:FluentIL.IDynamicMethodBuilder.CreateParam(System.Type,System.String,System.Reflection.ParameterAttributes)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="parameterType">The parameters type.</param>
            <param name="parameterName">The parameters name.</param>
            <param name="attrs">The parameters attribute.</param>
            <returns>The <see cref="T:FluentIL.IParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IDynamicMethodBuilder.Define">
            <summary>
            Defines the dynamic method.
            </summary>
            <returns>A <see cref="T:System.Reflection.Emit.DynamicMethod"/> instance.</returns>
        </member>
        <member name="T:FluentIL.IEmitter">
            <summary>
            Defines the emitter interface.
            </summary>
        </member>
        <member name="P:FluentIL.IEmitter.ILOffset">
            <summary>
            Gets the IL offset.
            </summary>
            <returns>The offset.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.BeginCatchBlock(System.Type)">
            <summary>
            Begins a catch block.
            </summary>
            <param name="exceptionType">The exception type.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.BeginExceptFilterBlock">
            <summary>
            Begins an except filter block.
            </summary>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.BeginExceptionBlock(FluentIL.ILabel@)">
            <summary>
            Begins an exception block.
            </summary>
            <param name="label">A variable to receive a label.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.BeginExceptionBlock(FluentIL.ILabel)">
            <summary>
            Begins an exception block.
            </summary>
            <param name="label">A label.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.BeginFaultBlock">
            <summary>
            Begins a fault block.
            </summary>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.BeginFinallyBlock">
            <summary>
            Begins a finally block.
            </summary>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.BeginScope">
            <summary>
            Begins a scope.
            </summary>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.DeclareLocal(System.Type,FluentIL.ILocal@)">
            <summary>
            Declares a local.
            </summary>
            <param name="localType">The local type.</param>
            <param name="local">A variable to receive the local.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.DeclareLocal(System.Type,System.String,FluentIL.ILocal@)">
            <summary>
            Declares a local.
            </summary>
            <param name="localType">The local type.</param>
            <param name="localName">The name of the local.</param>
            <param name="local">A variable to receive the local.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.DeclareLocal(System.Type,System.Boolean,FluentIL.ILocal@)">
            <summary>
            Declares a local.
            </summary>
            <param name="localType">The local type.</param>
            <param name="pinned">A value indicating whether or not the local is pinned.</param>
            <param name="local">A variable to receive the local.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.DeclareLocal(System.Type,System.String,System.Boolean,FluentIL.ILocal@)">
            <summary>
            Declares a local.
            </summary>
            <param name="localType">The local type.</param>
            <param name="localName">The name of the local.</param>
            <param name="pinned">A value indicating whether or not the local is pinned.</param>
            <param name="local">A variable to receive the local.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.DeclareLocal(FluentIL.IGenericParameterBuilder,FluentIL.ILocal@)">
            <summary>
            Declares a local.
            </summary>
            <param name="genericParameter">A generic parameter.</param>
            <param name="local">A variable to receive the local.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.DeclareLocal(System.Type,FluentIL.IGenericParameterBuilder[],FluentIL.ILocal@)">
            <summary>
            Declares a local.
            </summary>
            <param name="localGenericTypeDefinition">The locals generic type definition.</param>
            <param name="genericParameterArgs">An array of generic parameter args.</param>
            <param name="local">A variable to receive the local.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.DeclareLocal(FluentIL.ITypeBuilder,FluentIL.ILocal@)">
            <summary>
            Declares a local.
            </summary>
            <param name="typeBuilder">A type builder.</param>
            <param name="local">A variable to receive a local.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.DeclareLocal(FluentIL.ILocal)">
            <summary>
            Declares a local.
            </summary>
            <param name="local">A local.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.DefineLabel(FluentIL.ILabel@)">
            <summary>
            Defines a label.
            </summary>
            <param name="label">A variable to receive the label.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.DefineLabel(System.String,FluentIL.ILabel@)">
            <summary>
            Defines a label.
            </summary>
            <param name="labelName">The label name.</param>
            <param name="label">A variable to receive the label.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.DefineLabel(FluentIL.ILabel)">
            <summary>
            Defines a label.
            </summary>
            <param name="label">A label.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary>
            Emits an <see cref="T:System.Reflection.Emit.OpCode"/> that accepts a <see cref="T:System.Type"/>.
            </summary>
            <param name="opcode">The <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Emit(System.Reflection.Emit.OpCode,System.String)">
            <summary>
            Emits an <see cref="T:System.Reflection.Emit.OpCode"/> that accepts a <see cref="T:System.String"/>.
            </summary>
            <param name="opcode">The <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <param name="str">The <see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Single)">
            <summary>
            Emits an <see cref="T:System.Reflection.Emit.OpCode"/> that accepts a <see cref="T:System.Single"/>.
            </summary>
            <param name="opcode">The <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <param name="arg">The <see cref="T:System.Single"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Emit(System.Reflection.Emit.OpCode,System.SByte)">
            <summary>
            Emits an <see cref="T:System.Reflection.Emit.OpCode"/> that accepts a <see cref="T:System.SByte"/>.
            </summary>
            <param name="opcode">The <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <param name="arg">The <see cref="T:System.SByte"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
            <summary>
            Emits an <see cref="T:System.Reflection.Emit.OpCode"/> that accepts a <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="opcode">The <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <param name="meth">The <see cref="T:System.Reflection.MethodInfo"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
            <summary>
            Emits an <see cref="T:System.Reflection.Emit.OpCode"/> that accepts a <see cref="T:System.Reflection.FieldInfo"/>.
            </summary>
            <param name="opcode">The <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <param name="field">The <see cref="T:System.Reflection.FieldInfo"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Emit(System.Reflection.Emit.OpCode,FluentIL.IFieldBuilder)">
            <summary>
            Emits an <see cref="T:System.Reflection.Emit.OpCode"/> that accepts a <see cref="T:FluentIL.IFieldBuilder"/>.
            </summary>
            <param name="opcode">The <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <param name="field">The <see cref="T:FluentIL.IFieldBuilder"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Emit(System.Reflection.Emit.OpCode,FluentIL.ILabel[])">
            <summary>
            Emits an <see cref="T:System.Reflection.Emit.OpCode"/> that accepts a <see cref="T:FluentIL.ILabel"/> array.
            </summary>
            <param name="opcode">The <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <param name="labels">The <see cref="T:FluentIL.ILabel"/> array.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
            <summary>
            Emits an <see cref="T:System.Reflection.Emit.OpCode"/> that accepts a <see cref="T:System.Reflection.Emit.SignatureHelper"/>.
            </summary>
            <param name="opcode">The <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <param name="signature">The <see cref="T:System.Reflection.Emit.SignatureHelper"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Emit(System.Reflection.Emit.OpCode,FluentIL.ILocal)">
            <summary>
            Emits an <see cref="T:System.Reflection.Emit.OpCode"/> that accepts a <see cref="T:FluentIL.ILocal"/>.
            </summary>
            <param name="opcode">The <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <param name="local">The <see cref="T:FluentIL.ILocal"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
            <summary>
            Emits an <see cref="T:System.Reflection.Emit.OpCode"/> that accepts a <see cref="T:System.Reflection.ConstructorInfo"/>.
            </summary>
            <param name="opcode">The <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <param name="con">The <see cref="T:System.Reflection.ConstructorInfo"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Int64)">
            <summary>
            Emits an <see cref="T:System.Reflection.Emit.OpCode"/> that accepts a <see cref="T:System.Int64"/>.
            </summary>
            <param name="opcode">The <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <param name="arg">The <see cref="T:System.Int64"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Int32)">
            <summary>
            Emits an <see cref="T:System.Reflection.Emit.OpCode"/> that accepts a <see cref="T:System.Int32"/>.
            </summary>
            <param name="opcode">The <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <param name="arg">The <see cref="T:System.Int32"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Int16)">
            <summary>
            Emits an <see cref="T:System.Reflection.Emit.OpCode"/> that accepts a <see cref="T:System.Int16"/>.
            </summary>
            <param name="opcode">The <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <param name="arg">The <see cref="T:System.Int16"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Double)">
            <summary>
            Emits an <see cref="T:System.Reflection.Emit.OpCode"/> that accepts a <see cref="T:System.Double"/>.
            </summary>
            <param name="opcode">The <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <param name="arg">The <see cref="T:System.Double"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Byte)">
            <summary>
            Emits an <see cref="T:System.Reflection.Emit.OpCode"/> that accepts a <see cref="T:System.Byte"/>.
            </summary>
            <param name="opcode">The <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <param name="arg">The <see cref="T:System.Byte"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Emit(System.Reflection.Emit.OpCode)">
            <summary>
            Emits an <see cref="T:System.Reflection.Emit.OpCode"/>.
            </summary>
            <param name="opcode">The <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Emit(System.Reflection.Emit.OpCode,FluentIL.ILabel)">
            <summary>
            Emits an <see cref="T:System.Reflection.Emit.OpCode"/> that accepts a <see cref="T:FluentIL.ILabel"/>.
            </summary>
            <param name="opcode">The <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <param name="label">The <see cref="T:FluentIL.ILabel"/>.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.EmitCall(System.Reflection.Emit.OpCode,System.Func{System.Reflection.MethodInfo})">
            <summary>
            Emits IL to perform a <see cref="F:System.Reflection.Emit.OpCodes.Call"/>.
            </summary>
            <param name="opcode">The <see cref="F:System.Reflection.Emit.OpCodes.Call"/> opcode.</param>
            <param name="action">Action to obtain method to call.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Emits IL to perform a <see cref="F:System.Reflection.Emit.OpCodes.Call"/>.
            </summary>
            <param name="opcode">The <see cref="F:System.Reflection.Emit.OpCodes.Call"/> opcode.</param>
            <param name="methodInfo">The method to call.</param>
            <param name="optionalParameterTypes">Optional parameter types.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
            <summary>
            Emits IL to perform a <see cref="F:System.Reflection.Emit.OpCodes.Calli"/>.
            </summary>
            <param name="opcode">The <see cref="F:System.Reflection.Emit.OpCodes.Calli"/> opcode.</param>
            <param name="callingConvention">The calling convention.</param>
            <param name="returnType">The return type.</param>
            <param name="parameterTypes">The parameter types.</param>
            <param name="optionalParameterTypes">Any optinal parameter types.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.EmitWriteLine(System.Reflection.FieldInfo)">
            <summary>
            Emits IL to write a <see cref="T:System.Reflection.FieldInfo"/> to stdout.
            </summary>
            <param name="fld">The field toe write.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.EmitWriteLine(System.String)">
            <summary>
            Emits IL to write a <see cref="T:System.String"/> to stdout.
            </summary>
            <param name="value">The string value to write.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.EmitWriteLine(FluentIL.ILocal)">
            <summary>
            Emits IL to write a <see cref="T:FluentIL.ILocal"/> to stdout.
            </summary>
            <param name="local">The local variable to write out.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.EndExceptionBlock">
            <summary>
            Emits an end exception block.
            </summary>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.EndScope">
            <summary>
            Emits an end scope.
            </summary>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.MarkLabel(FluentIL.ILabel)">
            <summary>
            Marks a label.
            </summary>
            <param name="label">The labal to mark.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.ThrowException(System.Type)">
            <summary>
            Emits a throw exception.
            </summary>
            <param name="excType">The type of exception to throw.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.UsingNamespace(System.String)">
            <summary>
            Emits a using namespace.
            </summary>
            <param name="usingNamespace">The namespace to emit.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Comment(System.String)">
            <summary>
            Emits nothing. Used to allow comments to be added to a debug output class.
            </summary>
            <param name="comment">A comment.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEmitter.Defer(System.Action{FluentIL.IEmitter})">
            <summary>
            Defers an operation.
            </summary>
            <param name="action">The action.</param>
            <returns>The <see cref="T:FluentIL.IEmitter"/> instance.</returns>
        </member>
        <member name="T:FluentIL.IEventBuilder">
            <summary>
            Defines the event builder interface.
            </summary>
        </member>
        <member name="P:FluentIL.IEventBuilder.EventAttributes">
            <summary>
            Gets the events attributes.
            </summary>
        </member>
        <member name="M:FluentIL.IEventBuilder.SpecialName">
            <summary>
            Adds the 'SpecialName' attribute.
            </summary>
            <returns>The <see cref="T:FluentIL.IEventBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEventBuilder.RTSpecialName">
            <summary>
            Adds the 'RTSpecialName' attribute.
            </summary>
            <returns>The <see cref="T:FluentIL.IEventBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IEventBuilder.Define">
            <summary>
            Defines the <see cref="T:System.Reflection.Emit.EventBuilder"/>.
            </summary>
            <returns>An <see cref="T:System.Reflection.Emit.EventBuilder"/> instance.</returns>
        </member>
        <member name="T:FluentIL.IFieldBuilder">
            <summary>
            Defines the field builder interface.
            </summary>
        </member>
        <member name="P:FluentIL.IFieldBuilder.FieldName">
            <summary>
            Gets the fields name.
            </summary>
        </member>
        <member name="P:FluentIL.IFieldBuilder.FieldType">
            <summary>
            Gets the fields type.
            </summary>
        </member>
        <member name="P:FluentIL.IFieldBuilder.FieldAttributes">
            <summary>
            Gets or sets the field attributes.
            </summary>
        </member>
        <member name="M:FluentIL.IFieldBuilder.Attributes(System.Reflection.FieldAttributes)">
            <summary>
            Sets the fields attributes.
            </summary>
            <param name="attributes">The field attributes.</param>
            <returns>A <see cref="T:System.Reflection.Emit.FieldBuilder"/>.</returns>
        </member>
        <member name="M:FluentIL.IFieldBuilder.Define">
            <summary>
            Defines the field builder.
            </summary>
            <returns>A <see cref="T:System.Reflection.Emit.FieldBuilder"/>.</returns>
        </member>
        <member name="T:FluentIL.IGenericParameterBuilder">
            <summary>
            Defines the generic parameter builder interface.
            </summary>
        </member>
        <member name="P:FluentIL.IGenericParameterBuilder.Attributes">
            <summary>
            Gets or sets the generic parameters attributes.
            </summary>
        </member>
        <member name="P:FluentIL.IGenericParameterBuilder.ParameterName">
            <summary>
            Gets the generic parameters name.
            </summary>
        </member>
        <member name="M:FluentIL.IGenericParameterBuilder.BaseType``1">
            <summary>
            Sets the base type that a type must inherit in order to be substituted for the type parameter.
            </summary>
            <typeparam name="T">The base type.</typeparam>
            <returns>The <see cref="T:FluentIL.IGenericParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IGenericParameterBuilder.BaseType(System.Type)">
            <summary>
            Sets the base type that a type must inherit in order to be substituted for the type parameter.
            </summary>
            <param name="baseType">The base type.</param>
            <returns>The <see cref="T:FluentIL.IGenericParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IGenericParameterBuilder.InterfaceType``1">
            <summary>
            Sets the interfaces a type must implement in order to be substituted for the type parameter.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
            <returns>The <see cref="T:FluentIL.IGenericParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IGenericParameterBuilder.InterfaceType(System.Type)">
            <summary>
            Sets the interfaces a type must implement in order to be substituted for the type parameter.
            </summary>
            <param name="interfaceType">The interface type.</param>
            <returns>The <see cref="T:FluentIL.IGenericParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IGenericParameterBuilder.Covariant">
            <summary>
            The generic type parameter is covariant. A covariant type parameter can appear as the result
            type of a method, the type of a read-only field, a declared base type, or an implemented interface.
            </summary>
            <returns>The <see cref="T:FluentIL.IGenericParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IGenericParameterBuilder.Contravariant">
            <summary>
            The generic type parameter is contravariant. A contravariant type parameter can appear as a parameter
            type in method signatures.
            </summary>
            <returns>The <see cref="T:FluentIL.IGenericParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IGenericParameterBuilder.DefaultConstructor">
            <summary>
            A type can be substituted for the generic type parameter only if it has a parameterless constructor.
            </summary>
            <returns>The <see cref="T:FluentIL.IGenericParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IGenericParameterBuilder.NotNullableValueType">
            <summary>
            A type can be substituted for the generic type parameter only if it is a value type and is not nullable.
            </summary>
            <returns>The <see cref="T:FluentIL.IGenericParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IGenericParameterBuilder.ReferenceType">
            <summary>
            A type can be substituted for the generic type parameter only if it is a reference type.
            </summary>
            <returns>The <see cref="T:FluentIL.IGenericParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IGenericParameterBuilder.AsType">
            <summary>
            Defines the generic parameter.
            </summary>
            <returns>The <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"/> instance.</returns>
        </member>
        <member name="T:FluentIL.ILabel">
            <summary>
            Defines the label interface.
            </summary>
        </member>
        <member name="P:FluentIL.ILabel.Name">
            <summary>
            Gets or sets the name of the label.
            </summary>
        </member>
        <member name="T:FluentIL.ILocal">
            <summary>
            Defines the local variable interface.
            </summary>
        </member>
        <member name="P:FluentIL.ILocal.Name">
            <summary>
            Gets the name of the local.
            </summary>
        </member>
        <member name="P:FluentIL.ILocal.IsPinned">
            <summary>
            Gets a value indicating whether ot not the local is pinned.
            </summary>
        </member>
        <member name="P:FluentIL.ILocal.LocalIndex">
            <summary>
            Gets the locals index.
            </summary>
        </member>
        <member name="P:FluentIL.ILocal.LocalType">
            <summary>
            Gets the locals type.
            </summary>
        </member>
        <member name="T:FluentIL.IMethodBuilder">
            <summary>
            Defines the method builder interface.
            </summary>
        </member>
        <member name="P:FluentIL.IMethodBuilder.Attributes">
            <summary>
            Gets or sets the methods attributes.
            </summary>
        </member>
        <member name="M:FluentIL.IMethodBuilder.Body">
            <summary>
            Gets the methods body.
            </summary>
            <returns>A <see cref="T:FluentIL.IEmitter"/>.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.Body(System.Action{FluentIL.IEmitter})">
            <summary>
            Provides access to the method body.
            </summary>
            <param name="action">An action to emit the body IL.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.MethodAttributes(System.Reflection.MethodAttributes)">
            <summary>
            Sets the methods atrributes.
            </summary>
            <param name="attributes">The method attributes.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.CallingConvention(System.Reflection.CallingConventions)">
            <summary>
            Sets the calling convention.
            </summary>
            <param name="convention">The calling convention.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.Returns``1">
            <summary>
            Sets the methods return type.
            </summary>
            <typeparam name="TReturn">The return type.</typeparam>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.Returns(System.Type)">
            <summary>
            Sets the methods return type.
            </summary>
            <param name="returnType">The return type.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.Returns(FluentIL.IGenericParameterBuilder)">
            <summary>
            Sets the methods return type.
            </summary>
            <param name="genericType">The return type.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.Returns(System.Type,FluentIL.IGenericParameterBuilder[])">
            <summary>
            Sets the methods return type.
            </summary>
            <param name="genericTypeDefinition">A generic type definition.</param>
            <param name="genericTypes">A list of generic type parameters.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.Param``1(System.String,System.Reflection.ParameterAttributes)">
            <summary>
            Adds a parameter to the method.
            </summary>
            <typeparam name="TParam">The parameters type.</typeparam>
            <param name="parameterName">The parameters name.</param>
            <param name="attrs">The parameters attributes.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instsnce.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.Param(System.Type,System.String,System.Reflection.ParameterAttributes)">
            <summary>
            Adds a parameter to the method.
            </summary>
            <param name="parameterType">The parameters type.</param>
            <param name="parameterName">The parameters name.</param>
            <param name="attrs">The parameters attribute.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.Param(System.Action{FluentIL.IParameterBuilder})">
            <summary>
            Adds a parameter to the method.
            </summary>
            <param name="action">A parameter builder action.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.Param(FluentIL.IParameterBuilder)">
            <summary>
            Adds a parameter to the method.
            </summary>
            <param name="parameter">A parameter builder.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.Params(System.Type[])">
            <summary>
            Defines the methods parameters.
            </summary>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.Params(FluentIL.IParameterBuilder[])">
            <summary>
            Defines the methods parameters.
            </summary>
            <param name="parameters">A list of parameter builders.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.CreateParam``1(System.String,System.Reflection.ParameterAttributes)">
            <summary>
            Creates a parameter.
            </summary>
            <typeparam name="TParam">The parameters type.</typeparam>
            <param name="parameterName">The parameters name.</param>
            <param name="attrs">The parameters attributes.</param>
            <returns>The <see cref="T:FluentIL.IParameterBuilder"/> instsnce.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.CreateParam(System.Type,System.String,System.Reflection.ParameterAttributes)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="parameterType">The parameters type.</param>
            <param name="parameterName">The parameters name.</param>
            <param name="attrs">The parameters attribute.</param>
            <returns>The <see cref="T:FluentIL.IParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.HasParameter(System.String)">
            <summary>
            Checks if the method has a named parameter.
            </summary>
            <param name="parameterName">The parameter name.</param>
            <returns>True if it has; otherwise false.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.GetParameter(System.String)">
            <summary>
            Gets a named parameter.
            </summary>
            <param name="parameterName">The parameter name.</param>
            <returns>A <see cref="T:FluentIL.IParameterBuilder"/> if found; otherwise null.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.NewGenericParameter(System.String)">
            <summary>
            Defines a generic parameter.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <returns>The <see cref="T:FluentIL.IGenericParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.NewGenericParameter(System.String,System.Action{FluentIL.IGenericParameterBuilder})">
            <summary>
            Defines a generic parameter.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="parameterBuilder">A generic parameter builder action. </param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.NewGenericParameters(System.String[])">
            <summary>
            Defines generic parameters.
            </summary>
            <param name="parameterNames">The names of the parameters.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.NewGenericParameters(System.String[],System.Action{FluentIL.IGenericParameterBuilder[]})">
            <summary>
            Defines generic parameters.
            </summary>
            <param name="parameterNames">The names of the parameters.</param>
            <param name="action">The action to update the parameters.</param>
            <returns>The <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.GetGenericParameter(System.String)">
            <summary>
            Gets a generic parameter.
            </summary>
            <param name="parameterName">The parameter name.</param>
            <returns>A <se cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"/> instance if found; otherwise null.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
            <summary>
            Sets a custom attribute.
            </summary>
            <param name="customAttribute">The custom attribute.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
            <summary>
            Sets the methods implementation flags.
            </summary>
            <param name="attributes">The attributes.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IMethodBuilder.Define">
            <summary>
            Defines the method.
            </summary>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> instance.</returns>
        </member>
        <member name="T:FluentIL.IModuleBuilder">
            <summary>
            Defines a module builder.
            </summary>
        </member>
        <member name="M:FluentIL.IModuleBuilder.NewType(System.String)">
            <summary>
            Defines a type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <returns>A <see cref="T:FluentIL.ITypeBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IModuleBuilder.NewGlobalMethod(System.String)">
            <summary>
            Defines a global method.
            </summary>
            <param name="methodName">The name of the method.</param>
            <returns>A <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IModuleBuilder.CreateGlobalFunctions">
            <summary>
            Creates any global methods defined in the module.
            </summary>
            <returns>A <see cref="T:FluentIL.IModuleBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IModuleBuilder.GetMethod(System.String)">
            <summary>
            Gets a global method defined on the module.
            </summary>
            <param name="methodName">The name of the method.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> instance if found; otherwise null.</returns>
        </member>
        <member name="T:FluentIL.IParameterBuilder">
            <summary>
            Defines the parameter builder interface.
            </summary>
        </member>
        <member name="M:FluentIL.IParameterBuilder.Type``1">
            <summary>
            Specifies the parameters type.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <returns>The <see cref="T:FluentIL.IParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IParameterBuilder.Type(System.Type)">
            <summary>
            Specifies the parameters type.
            </summary>
            <param name="parameterType">The parameters type.</param>
            <returns>The <see cref="T:FluentIL.IParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IParameterBuilder.Name(System.String)">
            <summary>
            Specifies the parameters name.
            </summary>
            <param name="parameterName">The parameters name.</param>
            <returns>The <see cref="T:FluentIL.IParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IParameterBuilder.In">
            <summary>
            Specifies that the parameter is an input parameter.
            </summary>
            <returns>The <see cref="T:FluentIL.IParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IParameterBuilder.Out">
            <summary>
            Specifies that the parameter is an output parameter.
            </summary>
            <returns>The <see cref="T:FluentIL.IParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IParameterBuilder.Lcid">
            <summary>
            Specifies that the parameter is a locale identifier (lcid).
            </summary>
            <returns>The <see cref="T:FluentIL.IParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IParameterBuilder.Retval">
            <summary>
            Specifies that the parameter is a return value.
            </summary>
            <returns>The <see cref="T:FluentIL.IParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IParameterBuilder.Optional">
            <summary>
            Specifies that the parameter is optional.
            </summary>
            <returns>The <see cref="T:FluentIL.IParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IParameterBuilder.HasDefault">
            <summary>
            Specifies that the parameter has a default value.
            </summary>
            <returns>The <see cref="T:FluentIL.IParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IParameterBuilder.HasFieldMarshal">
            <summary>
            Specifies that the parameter has field marshaling information.
            </summary>
            <returns>The <see cref="T:FluentIL.IParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
            <summary>
            Sets a custom attribute.
            </summary>
            <param name="attributeBuilder">The custom attribute.</param>
            <returns>The <see cref="T:FluentIL.IParameterBuilder"/> instance.</returns>
        </member>
        <member name="T:FluentIL.IPropertyBuilder">
            <summary>
            Defines the property builder interface.
            </summary>
        </member>
        <member name="P:FluentIL.IPropertyBuilder.PropertyAttributes">
            <summary>
            Gets or sets the property attributes.
            </summary>
        </member>
        <member name="P:FluentIL.IPropertyBuilder.SetMethod">
            <summary>
            Gets or sets the set method.
            </summary>
        </member>
        <member name="P:FluentIL.IPropertyBuilder.GetMethod">
            <summary>
            Gets or sets the get method.
            </summary>
        </member>
        <member name="M:FluentIL.IPropertyBuilder.CallingConvention(System.Reflection.CallingConventions)">
            <summary>
            Sets the calling convention.
            </summary>
            <param name="callingConvention">The calling convention.</param>
            <returns>The <see cref="T:FluentIL.IPropertyBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IPropertyBuilder.Attributes(System.Reflection.PropertyAttributes)">
            <summary>
            Sets the attributes for the property.
            </summary>
            <param name="attributes">The attributes to set.</param>
            <returns>The <see cref="T:FluentIL.IPropertyBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IPropertyBuilder.Getter(System.Action{FluentIL.IMethodBuilder})">
            <summary>
            Gets or adds the property get method builder.
            </summary>
            <param name="action">A method builder action.</param>
            <returns>The <see cref="T:FluentIL.IPropertyBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IPropertyBuilder.Getter">
            <summary>
            Gets or adds the property get method builder.
            </summary>
            <returns>The get methods <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IPropertyBuilder.Setter(System.Action{FluentIL.IMethodBuilder})">
            <summary>
            Gets or adds the property set method builder.
            </summary>
            <param name="action">A method builder action.</param>
            <returns>The <see cref="T:FluentIL.IPropertyBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IPropertyBuilder.Setter">
            <summary>
            Gets or adds the property set method builder.
            </summary>
            <returns>The set methods <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.IPropertyBuilder.Define">
            <summary>
            Defines the property.
            </summary>
            <returns>A <see cref="T:System.Reflection.Emit.PropertyBuilder"/>.</returns>
        </member>
        <member name="T:FluentIL.ITypeBuilder">
            <summary>
            Defines an interface for builder types.
            </summary>
        </member>
        <member name="P:FluentIL.ITypeBuilder.TypeName">
            <summary>
            Gets the type name.
            </summary>
        </member>
        <member name="P:FluentIL.ITypeBuilder.TypeAttributes">
            <summary>
            Gets or sets the <see cref="T:FluentIL.ITypeBuilder"/> attributes.
            </summary>
        </member>
        <member name="P:FluentIL.ITypeBuilder.Interfaces">
            <summary>
            Gets the implemented interfaces.
            </summary>
        </member>
        <member name="M:FluentIL.ITypeBuilder.Attributes(System.Reflection.TypeAttributes)">
            <summary>
            Sets the <see cref="T:FluentIL.ITypeBuilder"/> attributes.
            </summary>
            <param name="attributes">The type attributes.</param>
            <returns>The <see cref="T:FluentIL.ITypeBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.InheritsFrom``1">
            <summary>
            Sets the <see cref="T:FluentIL.ITypeBuilder"/> base type.
            </summary>
            <typeparam name="T">The base type.</typeparam>
            <returns>The <see cref="T:FluentIL.ITypeBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.InheritsFrom(System.Type)">
            <summary>
            Sets the <see cref="T:FluentIL.ITypeBuilder"/> base type.
            </summary>
            <param name="baseType">The base type.</param>
            <returns>The <see cref="T:FluentIL.ITypeBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.Implements``1">
            <summary>
            Implements an interface on the <see cref="T:FluentIL.ITypeBuilder"/> instance.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
            <returns>The <see cref="T:FluentIL.ITypeBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.Implements(System.Type)">
            <summary>
            Implements an interface on the <see cref="T:FluentIL.ITypeBuilder"/> instance.
            </summary>
            <param name="interfaceType">The interface type.</param>
            <returns>The <see cref="T:FluentIL.ITypeBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.NewConstructor">
            <summary>
            Defines a new constructor.
            </summary>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.NewConstructor(System.Action{FluentIL.IConstructorBuilder})">
            <summary>
            Defines a new constructor.
            </summary>
            <param name="constructorBuilder">A <see cref="T:FluentIL.IConstructorBuilder"/>.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.NewDefaultConstructor(System.Reflection.MethodAttributes)">
            <summary>
            Defines a default constructor.
            </summary>
            <param name="constructorAttributes">The constructors method attributes.</param>
            <returns>The <see cref="T:FluentIL.IConstructorBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.NewField(System.String,System.Type)">
            <summary>
            Defines a new field.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="fieldType">The fields type.</param>
            <returns>The <see cref="T:FluentIL.IFieldBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.NewField(System.String,System.Type,FluentIL.IGenericParameterBuilder[])">
            <summary>
            Defines a new field as a generic type of.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="fieldType">The fields generic type definition.</param>
            <param name="genericParameters">An array of generic type parameters.</param>
            <returns>The <see cref="T:FluentIL.IFieldBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.NewField(System.String,FluentIL.IGenericParameterBuilder)">
            <summary>
            Defines a new field.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="genericParameter">A generic type parameter.</param>
            <returns>The <see cref="T:FluentIL.IFieldBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.NewField(System.String,System.Type,System.Action{FluentIL.IFieldBuilder})">
            <summary>
            Defines a new field.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="fieldType">The fields type.</param>
            <param name="fieldBuilder">A <see cref="T:FluentIL.IFieldBuilder"/>.</param>
            <returns>The <see cref="T:FluentIL.ITypeBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.NewMethod(System.String,System.Action{FluentIL.IMethodBuilder})">
            <summary>
            Defines a method.
            </summary>
            <param name="methodName">The name of the method.</param>
            <param name="action">A <see cref="T:FluentIL.IMethodBuilder"/> action.</param>
            <returns>The <see cref="T:FluentIL.ITypeBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.NewMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type)">
            <summary>
            Defines a method.
            </summary>
            <param name="methodName">The name of the method.</param>
            <param name="attributes">The methods attributes.</param>
            <param name="callingConvention">The method calling convention.</param>
            <param name="returnType">The methods return type.</param>
            <returns>A <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.NewMethod(System.String)">
            <summary>
            Defines a method.
            </summary>
            <param name="methodName">The name of the method.</param>
            <returns>A <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.NewProperty(System.String,System.Type)">
            <summary>
            Defines a property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyType">The properties type.</param>
            <returns>A <see cref="T:FluentIL.IPropertyBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.NewProperty(System.String,System.Type,System.Action{FluentIL.IPropertyBuilder})">
            <summary>
            Defines a property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyType">The properties type.</param>
            <param name="propertyBuilder">A <see cref="T:FluentIL.IPropertyBuilder"/> action.</param>
            <returns>The <see cref="T:FluentIL.ITypeBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.NewEvent(System.String,System.Type)">
            <summary>
            Defines an event.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="eventType">The events type.</param>
            <returns>The <see cref="T:FluentIL.IEventBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.NewEvent(System.String,System.Type,System.Action{FluentIL.IEventBuilder})">
            <summary>
            Defines an event.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="eventType">The events type.</param>
            <param name="eventBuilder">An <see cref="T:FluentIL.IEventBuilder"/> action.</param>
            <returns>The <see cref="T:FluentIL.ITypeBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.NewGenericParameter(System.String)">
            <summary>
            Defines a generic parameter.
            </summary>
            <param name="parameterName">The name of the generic parameter.</param>
            <returns>The <see cref="T:FluentIL.IGenericParameterBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.NewGenericParameter(System.String,System.Action{FluentIL.IGenericParameterBuilder})">
            <summary>
            Adds a new generic type parameter to the type.
            </summary>
            <param name="parameterName">The name of the generic parameter.</param>
            <param name="parameterBuilder">A <see cref="T:FluentIL.IGenericParameterBuilder"/> action.</param>
            <returns>The <see cref="T:FluentIL.ITypeBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.GetGenericParameterType(System.String)">
            <summary>
            Gets a generic parameter type.
            </summary>
            <param name="parameterName">The name of the generic parameter.</param>
            <returns>A <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.NewNestedType(System.String)">
            <summary>
            Defines a nest type.
            </summary>
            <param name="typeName">The type name.</param>
            <returns>The <see cref="T:FluentIL.ITypeBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
            <summary>
            Sets a custom attribute.
            </summary>
            <param name="customAttribute">The custom attribute.</param>
            <returns>The <see cref="T:FluentIL.ITypeBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.Define">
            <summary>
            Defines the <see cref="T:System.Reflection.Emit.TypeBuilder"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.Emit.TypeBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.ITypeBuilder.CreateType">
            <summary>
            Creates the actual type.
            </summary>
            <returns>A <see cref="T:System.Type"/> instance.</returns>
        </member>
        <member name="T:FluentIL.TypeFactory">
            <summary>
            Represents a type factory.
            </summary>
        </member>
        <member name="F:FluentIL.TypeFactory.instance">
            <summary>
            The default <see cref="T:FluentIL.TypeFactory"/> instance.
            </summary>
        </member>
        <member name="F:FluentIL.TypeFactory.assemblyCache">
            <summary>
            The assemlby cache.
            </summary>
        </member>
        <member name="F:FluentIL.TypeFactory.assemblyBuilder">
            <summary>
            The assembly builder.
            </summary>
        </member>
        <member name="F:FluentIL.TypeFactory.moduleBuilder">
            <summary>
            THe module builder.
            </summary>
        </member>
        <member name="M:FluentIL.TypeFactory.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentIL.TypeFactory"/> class.
            </summary>
            <param name="assemblyName">The assembly name.</param>
            <param name="moduleName">The module name.</param>
        </member>
        <member name="P:FluentIL.TypeFactory.Default">
            <summary>
            Gets the default type factory.
            </summary>
        </member>
        <member name="M:FluentIL.TypeFactory.NewType">
            <summary>
            Defines a anonymous type.
            </summary>
            <returns>A type builder.</returns>
        </member>
        <member name="M:FluentIL.TypeFactory.NewType(System.String)">
            <summary>
            Defines a named type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <returns>A type builder.</returns>
        </member>
        <member name="M:FluentIL.TypeFactory.NewDelegateType``1(System.String,System.Type[])">
            <summary>
            Defines a named delegate type.
            </summary>
            <typeparam name="TReturn">The return type.</typeparam>
            <param name="typeName">The name of the delegate type.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The delegate type.</returns>
        </member>
        <member name="M:FluentIL.TypeFactory.NewDelegateType(System.String,System.Type[],System.Type)">
            <summary>
            Defines a named delegate type.
            </summary>
            <param name="typeName">The name of the delegate type.</param>
            <param name="parameterTypes">The parameter types.</param>
            <param name="returnType">The return type.</param>
            <returns>The delegate type.</returns>
        </member>
        <member name="M:FluentIL.TypeFactory.NewGlobalMethod(System.String)">
            <summary>
            Defines a global method.
            </summary>
            <param name="methodName">The method name.</param>
            <returns>A <see cref="T:FluentIL.IMethodBuilder"/> instance.</returns>
        </member>
        <member name="M:FluentIL.TypeFactory.CreateGlobalFunctions">
            <summary>
            Creates the global functions in a module.
            </summary>
        </member>
        <member name="M:FluentIL.TypeFactory.GetMethod(System.String)">
            <summary>
            Gets a method from the type factory.
            </summary>
            <param name="methodName">The method name.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> instance if found; otherwise null.</returns>
        </member>
        <member name="M:FluentIL.TypeFactory.GetType(System.String,System.Boolean)">
            <summary>
            Gets a type by name.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="dynamicOnly">Optional value indicating whether only dynamic assemblies should be checked or not.</param>
            <returns>A <see cref="T:System.Type"/> representing the type if found; otherwise null.</returns>
        </member>
        <member name="T:FluentIL.Utility">
            <summary>
            Various utility methods.
            </summary>
        </member>
        <member name="M:FluentIL.Utility.ThrowIfArgumentNull(System.Object,System.String)">
            <summary>
            Throws an exception if the passed argument is null.
            </summary>
            <param name="argument">The arguement.</param>
            <param name="argumentName">The argument name.</param>
        </member>
        <member name="M:FluentIL.Utility.ThrowIfArgumentNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an exception if the passed argument is null or empty.
            </summary>
            <param name="argument">The arguement.</param>
            <param name="argumentName">The argument name.</param>
        </member>
        <member name="M:FluentIL.Utility.ThrowIfArgumentNullEmptyOrWhitespace(System.String,System.String)">
            <summary>
            Throws an exception if the passed argument is null, empty or contains whitespace.
            </summary>
            <param name="argument">The arguement.</param>
            <param name="argumentName">The argument name.</param>
        </member>
    </members>
</doc>
