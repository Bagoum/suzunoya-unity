<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Suzunoya</name>
    </assembly>
    <members>
        <member name="T:Suzunoya.ADV.ADVData">
            <summary>
            All data for a (saveable) in-progress ADV game instance.
            <br/>This class should be derived for game-specific data.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVData.#ctor(Suzunoya.Data.InstanceData)">
            <summary>
            All data for a (saveable) in-progress ADV game instance.
            <br/>This class should be derived for game-specific data.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.ADVData.CurrentMap">
            <summary>
            The currently realized map.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.ADVData.UnmodifiedSaveData">
            <summary>
            While in a VN segment, put the serialized save data before entering the segment here.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.ADVData.LockedContextData">
            <summary>
            When entering a context where save/load is not allowed (<see cref="P:Suzunoya.ControlFlow.StrongBoundedContext`1.LoadSafe"/> is false),
             put the save data at that point in time in this field.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.ADVData.IsLocked">
            <summary>
            True iff the VN is currently executing a context where save/load is not allowed.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVData.GetLoadProxyInfo">
            <summary>
            If this data was saved while in a VN segment (ie. UnmodifiedSaveData is not null),
             then use UnmodifiedSaveData as the replayee save data, and use this data (or locked save data) as a loading proxy.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVData.PreserveData">
            <summary>
            When entering a top-level bounded context,
            call this method to store the save data at that point in <see cref="P:Suzunoya.ADV.ADVData.UnmodifiedSaveData"/>.
            <br/>When loading into this bounded context, the engine will start with <see cref="P:Suzunoya.ADV.ADVData.UnmodifiedSaveData"/>
             and replay it until it is equal to the savedata at the point of saving.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVData.RemovePreservedData">
            <summary>
            When leaving a top-level bounded context,
            call this method to remove the handling from <see cref="M:Suzunoya.ADV.ADVData.PreserveData"/>.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVData.LockContext(Suzunoya.ControlFlow.OpenedContext)">
            <summary>
            When entering a bounded context that is not safe for save/load (<see cref="P:Suzunoya.ControlFlow.StrongBoundedContext`1.LoadSafe"/>),
            call this method to store the save data at that point in <see cref="P:Suzunoya.ADV.ADVData.LockedContextData"/>.
            <br/><see cref="M:Suzunoya.ADV.ADVManager.GetSaveReadyADVData"/> will return <see cref="P:Suzunoya.ADV.ADVData.LockedContextData"/> if it exists.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVData.UnlockContext(Suzunoya.ControlFlow.OpenedContext)">
            <summary>
            When leaving a bounded context that is not safe for save/load (<see cref="P:Suzunoya.ControlFlow.StrongBoundedContext`1.LoadSafe"/>),
            call this method to remove the handling from <see cref="M:Suzunoya.ADV.ADVData.LockContext(Suzunoya.ControlFlow.OpenedContext)"/>.
            </summary>
        </member>
        <member name="T:Suzunoya.ADV.ADVEvidenceRequest`1">
            <summary>
            An <see cref="T:Suzunoya.ADV.EvidenceRequest`1"/> that supports top-level evidence presentation in an ADV.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVEvidenceRequest`1.#ctor(Suzunoya.ADV.ADVManager,Suzunoya.ControlFlow.IVNState)">
            <summary>
            An <see cref="T:Suzunoya.ADV.EvidenceRequest`1"/> that supports top-level evidence presentation in an ADV.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.ADVEvidenceRequest`1.TopLevelRequest">
            <summary>
            Request handling for evidence presentation at the top level.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.ADVEvidenceRequest`1.CanPresentTopLevel">
            <summary>
            True iff there exists a top-level consumer for evidence and the ADV can currently accept a top-level
             context execution.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.ADVEvidenceRequest`1.CanPresentAny">
            <summary>
            True iff there exists a top-level consumer for evidence and the ADV can currently accept a top-level
             context execution, or there is an interruptable context currently executing.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVEvidenceRequest`1.PresentTopLevel(`0)">
            <summary>
            Present evidence that has been requested, and run a top-level <see cref="T:Suzunoya.ControlFlow.BoundedContext`1"/> on the ADV.
            <br/>Make sure <see cref="P:Suzunoya.ADV.ADVEvidenceRequest`1.CanPresentTopLevel"/> is true before calling this.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVEvidenceRequest`1.PresentAnyLevel(`0)">
            <summary>
            Present evidence that has been requested, either in an interruptable context or at the top-level ADV.
            <br/>Make sure <see cref="P:Suzunoya.ADV.ADVEvidenceRequest`1.CanPresentAny"/> is true before calling this.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVEvidenceRequest`1.RequestTopLevel``1(System.Func{`0,Suzunoya.ControlFlow.BoundedContext{``0}})">
            <summary>
            Provide a handler that handles evidence presented at the top level.
            </summary>
        </member>
        <member name="T:Suzunoya.ADV.RunOnEntryVNPriority">
            <summary>
            Enum describing the reason for which a VN segment should be run on entry.
            </summary>
        </member>
        <member name="F:Suzunoya.ADV.RunOnEntryVNPriority.LOAD">
            <summary>
            Run a VN segment on entry because the game was saved while that segment was running.
            </summary>
        </member>
        <member name="F:Suzunoya.ADV.RunOnEntryVNPriority.MAP_ENTER">
            <summary>
            Run a VN segment on entry because the map configuration says so.
            </summary>
        </member>
        <member name="T:Suzunoya.ADV.ADVIdealizedState">
            <summary>
            A set of assertions about the state of an ADV game.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.ADVIdealizedState.HasEntryVN">
            <summary>
            Whether or not this idealized state has a VN segment it will run on actualization.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVIdealizedState.#ctor(Suzunoya.ADV.IExecutingADV)">
            <summary>
            Constructor for <see cref="T:Suzunoya.ADV.ADVIdealizedState"/> that starts with no assertions.
            <br/>Assertions can be added via <see cref="M:BagoumLib.Assertions.IdealizedState.Assert(BagoumLib.Assertions.IAssertion[])"/>.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVIdealizedState.SetEntryVN(Suzunoya.ControlFlow.BoundedContext{System.Reactive.Unit},Suzunoya.ADV.RunOnEntryVNPriority)">
            <summary>
            Set a visual novel segment to be run when this idealized state is first actualized (doesn't work on inherit).
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVIdealizedState.ActualizeOnNewState">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ADV.ADVIdealizedState.DeactualizeOnEndState">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ADV.ADVIdealizedState.FadeIn">
            <summary>
            A task that is run after <see cref="M:Suzunoya.ADV.ADVIdealizedState.ActualizeOnNewState"/>.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVIdealizedState.FadeOut">
            <summary>
            A task that is run before <see cref="M:Suzunoya.ADV.ADVIdealizedState.DeactualizeOnEndState"/>.
            </summary>
        </member>
        <member name="T:Suzunoya.ADV.ADVInstance">
            <summary>
            Contains all top-level metadata about an executing ADV instance that is not specific to the game.
            <br/>The actual execution process is handled by a game-specific <see cref="T:Suzunoya.ADV.IExecutingADV"/>.
            </summary>
            <param name="Request">Request data storing information required to start the ADV instance</param>
            <param name="VN">VN state container that is persistent through the game, on which all bounded contexts are run</param>
            <param name="Tracker">Cancellation token wrapping the ADV instance execution</param>
        </member>
        <member name="M:Suzunoya.ADV.ADVInstance.#ctor(Suzunoya.ADV.IADVInstanceRequest,Suzunoya.ControlFlow.IVNState,BagoumLib.Cancellation.Cancellable)">
            <summary>
            Contains all top-level metadata about an executing ADV instance that is not specific to the game.
            <br/>The actual execution process is handled by a game-specific <see cref="T:Suzunoya.ADV.IExecutingADV"/>.
            </summary>
            <param name="Request">Request data storing information required to start the ADV instance</param>
            <param name="VN">VN state container that is persistent through the game, on which all bounded contexts are run</param>
            <param name="Tracker">Cancellation token wrapping the ADV instance execution</param>
        </member>
        <member name="P:Suzunoya.ADV.ADVInstance.Request">
            <summary>Request data storing information required to start the ADV instance</summary>
        </member>
        <member name="P:Suzunoya.ADV.ADVInstance.VN">
            <summary>VN state container that is persistent through the game, on which all bounded contexts are run</summary>
        </member>
        <member name="P:Suzunoya.ADV.ADVInstance.Tracker">
            <summary>Cancellation token wrapping the ADV instance execution</summary>
        </member>
        <member name="P:Suzunoya.ADV.ADVInstance.ADVData">
            <summary>
            Game data describing the player's progress through the game.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.ADVInstance.Manager">
            <inheritdoc cref="P:Suzunoya.ADV.IADVInstanceRequest.Manager"/>
        </member>
        <member name="M:Suzunoya.ADV.ADVInstance.Cancel">
            <summary>
            Cancel the cancellation token and destroy all contents of the executing VN.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVInstance.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Suzunoya.ADV.IADVInstanceRequest">
            <summary>
            Contains information necessary to start an ADV instance.
            <br/>Once the instance is started, metadata such as the execution tracker
            is stored in a constructed <see cref="T:Suzunoya.ADV.ADVInstance"/>.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.IADVInstanceRequest.Manager">
            <inheritdoc cref="T:Suzunoya.ADV.ADVManager"/>
        </member>
        <member name="P:Suzunoya.ADV.IADVInstanceRequest.ADVData">
            <summary>
            Save data to load from.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.IADVInstanceRequest.LoadProxyData">
            <summary>
            When loading into an in-progress BoundedContext, this contains the "true" save data,
             that is replayed onto the "blank" save data in <see cref="P:Suzunoya.ADV.IADVInstanceRequest.ADVData"/>.
            <br/>You can set this up by calling `(ADVData, LoadProxyData) = advData.GetLoadProxyInfo();` in the constructor.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.IADVInstanceRequest.FinalizeProxyLoad">
            <summary>
            After loading into an in-progress BoundedContext, call this method to swap <see cref="P:Suzunoya.ADV.IADVInstanceRequest.LoadProxyData"/>
            (the "true" save data) and <see cref="P:Suzunoya.ADV.IADVInstanceRequest.ADVData"/> (the "blank/replayee" save data).
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.IADVInstanceRequest.Run">
            <summary>
            Enter the ADV scene and run the ADV instance.
            Returns false if the scene fails to load.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.IADVInstanceRequest.Restart(Suzunoya.ADV.ADVData)">
            <summary>
            Restart the ADV instance, possibly with an overriden data.
            </summary>
        </member>
        <member name="T:Suzunoya.ADV.ADVManager">
            <summary>
            Service that manages the execution of an ADV context.
            </summary>
        </member>
        <member name="T:Suzunoya.ADV.ADVManager.State">
            <summary>
            Enum describing the state that governs what interactions the player may do.
            </summary>
        </member>
        <member name="F:Suzunoya.ADV.ADVManager.State.Investigation">
            <summary>
            Investigation state: the player can interact with objects in the environment.
            </summary>
        </member>
        <member name="F:Suzunoya.ADV.ADVManager.State.Dialogue">
            <summary>
            Dialogue state: the VN is executing dialogue. Generally corresponds with <see cref="P:Suzunoya.ADV.ADVManager.VNIsExecuting"/>.
            </summary>
        </member>
        <member name="F:Suzunoya.ADV.ADVManager.State.Waiting">
            <summary>
            Waiting state: Some loading process is occurring that disables player interaction.
            </summary>
        </member>
        <member name="F:Suzunoya.ADV.ADVManager.AllStates">
            <summary>
            All valid values of <see cref="T:Suzunoya.ADV.ADVManager.State"/>.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.ADVManager.VNIsExecuting">
            <summary>
            True if a VN segment is currently playing. 
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.ADVManager.ADVData">
            <inheritdoc cref="P:Suzunoya.ADV.IExecutingADV.ADVData"/>
        </member>
        <member name="P:Suzunoya.ADV.ADVManager.VNState">
            <inheritdoc cref="P:Suzunoya.ADV.IExecutingADV.VN"/>
        </member>
        <member name="P:Suzunoya.ADV.ADVManager.ExecAdv">
            <summary>
            The currently executing ADV process.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.ADVManager.ADVState">
            <summary>
            The current <see cref="T:Suzunoya.ADV.ADVManager.State"/> of the game.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.ADVManager.Tokens">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ADV.ADVManager.VNExecutionStarting">
            <summary>
            Event invoked right before VN execution begins. Bool: whether or not parallel investigation is permitted.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVManager.DestroyCurrentInstance">
            <summary>
            Destroy the currently running ADV instance, if it exists.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVManager.SetupInstance(Suzunoya.ADV.IExecutingADV)">
            <summary>
            Set the provided ADV execution as the current executing ADV.
            <br/>(Only one <see cref="T:Suzunoya.ADV.IExecutingADV"/> may be handled by this service at a time.)
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVManager.GetSaveReadyADVData">
            <summary>
            Update and retrieve the save data that should be serialized to disk.
            <br/>This may not be <see cref="P:Suzunoya.ADV.ADVManager.ADVData"/> in cases where the current VN location is unidentifiable or
             within a locked context (<see cref="P:Suzunoya.ControlFlow.StrongBoundedContext`1.LoadSafe"/> = false).
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVManager.TryExecuteVN``1(Suzunoya.ControlFlow.BoundedContext{``0},System.Boolean)">
            <summary>
            Execute a top-level VN segment. May fail with null if a VN segment is already executing.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVManager.TryOrDelayExecuteVN``1(Suzunoya.ControlFlow.BoundedContext{``0},System.Boolean)">
            <summary>
            Execute a top-level VN segment. If one is already executing, then execute this after the previous one is complete.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.ADVManager.ExecuteVN``1(Suzunoya.ControlFlow.BoundedContext{``0},System.Boolean)">
            <summary>
            Execute a top-level VN segment.
            </summary>
        </member>
        <member name="T:Suzunoya.ADV.BaseExecutingADV`2">
            <summary>
            Base implementation of <see cref="T:Suzunoya.ADV.IExecutingADV"/> for ADV games requiring assertion logic and map controls.
            <br/>Almost all game configuration is done in abstract method <see cref="M:Suzunoya.ADV.BaseExecutingADV`2.ConfigureMapStates"/>. Implementations
                must implement <see cref="M:Suzunoya.ADV.BaseExecutingADV`2.ConfigureMapStates"/> and also call <see cref="M:Suzunoya.ADV.BaseExecutingADV`2.SetupMapStates"/> in their constructor.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.BaseExecutingADV`2.Inst">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ADV.BaseExecutingADV`2.Manager">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ADV.BaseExecutingADV`2.VN">
            <inheritdoc cref="P:Suzunoya.ADV.ADVInstance.VN"/>
        </member>
        <member name="P:Suzunoya.ADV.BaseExecutingADV`2.Data">
            <inheritdoc cref="P:Suzunoya.ADV.ADVInstance.ADVData"/>
        </member>
        <member name="P:Suzunoya.ADV.BaseExecutingADV`2.DataChanged">
            <summary>
            Event called immediately after save data is changed, and before assertions are recomputed.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.BaseExecutingADV`2.MapStates">
            <summary>
            Handler for managing maps and assertions.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.BaseExecutingADV`2.MapTransitionTask">
            <inheritdoc cref="P:Suzunoya.ADV.MapStateTransition`2.MapUpdateTask"/>
        </member>
        <member name="F:Suzunoya.ADV.BaseExecutingADV`2.executingCrossMapTransition">
            <summary>
            True when the current map is changing (eg. from Hakurei Shrine to Moriya Shrine).
            </summary>
        </member>
        <member name="F:Suzunoya.ADV.BaseExecutingADV`2.completion">
            <summary>
            Task describing the output of the entire game. Set the result when the entire game is complete.
            </summary>
        </member>
        <member name="F:Suzunoya.ADV.BaseExecutingADV`2.tokens">
            <inheritdoc cref="P:BagoumLib.Cancellation.ITokenized.Tokens"/>
        </member>
        <member name="F:Suzunoya.ADV.BaseExecutingADV`2.bctxes">
            <summary>
            Maps a BCtx ID to the corresponding BCtx for all top-level BCtxes that can be loaded into
            </summary>
        </member>
        <member name="F:Suzunoya.ADV.BaseExecutingADV`2.MapWillUpdate">
            <summary>
            Event called when the map is updated via <see cref="M:Suzunoya.ADV.BaseExecutingADV`2.GoToMap(System.String,System.Action{`1})"/>.
            <br/>It is called right before assertions are recomputed.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.BaseExecutingADV`2.#ctor(Suzunoya.ADV.ADVInstance)">
            <summary>
            Constructor for <see cref="T:Suzunoya.ADV.BaseExecutingADV`2"/>.
            <br/>Note that <see cref="M:Suzunoya.ADV.BaseExecutingADV`2.ConfigureMapStates"/> is called in this constructor.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.BaseExecutingADV`2.DisposeWithMap``1(``0)">
            <summary>
            Set a disposable to be automatically disposed when the map changes.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.BaseExecutingADV`2.GoToMap(System.String,System.Action{`1})">
            <summary>
            Change the current map. Always call this method instead of setting <see cref="P:Suzunoya.ADV.ADVData.CurrentMap"/>,
             as it triggers <see cref="F:Suzunoya.ADV.BaseExecutingADV`2.MapWillUpdate"/>.
            </summary>
            <param name="map">New map to go to</param>
            <param name="updater">Optional data update step that will run before the map change</param>
            <returns></returns>
        </member>
        <member name="M:Suzunoya.ADV.BaseExecutingADV`2.UpdateDataV(System.Action{`1},Suzunoya.ADV.MapStateTransitionSettings{`0})">
            <summary>
            Update the game data and recompute map assertions. This returns nothing; use <see cref="M:Suzunoya.ADV.BaseExecutingADV`2.UpdateData(System.Action{`1},Suzunoya.ADV.MapStateTransitionSettings{`0})"/> if you
             want to await the update task.
            <br/>This uses SimultaneousActualization by default.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.BaseExecutingADV`2.UpdateData(System.Action{`1},Suzunoya.ADV.MapStateTransitionSettings{`0})">
            <summary>
            Update the game data and recompute map assertions.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.BaseExecutingADV`2.Context(System.String,System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Use this proxy function to register BCTXs so they can be inspected and run on load.
            Top-level contexts should always be {Unit}.
            If you provide an unidentifiable id (eg. empty string), it won't be loadable.
            </summary>
            <param name="id">ID by which teh inner context is identified.</param>
            <param name="innerTask">Inner executed content for the bounded context.</param>
            <param name="isTrivialTask">See <see cref="T:Suzunoya.ControlFlow.BoundedContext`1"/>.<see cref="P:Suzunoya.ControlFlow.BoundedContext`1.Trivial"/></param>
        </member>
        <member name="M:Suzunoya.ADV.BaseExecutingADV`2.Run">
            <summary>
            Boilerplate code for running an ADV-based game. 
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.BaseExecutingADV`2.ADVDataFinalized">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ADV.BaseExecutingADV`2.SetupMapStates">
            <summary>
            Function that runs <see cref="M:Suzunoya.ADV.BaseExecutingADV`2.ConfigureMapStates"/> and related map setup. This must be called by
            subclass constructors, or after the constructor is run.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.BaseExecutingADV`2.ConfigureMapStates">
            <summary>
            Map setup function run once during game initialization. This handles the game's entire logical configuration.
            <br/>Subclasses must override this to make data-dependent assertions on maps.
            <br/>Assertions will be re-evaluated whenever the instance data changes.
            <br/>Example usage, where SomeEntity appears on MyMapName after QuestYYY is accepted:
            <code>
            ms.ConfigureMap("MyMapName", (i, d) => {
              if (d.QuestState.QuestYYY >= QuestState.ACCEPTED) {
                i.Assert(new EntityAssertion&lt;SomeEntity&gt;(vn));
            ...
            </code>
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.BaseExecutingADV`2.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Suzunoya.ADV.EvidenceRequest`1">
            <summary>
            An object that allows consumers to request "evidence", which, when provided,
             interrupts VN execution and runs a <see cref="T:Suzunoya.ControlFlow.BoundedContext`1"/> on top.
            </summary>
            <param name="VN">VN process on which this is running.</param>
            <typeparam name="E">Type of evidence object.</typeparam>
        </member>
        <member name="M:Suzunoya.ADV.EvidenceRequest`1.#ctor(Suzunoya.ControlFlow.IVNState,Suzunoya.ADV.ADVManager)">
            <summary>
            An object that allows consumers to request "evidence", which, when provided,
             interrupts VN execution and runs a <see cref="T:Suzunoya.ControlFlow.BoundedContext`1"/> on top.
            </summary>
            <param name="VN">VN process on which this is running.</param>
            <typeparam name="E">Type of evidence object.</typeparam>
        </member>
        <member name="P:Suzunoya.ADV.EvidenceRequest`1.VN">
            <summary>VN process on which this is running.</summary>
        </member>
        <member name="P:Suzunoya.ADV.EvidenceRequest`1.CanPresent">
            <summary>
            Whether or not there exists a consumer to which evidence can be presented.
            <br/>This does not account for top-level consumers in <see cref="T:Suzunoya.ADV.ADVEvidenceRequest`1"/>.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.EvidenceRequest`1.RequestsChanged">
            <summary>
            Event called when the stack of requests has changed. The stack is not publicly visible, but you
             may examine <see cref="P:Suzunoya.ADV.EvidenceRequest`1.CurrentRequest"/>/<see cref="P:Suzunoya.ADV.EvidenceRequest`1.CanPresent"/> to see the top of the stack.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.EvidenceRequest`1.AssertInterruptionSafe``1(Suzunoya.ControlFlow.BoundedContext{``0})">
            <summary>
            Assert that a bounded context is safe to be used as an interruption at the current moment.
            <br/>This is always true if the VN execution stack is already locked.
            <br/>Either the bounded context must be non-identifiable, or it must have LoadSafe set to false.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.EvidenceRequest`1.Present(`0)">
            <summary>
            Present evidence that has been requested, and run a continuation based on how the request has been configured
             via <see cref="M:Suzunoya.ADV.EvidenceRequest`1.Request(System.Func{`0,Suzunoya.ControlFlow.BoundedContext{BagoumLib.InterruptionStatus}})"/> or <see cref="M:Suzunoya.ADV.EvidenceRequest`1.WaitForEvidence(System.String)"/>.
            <br/>This does not account for top-level consumers in <see cref="T:Suzunoya.ADV.ADVEvidenceRequest`1"/>.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.EvidenceRequest`1.Request(System.Func{`0,Suzunoya.ControlFlow.BoundedContext{BagoumLib.InterruptionStatus}})">
            <summary>
            Returns a disposable token that temporarily allows the executing BCTX to be interrupted
             if evidence is provided.
            <br/>This cannot be used in a saveable BCTX.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.EvidenceRequest`1.WaitForEvidence(System.String)">
            <summary>
            Return an unskippable task that waits until evidence is provided.
            <br/>This is constructed as a BCTX and therefore can be nested within a saveable BCTX.
            </summary>
            <param name="key">Key used to identify this BCTX.</param>
        </member>
        <member name="T:Suzunoya.ADV.IADVCompletion">
            <summary>
            An object returned when the ADV game is fully completed.
            </summary>
        </member>
        <member name="T:Suzunoya.ADV.UnitADVCompletion">
            <summary>
            An empty implementation of <see cref="T:Suzunoya.ADV.IADVCompletion"/>.
            </summary>
        </member>
        <member name="T:Suzunoya.ADV.IExecutingADV">
            <summary>
            The process executing an ADV instance. This is subclassed for each game.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.IExecutingADV.Inst">
            <inheritdoc cref="T:Suzunoya.ADV.ADVInstance"/>
        </member>
        <member name="P:Suzunoya.ADV.IExecutingADV.ADVData">
            <inheritdoc cref="P:Suzunoya.ADV.ADVInstance.ADVData"/>
        </member>
        <member name="P:Suzunoya.ADV.IExecutingADV.Manager">
            <inheritdoc cref="P:Suzunoya.ADV.ADVInstance.Manager"/>
        </member>
        <member name="P:Suzunoya.ADV.IExecutingADV.VN">
            <inheritdoc cref="P:Suzunoya.ADV.ADVInstance.VN"/>
        </member>
        <member name="P:Suzunoya.ADV.IExecutingADV.MapStates">
            <inheritdoc cref="T:Suzunoya.ADV.MapStateManager`2"/>
        </member>
        <member name="M:Suzunoya.ADV.IExecutingADV.Run">
            <summary>
            Run the ADV. Returns an <see cref="T:Suzunoya.ADV.IADVCompletion"/> when the entirety of the ADV is complete.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.IExecutingADV.ADVDataFinalized">
            <summary>
            Called when <see cref="P:Suzunoya.ADV.IExecutingADV.ADVData"/> is finalized; ie. after the proxy-loading process is complete.
            <br/>Any dependencies on fields on <see cref="P:Suzunoya.ADV.IExecutingADV.ADVData"/> should be set up in this function.
            </summary>
        </member>
        <member name="T:Suzunoya.ADV.IExecutingADV`2">
            <summary>
            See <see cref="T:Suzunoya.ADV.IExecutingADV"/>
            </summary>
            <typeparam name="I">Type of idealized state container</typeparam>
            <typeparam name="D">Type of save data</typeparam>
        </member>
        <member name="P:Suzunoya.ADV.IExecutingADV`2.MapStates">
            <inheritdoc cref="T:Suzunoya.ADV.MapStateManager`2"/>
        </member>
        <member name="P:Suzunoya.ADV.IExecutingADV`2.Suzunoya#ADV#IExecutingADV#MapStates">
            <inheritdoc/>
        </member>
        <member name="T:Suzunoya.ADV.BarebonesExecutingADV`1">
            <summary>
            Baseline implementation of <see cref="T:Suzunoya.ADV.IExecutingADV"/>
            that can be used for pure VN games with no actual ADV functionality.
            <br/>This handles load functionality if setup in <see cref="P:Suzunoya.ADV.IADVInstanceRequest.LoadProxyData"/>.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.BarebonesExecutingADV`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ADV.BarebonesExecutingADV`1.Inst">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ADV.BarebonesExecutingADV`1.MapStates">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ADV.BarebonesExecutingADV`1.#ctor(Suzunoya.ADV.ADVInstance,System.Func{System.Threading.Tasks.Task})">
            <summary>
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.BarebonesExecutingADV`1.Run">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ADV.BarebonesExecutingADV`1.ADVDataFinalized">
            <inheritdoc/>
        </member>
        <member name="T:Suzunoya.ADV.MapStateTransitionSettings`1">
            <summary>
            Settings that control an individual map transition when game data updates.
            </summary>
            <typeparam name="I">Subtype of <see cref="T:Suzunoya.ADV.ADVIdealizedState"/></typeparam>
        </member>
        <member name="P:Suzunoya.ADV.MapStateTransitionSettings`1.ExtraAssertions">
            <summary>
            Action making extra assertions on <see cref="T:Suzunoya.ADV.ADVIdealizedState"/> for the map described by the string
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.MapStateTransitionSettings`1.SimultaneousActualization">
            <summary>
            Whether or not previous state deactualization should occur at the same time as next state actualization
            </summary>
        </member>
        <member name="T:Suzunoya.ADV.IMapStateManager">
            <summary>
            Manages the idealized and actualized states for many concurrent maps.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.IMapStateManager.CurrentMapState">
            <summary>
            The idealized state of the current map.
            </summary>
        </member>
        <member name="T:Suzunoya.ADV.GenericAssert">
            <summary>
            A callback provided to consumers that calls Assert on the map with the associated key.
            </summary>
        </member>
        <member name="T:Suzunoya.ADV.MapStateManager`2">
            <summary>
            Manages the idealized and actualized states for many concurrent maps.
            <br/>At most one map may be actualized at a time (see <see cref="P:Suzunoya.ADV.MapStateManager`2.CurrentMap"/>).
            </summary>
            <typeparam name="I">Type of idealized state</typeparam>
            <typeparam name="D">Type of game data</typeparam>
        </member>
        <member name="M:Suzunoya.ADV.MapStateManager`2.#ctor(Suzunoya.ADV.IExecutingADV,System.Func{`0})">
            <summary>
            Manages the idealized and actualized states for many concurrent maps.
            <br/>At most one map may be actualized at a time (see <see cref="P:Suzunoya.ADV.MapStateManager`2.CurrentMap"/>).
            </summary>
            <typeparam name="I">Type of idealized state</typeparam>
            <typeparam name="D">Type of game data</typeparam>
        </member>
        <member name="P:Suzunoya.ADV.MapStateManager`2.CurrentMap">
            <summary>
            The identifier of the current map.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.MapStateManager`2.MapEndStateDeactualized">
            <summary>
            Triggered right after a map is end-state deactualized because <see cref="P:Suzunoya.ADV.MapStateManager`2.CurrentMap"/> changed.
            <br/>With default handling in <see cref="T:Suzunoya.ADV.ADVIdealizedState"/>, the screen will be faded out at this time.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.MapStateManager`2.CurrentMapState">
            <inheritdoc cref="P:Suzunoya.ADV.IMapStateManager.CurrentMapState"/>
        </member>
        <member name="M:Suzunoya.ADV.MapStateManager`2.ConfigureMap(System.String,System.Action{`0,`1})">
            <summary>
            Configure a map definition. This should be done for all maps before the game code is run.
            </summary>
            <param name="mapKey">Key to associate with the map</param>
            <param name="stateConstructor">Process that creates assertions for the map depending on game data</param>
            <exception cref="T:System.Exception">Thrown if the key is already configured.</exception>
        </member>
        <member name="M:Suzunoya.ADV.MapStateManager`2.ConfigureGeneric(System.Action{Suzunoya.ADV.GenericAssert,`1})">
            <summary>
            Configure map definitions for all maps. This should be done before the game code is run.
            </summary>
            <param name="stateConstructor">Process that creates assertions for all maps depending on game data</param>
        </member>
        <member name="M:Suzunoya.ADV.MapStateManager`2.UpdateMaps(`1,System.String,Suzunoya.ADV.MapStateTransitionSettings{`0})">
            <summary>
            Update all map definitions with a new game data object.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.MapStateManager`2.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Suzunoya.ADV.MapStateTransition`2">
            <summary>
            Safely manages transitions between data states operated over by <see cref="T:Suzunoya.ADV.MapStateManager`2"/>.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.MapStateTransition`2.MapStates">
            <summary>
            Handler for maps and assertions.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.MapStateTransition`2.ExecutingTransition">
            <summary>
            True when the map state is changing.
            <br/>Consumers may want to disable certain functionalities while this is true.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.MapStateTransition`2.MapUpdateTask">
            <summary>
            The task describing the current map update, if a map update is occuring.
            </summary>
        </member>
        <member name="T:Suzunoya.ADV.SelectionRequest`1">
            <summary>
            An object that allows consumers to request that the player select one of several options.
            </summary>
            <param name="VN">VN process on which this is running.</param>
            <typeparam name="C">Type of option. In the simplest case, this may be a string.</typeparam>
        </member>
        <member name="M:Suzunoya.ADV.SelectionRequest`1.#ctor(Suzunoya.ControlFlow.IVNState)">
            <summary>
            An object that allows consumers to request that the player select one of several options.
            </summary>
            <param name="VN">VN process on which this is running.</param>
            <typeparam name="C">Type of option. In the simplest case, this may be a string.</typeparam>
        </member>
        <member name="P:Suzunoya.ADV.SelectionRequest`1.VN">
            <summary>VN process on which this is running.</summary>
        </member>
        <member name="P:Suzunoya.ADV.SelectionRequest`1.CanSelect">
            <summary>
            Whether or not there exists a consumer to which a selection can be provided.
            </summary>
        </member>
        <member name="P:Suzunoya.ADV.SelectionRequest`1.RequestChanged">
            <summary>
            Event called when there is a new selection request, in which case it contains the selection options,
             or when a selection request is complete, in which case it contains null.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.SelectionRequest`1.MakeSelection(`0)">
            <summary>
            Make a selection that has been requested via <see cref="M:Suzunoya.ADV.SelectionRequest`1.WaitForSelection(System.String,`0[])"/>.
            <br/>Note that this requires equality operators to be well-defined.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.SelectionRequest`1.MakeSelection(System.Int32)">
            <summary>
            Make a selection that has been requested via <see cref="M:Suzunoya.ADV.SelectionRequest`1.WaitForSelection(System.String,`0[])"/>.
            </summary>
        </member>
        <member name="M:Suzunoya.ADV.SelectionRequest`1.WaitForSelection(System.String,`0[])">
            <summary>
            Return an unskippable task that waits until a selection is made.
            <br/>This is constructed as a BCTX and therefore can be nested within a saveable BCTX.
            </summary>
            <param name="key">Key used to identify this BCTX.</param>
            <param name="options">Non-empty array of options. Do not modify the array after passing it to this function.</param>
        </member>
        <member name="T:Suzunoya.Assertions.CharacterAssertion`1">
            <summary>
            Assertions that run over Suzunoya <see cref="T:Suzunoya.Entities.ICharacter"/> objects.
            </summary>
        </member>
        <member name="M:Suzunoya.Assertions.CharacterAssertion`1.#ctor(Suzunoya.ControlFlow.IVNState)">
            <summary>
            Assertions that run over Suzunoya <see cref="T:Suzunoya.Entities.ICharacter"/> objects.
            </summary>
        </member>
        <member name="P:Suzunoya.Assertions.CharacterAssertion`1.Emote">
            <summary>
            Bound to <see cref="P:Suzunoya.Entities.ICharacter.Emote"/>
            </summary>
        </member>
        <member name="M:Suzunoya.Assertions.CharacterAssertion`1.DefaultDynamicEntryHandler(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Assertions.CharacterAssertion`1.DefaultDynamicExitHandler(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Assertions.CharacterAssertion`1.Bind(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Assertions.CharacterAssertion`1._Inherit(Suzunoya.Assertions.CharacterAssertion{`0})">
            <inheritdoc/>
        </member>
        <member name="T:Suzunoya.Assertions.EntityAssertion">
            <summary>
            Base class for assertions that operate over Suzunoya entity objects
            (specifically anything deriving <see cref="T:Suzunoya.Entities.IRendered"/>).
            </summary>
        </member>
        <member name="P:Suzunoya.Assertions.EntityAssertion.ID">
            <inheritdoc cref="!:IAssertion&lt;T&gt;.ID"/>
        </member>
        <member name="P:Suzunoya.Assertions.EntityAssertion.Priority">
            <inheritdoc cref="!:IAssertion&lt;T&gt;.Priority"/>
        </member>
        <member name="F:Suzunoya.Assertions.EntityAssertion.Parent">
            <summary>
            The entity assertion for the <see cref="T:Suzunoya.Entities.ITransform"/>
             that is a parent for this assertion's bound object.
            See <see cref="!:EntityAssertion&lt;T&gt;.TakeParent"/>
            </summary>
        </member>
        <member name="P:Suzunoya.Assertions.EntityAssertion.Children">
            <summary>
            Assertions for all the <see cref="T:Suzunoya.Entities.ITransform"/>s that
             are children of this assertion's bound object.
            See <see cref="M:Suzunoya.Assertions.EntityAssertion`1.WithChildren(Suzunoya.Assertions.EntityAssertion[])"/>
            </summary>
        </member>
        <member name="P:Suzunoya.Assertions.EntityAssertion.Location">
            <summary>
            Bound to <see cref="P:Suzunoya.Entities.ITransform.LocalLocation"/>
            </summary>
        </member>
        <member name="P:Suzunoya.Assertions.EntityAssertion.EulerAnglesD">
            <summary>
            Bound to <see cref="P:Suzunoya.Entities.ITransform.EulerAnglesD"/>
            </summary>
        </member>
        <member name="P:Suzunoya.Assertions.EntityAssertion.Scale">
            <summary>
            Bound to <see cref="P:Suzunoya.Entities.ITransform.Scale"/>
            </summary>
        </member>
        <member name="P:Suzunoya.Assertions.EntityAssertion.Tint">
            <summary>
            Bound to <see cref="!:IRendered.Tint"/>
            </summary>
        </member>
        <member name="P:Suzunoya.Assertions.EntityAssertion.BoundGeneric">
            <summary>
            The renderable object produced by this assertion.
            </summary>
        </member>
        <member name="M:Suzunoya.Assertions.EntityAssertion.TakeParent(Suzunoya.Assertions.EntityAssertion)">
            <summary>
            Set the <see cref="F:Suzunoya.Assertions.EntityAssertion.Parent"/> of this assertion.
            </summary>
        </member>
        <member name="T:Suzunoya.Assertions.EntityAssertion`1">
            <summary>
            Assertions that operate over Suzunoya entity objects
            (specifically anything deriving <see cref="T:Suzunoya.Entities.IRendered"/>).
            </summary>
            <typeparam name="C">Type of entity</typeparam>
        </member>
        <member name="P:Suzunoya.Assertions.EntityAssertion`1.vn">
            <summary>
            VNState within which this entity is contained.
            </summary>
        </member>
        <member name="P:Suzunoya.Assertions.EntityAssertion`1.ExtraBind">
            <summary>
            Extra bindings to apply to actualized objects.
            </summary>
        </member>
        <member name="P:Suzunoya.Assertions.EntityAssertion`1.OnActualize">
            <summary>
            Callback to invoke when an actualized object is first created (not during inheritance).
            </summary>
        </member>
        <member name="P:Suzunoya.Assertions.EntityAssertion`1.DynamicEntryAllowed">
            <summary>
            Whether or not this object should perform an entry animation (such as a fade-in)
             after its object is created during gameplay.
            </summary>
        </member>
        <member name="M:Suzunoya.Assertions.EntityAssertion`1.DefaultDynamicEntryHandler(`0)">
            <summary>
            Default entry animation.
            </summary>
        </member>
        <member name="P:Suzunoya.Assertions.EntityAssertion`1.DynamicEntryHandler">
            <summary>
            Entry animation. Defaults to <see cref="M:Suzunoya.Assertions.EntityAssertion`1.DefaultDynamicEntryHandler(`0)"/>. Only runs if <see cref="P:Suzunoya.Assertions.EntityAssertion`1.DynamicEntryAllowed"/> is set to true.
            </summary>
        </member>
        <member name="P:Suzunoya.Assertions.EntityAssertion`1.DynamicExitAllowed">
            <summary>
            Whether or not this object should perform an exit animation (such as a fade-out)
             before its object is destroyed during gameplay.
            </summary>
        </member>
        <member name="M:Suzunoya.Assertions.EntityAssertion`1.DefaultDynamicExitHandler(`0)">
            <summary>
            Default exit animation.
            </summary>
        </member>
        <member name="P:Suzunoya.Assertions.EntityAssertion`1.DynamicExitHandler">
            <summary>
            Exit animation. Defaults to <see cref="M:Suzunoya.Assertions.EntityAssertion`1.DefaultDynamicExitHandler(`0)"/>. Only runs if <see cref="P:Suzunoya.Assertions.EntityAssertion`1.DynamicExitAllowed"/> is set to true.
            </summary>
        </member>
        <member name="P:Suzunoya.Assertions.EntityAssertion`1.Bound">
            <inheritdoc cref="P:Suzunoya.Assertions.EntityAssertion`1.BoundGeneric"/>
        </member>
        <member name="P:Suzunoya.Assertions.EntityAssertion`1.BoundGeneric">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Assertions.EntityAssertion`1.HandleDynamicExit(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Enable ad set an exit animation.
            </summary>
        </member>
        <member name="M:Suzunoya.Assertions.EntityAssertion`1.#ctor(Suzunoya.ControlFlow.IVNState,System.String)">
            <summary>
            Create an entity assertion for the given entity type.
            </summary>
        </member>
        <member name="M:Suzunoya.Assertions.EntityAssertion`1.Bind(`0)">
            <summary>
            Bind the ent's fields to the values in this assertion. Run before the ent is added to the VNState.
            </summary>
        </member>
        <member name="M:Suzunoya.Assertions.EntityAssertion`1.LateBind(`0)">
            <summary>
            Bind the ent's fields to the values in this assertion. Run after the object is added to the VNState.
            </summary>
        </member>
        <member name="M:Suzunoya.Assertions.EntityAssertion`1.ActualizeOnNewState">
            <inheritdoc />
        </member>
        <member name="M:Suzunoya.Assertions.EntityAssertion`1.ActualizeOnNoPreceding">
            <inheritdoc />
        </member>
        <member name="M:Suzunoya.Assertions.EntityAssertion`1.DeactualizeOnEndState">
            <inheritdoc />
        </member>
        <member name="M:Suzunoya.Assertions.EntityAssertion`1.DeactualizeOnNoSucceeding">
            <inheritdoc />
        </member>
        <member name="M:Suzunoya.Assertions.EntityAssertion`1.WithChildren(Suzunoya.Assertions.EntityAssertion[])">
            <summary>
            Add children to this assertion, calling <see cref="M:Suzunoya.Assertions.EntityAssertion.TakeParent(Suzunoya.Assertions.EntityAssertion)"/> on each of them.
            </summary>
        </member>
        <member name="M:Suzunoya.Assertions.EntityAssertion`1._Inherit(Suzunoya.Assertions.EntityAssertion{`0})">
            <inheritdoc />
        </member>
        <member name="T:Suzunoya.Assertions.RunOnEntryAssertion">
            <summary>
            An assertion that runs a task on entry (new state/no preceding only). Throws on inherit.
            </summary>
        </member>
        <member name="M:Suzunoya.Assertions.RunOnEntryAssertion.#ctor(System.Func{System.Threading.Tasks.Task})">
            <summary>
            An assertion that runs a task on entry (new state/no preceding only). Throws on inherit.
            </summary>
        </member>
        <member name="M:Suzunoya.Assertions.RunOnEntryAssertion.#ctor(System.Action)">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.Assertions.RunOnEntryAssertion.Priority">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Assertions.RunOnEntryAssertion.ActualizeOnNewState">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Assertions.RunOnEntryAssertion.ActualizeOnNoPreceding">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Assertions.RunOnEntryAssertion.DeactualizeOnEndState">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Assertions.RunOnEntryAssertion.DeactualizeOnNoSucceeding">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Assertions.RunOnEntryAssertion.Inherit(BagoumLib.Assertions.IAssertion)">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Assertions.RunOnEntryAssertion._Inherit(Suzunoya.Assertions.RunOnEntryAssertion)">
            <inheritdoc/>
        </member>
        <member name="T:Suzunoya.Assertions.TokenizedAssertion">
            <summary>
            Base class for assertions that have tokens bound to their lifetime.
            </summary>
        </member>
        <member name="P:Suzunoya.Assertions.TokenizedAssertion.Tokens">
            <summary>
            Set of tokens bound to the assertion lifetime.
            </summary>
        </member>
        <member name="M:Suzunoya.Assertions.TokenizedAssertion.DeactualizeOnEndState">
            <inheritdoc cref="M:BagoumLib.Assertions.IAssertion.DeactualizeOnEndState"/>
        </member>
        <member name="M:Suzunoya.Assertions.TokenizedAssertion.DeactualizeOnNoSucceeding">
            <inheritdoc cref="M:BagoumLib.Assertions.IAssertion.DeactualizeOnNoSucceeding"/>
        </member>
        <member name="M:Suzunoya.Assertions.TokenizedAssertion._Inherit(Suzunoya.Assertions.TokenizedAssertion)">
            <inheritdoc cref="M:BagoumLib.Assertions.IAssertion`1._Inherit(`0)"/>
        </member>
        <member name="T:Suzunoya.Assertions.TopLevelEvidenceAssertion`2">
            <summary>
            An assertion that provides a top-level evidence handler (ie. one that can receive evidence while no dialogue is running) for <see cref="T:Suzunoya.ADV.ADVEvidenceRequest`1"/>.
            </summary>
        </member>
        <member name="M:Suzunoya.Assertions.TopLevelEvidenceAssertion`2.#ctor(Suzunoya.ADV.ADVEvidenceRequest{`0},System.Func{`0,Suzunoya.ControlFlow.BoundedContext{`1}})">
            <summary>
            An assertion that provides a top-level evidence handler (ie. one that can receive evidence while no dialogue is running) for <see cref="T:Suzunoya.ADV.ADVEvidenceRequest`1"/>.
            </summary>
        </member>
        <member name="M:Suzunoya.Assertions.TopLevelEvidenceAssertion`2.ActualizeOnNewState">
            <inheritdoc />
        </member>
        <member name="M:Suzunoya.Assertions.TopLevelEvidenceAssertion`2.ActualizeOnNoPreceding">
            <inheritdoc />
        </member>
        <member name="M:Suzunoya.Assertions.TopLevelEvidenceAssertion`2._Inherit(Suzunoya.Assertions.TopLevelEvidenceAssertion{`0,`1})">
            <inheritdoc />
        </member>
        <member name="T:Suzunoya.ControlFlow.IBoundedContext">
            <summary>
            Non-generic base class for <see cref="T:Suzunoya.ControlFlow.BoundedContext`1"/>
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IBoundedContext.VN">
            <summary>
            The <see cref="T:Suzunoya.ControlFlow.IVNState"/> within which the bounded context is executing.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IBoundedContext.ID">
            <summary>
            An identifier for the bounded context.
            If this is empty, then the context will be considered unidentifiable,
             and features such as save/load will be disabled.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IBoundedContext.Identifiable">
            <summary>
            Whether this bounded context has an identifier that allows it to be identified for save/load and persistent
             data storage in BCTXData.
            </summary>
        </member>
        <member name="T:Suzunoya.ControlFlow.IStrongBoundedContext">
            <summary>
            Non-generic base class for <see cref="T:Suzunoya.ControlFlow.StrongBoundedContext`1"/>
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IStrongBoundedContext.LoadSafe">
            <summary>
            Whether or not it is safe to save/load inside this BCTX. This may be false in cases where the BCTX
             contains nondeterministic code.
            <br/>This should be consumed by game logic handlers to call <see cref="M:Suzunoya.ADV.ADVData.LockContext(Suzunoya.ControlFlow.OpenedContext)"/>.
            </summary>
        </member>
        <member name="T:Suzunoya.ControlFlow.BoundedContext`1">
            <summary>
            A representation of a (possibly nested) task run on a VNState.
            <br/>The return value of the contained task is automatically saved in the VNState when this runs to completion.
            </summary>
            <param name="VN">VN on which to run the task</param>
            <param name="ID">Identifier for the data produced by running the task</param>
            <param name="InnerTask">Task to run</param>
            <typeparam name="T">Type of the return value of the contained task</typeparam>
        </member>
        <member name="M:Suzunoya.ControlFlow.BoundedContext`1.#ctor(Suzunoya.ControlFlow.IVNState,System.String,System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            A representation of a (possibly nested) task run on a VNState.
            <br/>The return value of the contained task is automatically saved in the VNState when this runs to completion.
            </summary>
            <param name="VN">VN on which to run the task</param>
            <param name="ID">Identifier for the data produced by running the task</param>
            <param name="InnerTask">Task to run</param>
            <typeparam name="T">Type of the return value of the contained task</typeparam>
        </member>
        <member name="P:Suzunoya.ControlFlow.BoundedContext`1.VN">
            <summary>VN on which to run the task</summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.BoundedContext`1.ID">
            <summary>Identifier for the data produced by running the task</summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.BoundedContext`1.InnerTask">
            <summary>
            Task to run
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.BoundedContext`1.Identifiable">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.BoundedContext`1.Trivial">
            <summary>
            True iff there are no save-data changes in the body of the bounded context.
            <br/>This allows speed optimizations during ADV execution.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.BoundedContext`1.IsCompletedInContexts(System.String[])">
            <summary>
            Return true if the context has been executed and completed in the given parentage path.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.BoundedContext`1.Execute">
            <summary>
            Run the contents of this bounded context on the VN.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.BoundedContext`1.GetAwaiter">
            <summary>
            Syntactic sugar for `await ctx.Execute()`.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.BoundedContext`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Suzunoya.ControlFlow.StrongBoundedContext`1">
            <summary>
            A <see cref="T:Suzunoya.ControlFlow.BoundedContext`1"/> with the guarantee that any lasting effects on game state
             produced by running this task are duplicated in <see cref="P:Suzunoya.ControlFlow.StrongBoundedContext`1.ShortCircuit"/>.
            <br/><see cref="M:Suzunoya.ControlFlow.VNState.SaveLocalValue``1(System.String,``0)"/> does NOT need to be duplicated in ShortCircuit,
             as it can be automatically handled in <see cref="T:Suzunoya.Data.BoundedContextData"/>. However, any other modifications
             to instance data must be duplicated in ShortCircuit.
            <br/>Note that if these are nested, then the outer SBC must also execute the short-circuit code
             in all of its nested children in its own short-circuit.
            <br/>When skipping the game state to various points for usages such as loading or backlogging,
             the engine may skip the entirety of a StrongBoundedContext.
            </summary>
            <param name="VN">VN on which to run the task</param>
            <param name="ID">Identifier for the data produced by running the task</param>
            <param name="InnerTask">Task to run</param>
            <param name="ShortCircuit">Code to run if the BCTX is short-circuit that should mimic any nontransient
             changes to the world state.</param>
            <param name="OnFinish">Code to run at the end of the BCTX execution. Also run if short-circuit.
             Useful for encoding state changes without duplicating them in <see cref="P:Suzunoya.ControlFlow.StrongBoundedContext`1.ShortCircuit"/>.</param>
            <typeparam name="T">Type of the return value of the contained task</typeparam>
        </member>
        <member name="M:Suzunoya.ControlFlow.StrongBoundedContext`1.#ctor(Suzunoya.ControlFlow.IVNState,System.String,System.Func{System.Threading.Tasks.Task{`0}},System.Action,System.Action)">
            <summary>
            A <see cref="T:Suzunoya.ControlFlow.BoundedContext`1"/> with the guarantee that any lasting effects on game state
             produced by running this task are duplicated in <see cref="P:Suzunoya.ControlFlow.StrongBoundedContext`1.ShortCircuit"/>.
            <br/><see cref="M:Suzunoya.ControlFlow.VNState.SaveLocalValue``1(System.String,``0)"/> does NOT need to be duplicated in ShortCircuit,
             as it can be automatically handled in <see cref="T:Suzunoya.Data.BoundedContextData"/>. However, any other modifications
             to instance data must be duplicated in ShortCircuit.
            <br/>Note that if these are nested, then the outer SBC must also execute the short-circuit code
             in all of its nested children in its own short-circuit.
            <br/>When skipping the game state to various points for usages such as loading or backlogging,
             the engine may skip the entirety of a StrongBoundedContext.
            </summary>
            <param name="VN">VN on which to run the task</param>
            <param name="ID">Identifier for the data produced by running the task</param>
            <param name="InnerTask">Task to run</param>
            <param name="ShortCircuit">Code to run if the BCTX is short-circuit that should mimic any nontransient
             changes to the world state.</param>
            <param name="OnFinish">Code to run at the end of the BCTX execution. Also run if short-circuit.
             Useful for encoding state changes without duplicating them in <see cref="P:Suzunoya.ControlFlow.StrongBoundedContext`1.ShortCircuit"/>.</param>
            <typeparam name="T">Type of the return value of the contained task</typeparam>
        </member>
        <member name="P:Suzunoya.ControlFlow.StrongBoundedContext`1.ShortCircuit">
            <summary>Code to run if the BCTX is short-circuit that should mimic any nontransient
             changes to the world state.</summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.StrongBoundedContext`1.OnFinish">
            <summary>Code to run at the end of the BCTX execution. Also run if short-circuit.
             Useful for encoding state changes without duplicating them in <see cref="P:Suzunoya.ControlFlow.StrongBoundedContext`1.ShortCircuit"/>.</summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.StrongBoundedContext`1.LoadingDefault">
            <summary>
            Default value to provide for this bounded context if it needs to be skipped during loading,
             but has not saved a result value in the instance save.
            <br/>This only occurs if execution of the context was limited by an if statement/etc
             without a ComputeFlag guard, or if an update was made to the game.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.StrongBoundedContext`1.LoadSafe">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.StrongBoundedContext`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Suzunoya.ControlFlow.OpenedContext">
            <summary>
            A representation of a currently-executing <see cref="T:Suzunoya.ControlFlow.BoundedContext`1"/> within a <see cref="T:Suzunoya.ControlFlow.IVNState"/>.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.OpenedContext.BCtx">
            <summary>
            The bounded context that is currently being executed.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.OpenedContext.Data">
            <summary>
            The local data of the bounded context
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.OpenedContext.ID">
            <inheritdoc cref="P:Suzunoya.ControlFlow.IBoundedContext.ID"/>
        </member>
        <member name="M:Suzunoya.ControlFlow.OpenedContext.RemapData(Suzunoya.Data.IInstanceData)">
            <summary>
            Link <see cref="P:Suzunoya.ControlFlow.OpenedContext.Data"/> to the data in the provided <see cref="T:Suzunoya.Data.IInstanceData"/>.
            </summary>
        </member>
        <member name="T:Suzunoya.ControlFlow.OpenedContext`1">
            <inheritdoc cref="T:Suzunoya.ControlFlow.OpenedContext"/>
        </member>
        <member name="P:Suzunoya.ControlFlow.OpenedContext`1.BCtx">
            <inheritdoc cref="P:Suzunoya.ControlFlow.OpenedContext.BCtx"/>
        </member>
        <member name="P:Suzunoya.ControlFlow.OpenedContext`1.Data">
            <inheritdoc cref="P:Suzunoya.ControlFlow.OpenedContext.Data"/>
        </member>
        <member name="M:Suzunoya.ControlFlow.OpenedContext`1.#ctor(Suzunoya.ControlFlow.BoundedContext{`0})">
            <summary>
            Open a bounded context in the executing VN state,
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.OpenedContext`1.RemapData(Suzunoya.Data.IInstanceData)">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.OpenedContext`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Suzunoya.ControlFlow.OpenedContext`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Suzunoya.ControlFlow.SkipMode">
            <summary>
            An enum describing skip modes in Suzunoya VN control flow.
            Note that "skipping not active" is not a member of this enum;
             use SkipMode? if that is required.
            </summary>
        </member>
        <member name="F:Suzunoya.ControlFlow.SkipMode.LOADING">
            <summary>
            Loading state during backlogging or loading a save file.
            </summary>
        </member>
        <member name="F:Suzunoya.ControlFlow.SkipMode.AUTOPLAY">
            <summary>
            Autoplay state (confirms after delay) that can be activated at player will.
            </summary>
        </member>
        <member name="F:Suzunoya.ControlFlow.SkipMode.FASTFORWARD">
            <summary>
            Fast-forward state that can be activated at player will.
            </summary>
        </member>
        <member name="T:Suzunoya.ControlFlow.IVNInterruptionToken">
            <summary>
            A disposable-ish token returned when the current VN execution is interrupted.
            <br/>To end the interruption, "dispose" this token by calling <see cref="M:Suzunoya.ControlFlow.IVNInterruptionToken.ReturnInterrupt(BagoumLib.InterruptionStatus)"/>.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNInterruptionToken.ReturnInterrupt(BagoumLib.InterruptionStatus)">
            <summary>
            Finish interrupting the enclosing process layer.
            <br/>Has no effect if called a second time.
            </summary>
            <param name="resultStatus">Either <see cref="F:BagoumLib.InterruptionStatus.Continue"/> (continue the enclosing process)
             or <see cref="F:BagoumLib.InterruptionStatus.Abort"/> (stop the enclosing process).</param>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNInterruptionToken.FinalStatus">
            <summary>
            The status provided to <see cref="M:Suzunoya.ControlFlow.IVNInterruptionToken.ReturnInterrupt(BagoumLib.InterruptionStatus)"/> (or null if it has not been called yet).
            </summary>
        </member>
        <member name="T:Suzunoya.ControlFlow.VNInterruptionLayer">
            <summary>
            An executing process layer on a VN, described by <see cref="T:Suzunoya.ControlFlow.VNInterruptionLayer"/>,
             may be interrupted by another process layer (<see cref="M:Suzunoya.ControlFlow.VNState.Interrupt"/>) and later resumed.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNInterruptionLayer.VN">
            <summary>
            VN on which this process layer is running.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNInterruptionLayer.Parent">
            <summary>
            The parent process layer that this process layer interrupted.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNInterruptionLayer.Status">
            <summary>
            The current status of the process layer.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNInterruptionLayer.InducedOperationCancelLevel">
            <summary>
            The <see cref="T:BagoumLib.Cancellation.ICancellee"/> skip level corresponding to <see cref="P:Suzunoya.ControlFlow.VNInterruptionLayer.Status"/>.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNInterruptionLayer.InterruptedBy">
            <summary>
            The interruption currently interrupting this process layer.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNInterruptionLayer.CurrentProcesses">
            <summary>
            The currently-executing processes on this process layer, all sharing a single skip/confirm token.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNInterruptionLayer.ConfirmToken">
            <summary>
            <see cref="P:Suzunoya.ControlFlow.VNInterruptionLayer.CurrentProcesses"/>?.<see cref="P:Suzunoya.ControlFlow.VNProcessGroup.ConfirmToken"/>
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNInterruptionLayer.#ctor(Suzunoya.ControlFlow.IVNState,Suzunoya.ControlFlow.VNInterruptionLayer)">
            <summary>
            Create a new process layer. (Should only be called by <see cref="T:Suzunoya.ControlFlow.VNState"/>)
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNInterruptionLayer.GetOrMakeProcessGroup">
            <summary>
            Get the currently-executing process group, or create a new one if none exists.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNInterruptionLayer.DoConfirm">
            <summary>
            Send a confirm input to the currently-executing process group.
            </summary>
        </member>
        <member name="T:Suzunoya.ControlFlow.VNLocation">
            <summary>
            A class describing a saveable position within a VN. 
            <br/>A position is a script line ID contextualized by the (non-empty) lists of contexts.
            <br/>By default, positions are associated with script lines, but
            can be manually established via vn.OperationID.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNLocation.Contexts">
            <summary>
            The hierarchically-nested bounded context keys for the current position.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNLocation.LastOperationID">
            <summary>
            The last operation ID (per <see cref="P:Suzunoya.ControlFlow.IVNState.OperationID"/>) executed.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNLocation.#ctor">
            <summary>
            Json constructor-- do not use.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNLocation.GetContexts(Suzunoya.ControlFlow.IVNState)">
            <summary>
            Get the currently executing nested context list, but only if all of them are identifiable.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNLocation.Make(Suzunoya.ControlFlow.IVNState)">
            <summary>
            Create a <see cref="T:Suzunoya.ControlFlow.VNLocation"/> from the current state of the VN if its current location is identifiable.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNLocation.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNLocation.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNLocation.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNLocation.ContextsMatchPrefix(System.Collections.Generic.List{Suzunoya.ControlFlow.OpenedContext})">
            <summary>
            Return true iff the provided contexts are a nonstrict prefix of this object's contexts.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNLocation.ContextsMatch(System.Collections.Generic.List{Suzunoya.ControlFlow.OpenedContext})">
            <summary>
            Whether or not <see cref="P:Suzunoya.ControlFlow.VNLocation.Contexts"/> matches the provided contexts list.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNLocation.ContextsMatch(System.Collections.Generic.List{System.String})">
            <summary>
            Whether or not <see cref="P:Suzunoya.ControlFlow.VNLocation.Contexts"/> matches the provided contexts list.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNLocation.op_Equality(Suzunoya.ControlFlow.VNLocation,Suzunoya.ControlFlow.VNLocation)">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNLocation.op_Inequality(Suzunoya.ControlFlow.VNLocation,Suzunoya.ControlFlow.VNLocation)">
            <summary>
            Inequality operator.
            </summary>
        </member>
        <member name="T:Suzunoya.ControlFlow.VNCancellee">
            <summary>
            A wrapper around a cancellation token that also links to the containing VN.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNCancellee.#ctor(Suzunoya.ControlFlow.IVNState,BagoumLib.Cancellation.ICancellee)">
            <summary>
            A wrapper around a cancellation token that also links to the containing VN.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNCancellee.CancelLevel">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNCancellee.Root">
            <inheritdoc/>
        </member>
        <member name="T:Suzunoya.ControlFlow.ILazyAwaitable">
            <summary>
            A lazy wrapper around a task that is not started until it is awaited.
            This allows chaining in ways that are a bit difficult for tasks.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.ILazyAwaitable.Task">
            <summary>
            Task object (accessing this property will cause it to be computed).
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.ILazyAwaitable.GetAwaiter">
            <summary>
            Syntactic sugar for `await Task`.
            </summary>
        </member>
        <member name="F:Suzunoya.ControlFlow.ILazyAwaitable.Null">
            <summary>
            Awaitable that does nothing.
            </summary>
        </member>
        <member name="T:Suzunoya.ControlFlow.ILazyAwaitable`1">
            <summary>
            <see cref="T:Suzunoya.ControlFlow.ILazyAwaitable"/> with a specified task return type.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.ILazyAwaitable`1.Task">
            <inheritdoc cref="P:Suzunoya.ControlFlow.ILazyAwaitable.Task"/>
        </member>
        <member name="M:Suzunoya.ControlFlow.ILazyAwaitable`1.GetAwaiter">
            <inheritdoc cref="M:Suzunoya.ControlFlow.ILazyAwaitable.GetAwaiter"/>
        </member>
        <member name="T:Suzunoya.ControlFlow.LazyFunc`1">
            <summary>
            An function pretending to be a task.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.LazyFunc`1.#ctor(System.Func{`0})">
            <summary>
            An function pretending to be a task.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.LazyFunc`1.Task">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.LazyFunc`1.GetAwaiter">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.LazyFunc`1.op_Implicit(System.Func{`0})~Suzunoya.ControlFlow.LazyFunc{`0}">
            <summary>
            Implicit constructor for <see cref="T:Suzunoya.ControlFlow.LazyFunc`1"/>.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.LazyFunc`1.AsVnOp(Suzunoya.ControlFlow.IVNState)">
            <summary>
            Convert this to a <see cref="T:Suzunoya.ControlFlow.VNOperation"/> so it can be sequenced with VNOperation functions.
            </summary>
        </member>
        <member name="T:Suzunoya.ControlFlow.LazyAction">
            <summary>
            An action predenting to be a task.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.LazyAction.#ctor(System.Action)">
            <inheritdoc cref="T:Suzunoya.ControlFlow.LazyAction"/>
        </member>
        <member name="M:Suzunoya.ControlFlow.LazyAction.op_Implicit(System.Action)~Suzunoya.ControlFlow.LazyAction">
            <inheritdoc cref="T:Suzunoya.ControlFlow.LazyAction"/>
        </member>
        <member name="T:Suzunoya.ControlFlow.ParallelLazyAwaitable">
            <summary>
            A set of lazily-computed tasks run in parallel.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.ParallelLazyAwaitable.#ctor(Suzunoya.ControlFlow.ILazyAwaitable[])">
            <summary>
            A set of lazily-computed tasks run in parallel.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.ParallelLazyAwaitable.Task">
            <inheritdoc/>
        </member>
        <member name="T:Suzunoya.ControlFlow.SequentialLazyAwaitable">
            <summary>
            A set of lazily-computed tasks run in sequence.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.SequentialLazyAwaitable.#ctor(Suzunoya.ControlFlow.ILazyAwaitable[])">
            <summary>
            A set of lazily-computed tasks run in sequence.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.SequentialLazyAwaitable.Task">
            <inheritdoc/>
        </member>
        <member name="T:Suzunoya.ControlFlow.VNProcessGroup">
            <summary>
            A group of processes (generally <see cref="T:Suzunoya.ControlFlow.VNOperation"/>)
            running on a VN bounded by a common cancellation/confirmation/interruption interface.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNProcessGroup.ProcessLayer">
            <summary>
            The process layer on which this process group is running.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNProcessGroup.VN">
            <summary>
            The <see cref="T:Suzunoya.ControlFlow.IVNState"/> on which this process group is running.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNProcessGroup.LastInterruption">
            <summary>
            The last interruption that occured on this process group.
            <br/>NB: This is not set to null when the interruption is complete.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNProcessGroup.OperationCTS">
            <summary>
            The cancellation token source bounding execution of this process group.
            </summary>
        </member>
        <member name="F:Suzunoya.ControlFlow.VNProcessGroup.userSkipAllowed">
            <summary>
            Whether or not the user can skip this process group.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNProcessGroup.OperationCToken">
            <summary>
            The cancellation token bounding execution of this process group.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNProcessGroup.ConfirmToken">
            The canceller governing when a confirm input is provided by the player.
        </member>
        <member name="P:Suzunoya.ControlFlow.VNProcessGroup.ConfirmReceiver">
            <summary>
            The object receiving confirmation.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNProcessGroup.OperationCTokenDependencies">
            <summary>
            The number of <see cref="T:Suzunoya.ControlFlow.VNOperation"/>s dependent on this process group.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNProcessGroup.CancelLevel">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNProcessGroup.Root">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNProcessGroup.#ctor(Suzunoya.ControlFlow.VNInterruptionLayer,System.Boolean)">
            <inheritdoc cref="T:Suzunoya.ControlFlow.VNProcessGroup"/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNProcessGroup.AwaitConfirm">
            <summary>
            Indicate that a user-confirmation is required for at least one of the operations in this process group.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNProcessGroup.DoConfirm">
            <summary>
            Send a user-confirmation to all operations dependent on this process group.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNProcessGroup.CreateOpTracker">
            <summary>
            Get a token that indicates that a <see cref="T:Suzunoya.ControlFlow.VNOperation"/> is dependent on confirmation from this process group.
            </summary>
        </member>
        <member name="T:Suzunoya.ControlFlow.VNConfirmTask">
            <summary>
            The task that is produced when waiting for a confirmation signal.
            This is similar to VNOperation, but cannot be soft-skipped except by interruption.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNConfirmTask.#ctor(Suzunoya.ControlFlow.IVNState,Suzunoya.ControlFlow.VNOperation,System.Func{Suzunoya.ControlFlow.VNProcessGroup,System.Threading.Tasks.Task{BagoumLib.Completion}})">
            <summary>
            The task that is produced when waiting for a confirmation signal.
            This is similar to VNOperation, but cannot be soft-skipped except by interruption.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNConfirmTask.Task">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNConfirmTask.GetAwaiter">
            <inheritdoc/>
        </member>
        <member name="T:Suzunoya.ControlFlow.VNOperation">
            <summary>
            A VNOperation is a sequential sequence of tasks bounded by a common cancellation/interruption interface.
            <br/>The cancellation/interruption is provided through <see cref="T:Suzunoya.ControlFlow.VNProcessGroup"/>.
            If multiple VNOperations are run at the same time, they may end up sharing the same <see cref="T:Suzunoya.ControlFlow.VNProcessGroup"/>.
            <br/>Tasks batched under a VNOperation do not need to check cancellation at their start or end.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNOperation.#ctor(Suzunoya.ControlFlow.IVNState,System.Func{Suzunoya.ControlFlow.VNCancellee,System.Threading.Tasks.Task}[])">
            <summary>
            A VNOperation is a sequential sequence of tasks bounded by a common cancellation/interruption interface.
            <br/>The cancellation/interruption is provided through <see cref="T:Suzunoya.ControlFlow.VNProcessGroup"/>.
            If multiple VNOperations are run at the same time, they may end up sharing the same <see cref="T:Suzunoya.ControlFlow.VNProcessGroup"/>.
            <br/>Tasks batched under a VNOperation do not need to check cancellation at their start or end.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNOperation.VN">
            <summary>
            The VN on which this operation is running.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNOperation.Suboperations">
            <summary>
            The (sequential) tasks that compose this operation.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNOperation.AllowUserSkip">
            <summary>
            Whether or not this operation can be soft-skipped by user input.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNOperation.Task">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNOperation.TaskInGroup(Suzunoya.ControlFlow.VNProcessGroup)">
            <summary>
            Create a task for running this operation on a specific <see cref="T:Suzunoya.ControlFlow.VNProcessGroup"/>.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNOperation.TaskWithCT(BagoumLib.Cancellation.ICancellee)">
            <summary>
            Create a task for running this operation with an extra cancellation token.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNOperation.C">
            <summary>
            Create a <see cref="T:Suzunoya.ControlFlow.VNConfirmTask"/> that runs this task, and then wait for user confirmation.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNOperation.Then(System.Action)">
            <summary>
            Create a <see cref="T:Suzunoya.ControlFlow.VNOperation"/> that first runs this task, and then the provided actions.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNOperation.Then(System.Func{BagoumLib.Cancellation.ICancellee,System.Threading.Tasks.Task}[])">
            <summary>
            Create a <see cref="T:Suzunoya.ControlFlow.VNOperation"/> that first runs this task, and then the provided tasks in sequence.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNOperation.And(Suzunoya.ControlFlow.VNOperation[])">
            <summary>
            Create a <see cref="T:Suzunoya.ControlFlow.VNOperation"/> that runs this task and the provided tasks in parallel.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNOperation.Then(Suzunoya.ControlFlow.VNOperation[])">
            <summary>
            Create a <see cref="T:Suzunoya.ControlFlow.VNOperation"/> that first runs this task, and then the provided tasks in sequence.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNOperation.Parallel(Suzunoya.ControlFlow.VNOperation[])">
            <summary>
            Create a <see cref="T:Suzunoya.ControlFlow.VNOperation"/> that runs the provided tasks in parallel.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNOperation.Parallel``1(System.Collections.Generic.IEnumerable{System.Func{``0,System.Threading.Tasks.Task}})">
            <summary>
            Create a <see cref="T:Suzunoya.ControlFlow.VNOperation"/> that runs the provided tasks in parallel.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNOperation.Sequential``1(System.Collections.Generic.IEnumerable{System.Func{``0,System.Threading.Tasks.Task}})">
            <summary>
            Create a <see cref="T:Suzunoya.ControlFlow.VNOperation"/> that runs the provided tasks in sequence.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNOperation.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNOperation.GetAwaiter">
            <inheritdoc/>
        </member>
        <member name="T:Suzunoya.ControlFlow.IVNState">
            <summary>
            A top-level stateful object containing all information for the execution of a visual novel.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.InstanceData">
            <summary>
            Save data specific to the save file backing this execution.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.GlobalData">
            <summary>
            Save data common to all save files.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.CToken">
            <summary>
            A cancellation token bounded by the lifetime of the <see cref="T:Suzunoya.ControlFlow.IVNState"/>.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.dT">
            <summary>
            Within the update loop, this is set to the delta-time of the frame.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.MainDialogue">
            <summary>
            The main dialogue box, if it exists.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.MainDialogueOrThrow">
            <summary>
            Get the main dialogue box or throw an exception.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.LoadToLocation(Suzunoya.ControlFlow.VNLocation,Suzunoya.Data.IInstanceData,System.Action)">
            <summary>
            Before loading, the <see cref="T:Suzunoya.ControlFlow.VNState"/> should be initialized with the
             save data that it had *before* running the BCtx being loaded into.
            <br/>The instance data at the time of save, with the BCtx partially executed,
             should be passed as `replayer` here.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.ResetInterruptStatus">
            <summary>
            Reset the interruption status on the current process layer.
            <br/>Call this after a BCTX is finished running in an ADV context to avoid cross-pollution of interruption.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.Contexts">
            <summary>
            A list of currently-executing nested <see cref="T:Suzunoya.ControlFlow.BoundedContext`1"/>s.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.ContextStarted">
            <summary>
            An event called when a <see cref="T:Suzunoya.ControlFlow.BoundedContext`1"/> begins, before it is added to <see cref="P:Suzunoya.ControlFlow.IVNState.Contexts"/>.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.ContextFinished">
            <summary>
            An event called when a <see cref="T:Suzunoya.ControlFlow.BoundedContext`1"/> ends, after its data is saved and
             after it is removed from <see cref="P:Suzunoya.ControlFlow.IVNState.Contexts"/>.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.ContextExecuting">
            <summary>
            True iff any <see cref="T:Suzunoya.ControlFlow.BoundedContext`1"/>s are currently executing on the VN.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.LowestContext">
            <summary>
            The most recently opened bounded context (<see cref="P:Suzunoya.ControlFlow.IVNState.Contexts"/>[^1]).
            <br/>Throws an exception if <see cref="P:Suzunoya.ControlFlow.IVNState.ContextExecuting"/> is false.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.SkippingMode">
            <summary>
            Returns the type of skipping the VN currently has active.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.SetSkipMode(System.Nullable{Suzunoya.ControlFlow.SkipMode})">
            <summary>
            Set the skip mode. Note that you cannot set the skip mode to LOADING.
            <br/>Some modes may be disabled (eg. autoplay, fastforward may be disabled for replay-safe uses).
            If you try to set the skip mode to a disabled mode, the function will return false. Otherwise,
            it will return true.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.TryFullSkip">
            <summary>
            If the VNState allows full-skipping, then skips the entire VNState (ie. destroy it).
            <br/>Returns true iff a skip was performed.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.AutoplayFastforwardAllowed">
            <summary>
            True if autoplay and fastforward are allowed as operations.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.TimePerAutoplayConfirm">
            <summary>
            The amount of time the VNState will wait before executing confirm commands while autoplaying.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.TimePerFastforwardConfirm">
            <summary>
            The amount of time the VNState will wait before executing confirm commands while fastforwarding.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.PauseGameplay">
            <summary>
            Implement this in derived classes to provide a way for entities such as dialogue boxes to pause the game.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.OpenLog">
            <summary>
            Implement this in derived classes to provide a way for entities such as dialogue boxes to open the dialogue log.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.DefaultRenderGroup">
            <summary>
            The default rendering group.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.Add``1(``0,Suzunoya.Display.RenderGroup,System.Nullable{System.Int32})">
            <summary>
            Add an entity to the VNState.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.Flush">
            <summary>
            Update with a timestep of zero to flush any cancelled coroutines.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.Update(System.Single)">
            <summary>
            Update all entities controlled by the VNState.
            </summary>
            <param name="deltaTime"></param>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.Run(System.Collections.IEnumerator)">
            <summary>
            Run a coroutine.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.Interrupt">
            <summary>
            Add a new interruption layer. This hangs the VNOperations on the current layer
             until it is resumed.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.WrapExternal``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Wrap an external task (that does not respect skip/cancel semantics) in a cancellable VNOperation.
            <br/>Note that this cannot be skipped. It will loop. (It can be cancelled.)
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.WrapExternal``1(System.String,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Wrap an external task (that does not respect skip/cancel semantics) in a <see cref="T:Suzunoya.ControlFlow.StrongBoundedContext`1"/>.
            <br/>Note that this cannot be skipped. It will loop. (It can be cancelled.)
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.SpinUntilConfirm(Suzunoya.ControlFlow.VNOperation)">
            <summary>
            Create a lazy task that completes when a Confirm is sent to the VNState (see <see cref="M:Suzunoya.ControlFlow.IVNState.UserConfirm"/>).
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.UserConfirm">
            <summary>
            Use this to proceed operations that require confirmation via SpinUntilConfirm.
            <returns>True iff a confirmation occurred.</returns>
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.GetOperationCanceller(Suzunoya.ControlFlow.VNProcessGroup@,System.Boolean)">
            <summary>
            Get a cToken that indicates when a task has been cancelled via skip.
            <br/>The caller should dispose the IDisposable when their task is complete, whether or not it has been skipped.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.SkipOperation">
            <summary>
            Skip the current operation. This will result in a skip even if user input skips are ignored.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.RequestSkipOperation">
            <summary>
            Called through user input. Use to skip animations or the like.
            <br/>Note that a skip may not occur as a result if user input is set to be ignored.
            <br/>Returns true if a skip occurred.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.ExecuteContext``1(Suzunoya.ControlFlow.BoundedContext{``0},System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes the bounded context, saves the output value in instance save data, and returns the output value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.RecordCG(Suzunoya.Entities.IGalleryable)">
            <summary>
            Record a gallery object as having been viewed ingame. (WIP)
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.InstanceDataChanged">
            <summary>
            Event that is published whenever the instance data changes,
             either due to the ending of a <see cref="T:Suzunoya.ControlFlow.BoundedContext`1"/>
             or a value manually saved via <see cref="M:Suzunoya.ControlFlow.VNState.SaveContextValue``1(System.String,``0,System.String[])"/>.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.UpdateInstanceData">
            <summary>
            Update and return the save data.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.DeleteAll">
            <summary>
            Run Predelete on all objects, then cascade destroy all currently running enumerators, then destroy all objects.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.DialogueLog">
            <summary>
            Log of all dialogue passed through this VNState.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.EntityCreated">
            <summary>
            Event called when an entity is added to the VNState.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.RenderGroupCreated">
            <summary>
            Event called when a render group is added to the VNState.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.AwaitingConfirm">
            <summary>
            Null if no target is waiting for a confirm.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.InputAllowed">
            <summary>
            Whether or not VN components should allow user input. Set this to false eg. during pauses.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.VNStateActive">
            <summary>
            When this is set to false, the VN is destroyed and no further operations can be run.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.OperationID">
            <summary>
            The current operation being executed on the VNState.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.Logs">
            <summary>
            All logs from executed VN code.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.IVNState.TryGetContextData``1(Suzunoya.Data.BoundedContextData{``0}@,System.String[])">
            <summary>
            Try to get the local data for the <see cref="T:Suzunoya.ControlFlow.BoundedContext`1"/> with the given parentage path.
            <br/>If a context is executed multiple times in different parent contexts, the local data is not shared.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.IVNState.AllowsRepeatContextExecution">
            <summary>
            True if it is possible to run a context twice.
            <br/>This will avoid throwing a "duplicate definition" exception.
            </summary>
        </member>
        <member name="T:Suzunoya.ControlFlow.VNState">
            <inheritdoc cref="T:Suzunoya.ControlFlow.IVNState"/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.dT">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.LoadTo">
            <summary>
            If this value is set (via LoadLocation),
            the VNState will almost instantaneously skip forward to the given location.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.LoadToLocation(Suzunoya.ControlFlow.VNLocation,Suzunoya.Data.IInstanceData,System.Action)">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.IsLoadSkipping">
            <summary>
            While this value is true, the current operation should be skipped in order to load to the target LoadTo.
            </summary>
        </member>
        <member name="F:Suzunoya.ControlFlow.VNState.FastforwardReadTextOnly">
            <summary>
            True iff only read text can be fast-forwarded. 
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.AllowFullSkip">
            <summary>
            True iff the entire VN sequence can be skipped with a single button.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.SetSkipMode(System.Nullable{Suzunoya.ControlFlow.SkipMode})">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.SkippingMode">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.TryFullSkip">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.AutoplayFastforwardAllowed">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.TimePerAutoplayConfirm">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.TimePerFastforwardConfirm">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.DefaultLoadSkipUnit">
            <summary>
            True iff bounded contexts with Unit return type can be skipped
            even if they have no save data.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.MainDialogue">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.DialogueLog">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.Tokens">
            <summary>
            The disposable tokens within the scope of this object.
            </summary>
        </member>
        <member name="F:Suzunoya.ControlFlow.VNState.extCToken">
            <summary>
            Cancellation token provided by external controls.
            </summary>
        </member>
        <member name="F:Suzunoya.ControlFlow.VNState.lifetimeToken">
            <summary>
            Cancellation token governing the lifetime of the VNState.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.ResetInterruptStatus">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.InterruptionStarted">
            <summary>
            Event called when an interruption layer is added.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.InterruptionEnded">
            <summary>
            Event called when an interruption layer is completed.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.CToken">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.Contexts">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.ContextStarted">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.ContextFinished">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.InstanceDataChanged">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.ContextsDescriptor">
            <summary>
            A string describing all the currently-opened <see cref="T:Suzunoya.ControlFlow.BoundedContext`1"/>s. This should only be used
             for logging purposes.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.DefaultRenderGroup">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.RenderGroups">
            <summary>
            All active rendering groups.
            </summary>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.EntityCreated">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.RenderGroupCreated">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.AwaitingConfirm">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.InputAllowed">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.OperationID">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.Logs">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.VNStateActive">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.InstanceData">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.MainDialogueOrThrow">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.ControlFlow.VNState.AllowsRepeatContextExecution">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.#ctor(BagoumLib.Cancellation.ICancellee,Suzunoya.Data.IInstanceData)">
            <summary>
            Create a <see cref="T:Suzunoya.ControlFlow.VNState"/>.
            </summary>
            <param name="extCToken">Cancellation token bounding the execution of the VN</param>
            <param name="save">Save file for the VN</param>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.MakeDefaultRenderGroup">
            <summary>
            Create a default rendering group. This is called at the end of the constructor.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.GetOperationCanceller(Suzunoya.ControlFlow.VNProcessGroup@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.ExecuteContext``1(Suzunoya.ControlFlow.BoundedContext{``0},System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Execute a <see cref="T:Suzunoya.ControlFlow.BoundedContext`1"/>, nesting its execution within any currently-running contexts.
            </summary>
            <param name="ctx"><see cref="T:Suzunoya.ControlFlow.BoundedContext`1"/> providing metadata of execution</param>
            <param name="innerTask">Task code to execute</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.TryGetContextData``1(Suzunoya.Data.BoundedContextData{``0}@,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.GetContextData(System.String[])">
            <summary>
            Get the local data for the <see cref="T:Suzunoya.ControlFlow.IBoundedContext"/> with the provided parentage path,
            or throw an exception if it is not found.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.GetContextData``1(System.String[])">
            <summary>
            Get the local data for the <see cref="T:Suzunoya.ControlFlow.BoundedContext`1"/> with the provided parentage path,
            or throw an exception if it is not found.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.GetContextResult``1(System.String[])">
            <summary>
            Get the saved result (ie. return value) of the context with the provided ID list.
            <br/>Will throw if the variable is not assigned.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.TryGetContextValue``1(System.String,``0@,System.String[])">
            <summary>
            Try to get a saved local variable assigned to the context with the provided ID list.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.GetContextValue``1(System.String,System.String[])">
            <summary>
            Get a saved local variable assigned to the context with the provided ID list.
            <br/>Will throw if the variable is not assigned.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.TryGetLocalValue``1(System.String,``0@)">
            <summary>
            Try to get a saved variable assigned to the current context.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.GetLocalValue``1(System.String)">
            <summary>
            Get a saved variable assigned to the current context.
            <br/>Will throw if the variable is not assigned.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.GetLocalValueOrDefault``1(System.String,System.Func{``0})">
            <summary>
            Try to get a saved variable assigned to the current context.
            <br/>If it does not exist, create the variable and assign it a
             value from the defaulter function.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.SaveContextValue``1(System.String,``0,System.String[])">
            <summary>
            WARNING: THIS FUNCTION MAY NOT BE SAFE TO CALL WITHIN A BOUNDEDCONTEXT.
             EDITING OTHER CONTEXTS' DATA MAY CAUSE ISSUES WITH LOADING.
            Save a variable to the context with the provided ID list. It can be accessed via
            <see cref="M:Suzunoya.ControlFlow.VNState.GetContextValue``1(System.String,System.String[])"/> or <see cref="M:Suzunoya.ControlFlow.VNState.GetLocalValue``1(System.String)"/>.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.SaveLocalValue``1(System.String,``0)">
            <summary>
            Save a variable to the current bounded context. It can be accessed via
            <see cref="M:Suzunoya.ControlFlow.VNState.GetContextValue``1(System.String,System.String[])"/> or <see cref="M:Suzunoya.ControlFlow.VNState.GetLocalValue``1(System.String)"/>.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.GetFlag(System.String[])">
            <summary>
            Get the boolean result of a bounded context.
            <br/>Alias for <see cref="M:Suzunoya.ControlFlow.VNState.GetContextValue``1(System.String,System.String[])"/> with T=bool
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.Flush">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.Update(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.Find``1">
            <summary>
            Find an entity of type T, or throw.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.FindEntity``1">
            <summary>
            Find an entity of type T, or return null.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.FindEntity(System.Type)">
            <summary>
            Find an entity of the provided type, or return null.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.FindEntities``1">
            <summary>
            Find all entities of the provided type.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.Add``1(``0,Suzunoya.Display.RenderGroup,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.Wait(System.Single)">
            <summary>
            Create a <see cref="T:Suzunoya.ControlFlow.VNOperation"/> that waits for the given amount of time.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.Wait(System.Func{System.Boolean})">
            <summary>
            Create a <see cref="T:Suzunoya.ControlFlow.VNOperation"/> that waits until the condition is satisfied.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.WrapExternal``1(System.Threading.Tasks.Task{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.Run(System.Collections.IEnumerator)">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.Parallel(Suzunoya.ControlFlow.ILazyAwaitable[])">
            <summary>
            Run multiple <see cref="T:Suzunoya.ControlFlow.ILazyAwaitable"/>s in parallel.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.Sequential(Suzunoya.ControlFlow.ILazyAwaitable[])">
            <summary>
            Run multiple <see cref="T:Suzunoya.ControlFlow.ILazyAwaitable"/>s in sequence.
            </summary>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.Interrupt">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.SpinUntilConfirm(Suzunoya.ControlFlow.VNOperation)">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.UserConfirm">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.SkipOperation">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.RequestSkipOperation">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.RecordCG(Suzunoya.Entities.IGalleryable)">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState._DeleteAll">
            <summary>
            Inner handler called by <see cref="M:Suzunoya.ControlFlow.VNState.DeleteAll"/> to destroy all dependencies of this object.
            </summary>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.DeleteAll">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.UpdateInstanceData">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.OpenLog">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.ControlFlow.VNState.PauseGameplay">
            <inheritdoc/>
        </member>
        <member name="T:Suzunoya.Data.IGlobalData">
            <summary>
            Container for data relevant to VN execution that is shared by all instances.
            </summary>
        </member>
        <member name="M:Suzunoya.Data.IGlobalData.LineRead(System.String)">
            <summary>
            Inform the save data that a certain line has been read.
            </summary>
        </member>
        <member name="M:Suzunoya.Data.IGlobalData.IsLineRead(System.String)">
            <summary>
            Check whether a line has been read.
            </summary>
        </member>
        <member name="T:Suzunoya.Data.GlobalData">
            <summary>
            A barebones implementation of <see cref="T:Suzunoya.Data.IGlobalData"/>.
            </summary>
        </member>
        <member name="T:Suzunoya.Data.BoundedContextData">
            <summary>
            A recursive data structure containing locals and results for bounded contexts in the process
            of execution or having finished execution.
            The result value is typed in subclass <see cref="T:Suzunoya.Data.BoundedContextData`1"/>.
            </summary>
            <param name="Key">String key for this bounded context. If empty, it cannot be accurately saved.</param>
            <param name="Locals">Variables saved to this bounded context via <see cref="M:Suzunoya.ControlFlow.VNState.SaveLocalValue``1(System.String,``0)"/>.</param>
            <param name="Nested">Data for bounded contexts executed within this one.</param>
        </member>
        <member name="M:Suzunoya.Data.BoundedContextData.#ctor(System.String,Suzunoya.Data.KeyValueRepository,System.Collections.Generic.Dictionary{System.String,Suzunoya.Data.BoundedContextData})">
            <summary>
            A recursive data structure containing locals and results for bounded contexts in the process
            of execution or having finished execution.
            The result value is typed in subclass <see cref="T:Suzunoya.Data.BoundedContextData`1"/>.
            </summary>
            <param name="Key">String key for this bounded context. If empty, it cannot be accurately saved.</param>
            <param name="Locals">Variables saved to this bounded context via <see cref="M:Suzunoya.ControlFlow.VNState.SaveLocalValue``1(System.String,``0)"/>.</param>
            <param name="Nested">Data for bounded contexts executed within this one.</param>
        </member>
        <member name="P:Suzunoya.Data.BoundedContextData.Key">
            <summary>String key for this bounded context. If empty, it cannot be accurately saved.</summary>
        </member>
        <member name="P:Suzunoya.Data.BoundedContextData.Locals">
            <summary>Variables saved to this bounded context via <see cref="M:Suzunoya.ControlFlow.VNState.SaveLocalValue``1(System.String,``0)"/>.</summary>
        </member>
        <member name="P:Suzunoya.Data.BoundedContextData.Nested">
            <summary>Data for bounded contexts executed within this one.</summary>
        </member>
        <member name="M:Suzunoya.Data.BoundedContextData.SaveNested(Suzunoya.Data.BoundedContextData,System.Boolean)">
            <summary>
            Save the information of a bounded context executed while nested within this one.
            </summary>
        </member>
        <member name="M:Suzunoya.Data.BoundedContextData.HasNested(System.String)">
            <summary>
            Check if there exists saved information for a nested bounded context with the provided key.
            </summary>
        </member>
        <member name="M:Suzunoya.Data.BoundedContextData.GetNested(System.String)">
            <summary>
            Get the saved information for a nested bounded context with the provided key.
            </summary>
        </member>
        <member name="M:Suzunoya.Data.BoundedContextData.GetNested``1(System.String)">
            <inheritdoc cref="M:Suzunoya.Data.BoundedContextData.GetNested(System.String)"/>
        </member>
        <member name="M:Suzunoya.Data.BoundedContextData.CastTo``1">
            <summary>
            Cast this to a more specific type.
            </summary>
        </member>
        <member name="T:Suzunoya.Data.BoundedContextData`1">
            <summary>
            See <see cref="T:Suzunoya.Data.BoundedContextData"/>
            </summary>
        </member>
        <member name="M:Suzunoya.Data.BoundedContextData`1.#ctor(System.String,BagoumLib.Functional.Maybe{`0},Suzunoya.Data.KeyValueRepository,System.Collections.Generic.Dictionary{System.String,Suzunoya.Data.BoundedContextData})">
            <summary>
            See <see cref="T:Suzunoya.Data.BoundedContextData"/>
            </summary>
        </member>
        <member name="P:Suzunoya.Data.BoundedContextData`1.Result">
            <summary>
            Result returned by the bounded context.
            <br/>This is None while the context is executing.
            </summary>
        </member>
        <member name="T:Suzunoya.Data.IInstanceData">
            <summary>
            Data for a (saveable) in-progress VN sequence.
            </summary>
        </member>
        <member name="P:Suzunoya.Data.IInstanceData.GlobalData">
            <summary>
            Global save data, shared between instances.
            </summary>
        </member>
        <member name="P:Suzunoya.Data.IInstanceData.Location">
            <summary>
            Position in any executing VN dialogue.
            </summary>
        </member>
        <member name="M:Suzunoya.Data.IInstanceData.SaveBCtxData(Suzunoya.Data.BoundedContextData,System.Boolean)">
            <summary>
            Save the locals and result information from a top-level bounded context execution.
            </summary>
        </member>
        <member name="M:Suzunoya.Data.IInstanceData.HasBCtxData(System.String)">
            <summary>
            Check if there exists saved top-level bounded context information for the provided key.
            </summary>
        </member>
        <member name="M:Suzunoya.Data.IInstanceData.GetBCtxData(System.String)">
            <summary>
            Get the locals and result information from a top-level bounded context with the provided key.
            </summary>
        </member>
        <member name="M:Suzunoya.Data.IInstanceData.GetBCtxData``1(System.String)">
            <inheritdoc cref="M:Suzunoya.Data.IInstanceData.GetBCtxData(System.String)"/>
        </member>
        <member name="M:Suzunoya.Data.IInstanceData.TryGetChainedData(System.String[])">
            <summary>
            Get the locals and result information from a bounded context that was executed while nested in
             other bounded contexts.
            </summary>
            <param name="keys">Bounded context keys describing the nesting state, starting with the top-level and ending with the key for the bounded context that needs to be retrieved.</param>
        </member>
        <member name="M:Suzunoya.Data.IInstanceData.TryGetChainedData``1(System.String[])">
            <inheritdoc cref="M:Suzunoya.Data.IInstanceData.TryGetChainedData(System.String[])"/>
        </member>
        <member name="M:Suzunoya.Data.IInstanceData.TryGetChainedData``1(System.Collections.Generic.IList{Suzunoya.ControlFlow.OpenedContext})">
            <inheritdoc cref="M:Suzunoya.Data.IInstanceData.TryGetChainedData(System.String[])"/>
        </member>
        <member name="T:Suzunoya.Data.InstanceData">
            <summary>
            A barebones implementation of <see cref="T:Suzunoya.Data.IInstanceData"/>.
            </summary>
        </member>
        <member name="P:Suzunoya.Data.InstanceData.FrozenGlobalData">
            <summary>
            A frozen copy of the global data constructed when the instance data is initially created.
            </summary>
        </member>
        <member name="P:Suzunoya.Data.InstanceData.GlobalData">
            <inheritdoc cref="P:Suzunoya.Data.IInstanceData.GlobalData"/>
        </member>
        <member name="P:Suzunoya.Data.InstanceData.Location">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.Data.InstanceData.BCtxData">
            <summary>
            Top-level saved bounded context information.
            </summary>
        </member>
        <member name="M:Suzunoya.Data.InstanceData.#ctor">
            <summary>
            Json constructor, do not use.
            </summary>
        </member>
        <member name="M:Suzunoya.Data.InstanceData.#ctor(Suzunoya.Data.GlobalData)">
            <summary>
            </summary>
            <param name="global">A global data object. The constructor will freeze this object (ie. a deep copy)
            and provide it as <see cref="P:Suzunoya.Data.InstanceData.FrozenGlobalData"/>,
            and also provide a direct link as <see cref="P:Suzunoya.Data.InstanceData.GlobalData"/>.</param>
        </member>
        <member name="M:Suzunoya.Data.InstanceData._SetGlobalData_OnlyUseForInitialization(Suzunoya.Data.GlobalData)">
            <summary>
            Set the global data.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Suzunoya.Data.InstanceData.SaveBCtxData(Suzunoya.Data.BoundedContextData,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Data.InstanceData.HasBCtxData(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Data.InstanceData.GetBCtxData(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Data.InstanceData.GetBCtxData``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Data.InstanceData.Deserialize``1(System.String,Suzunoya.Data.GlobalData)">
            <summary>
            Recreate an <see cref="T:Suzunoya.Data.InstanceData"/> object from a JSON string.
            Will throw an exception if deserialization fails.
            </summary>
            <param name="serialized">The serialized JSON string.</param>
            <param name="currentGlobal">The current global data information. This will be linked as
            <see cref="P:Suzunoya.Data.InstanceData.GlobalData"/>, while <see cref="P:Suzunoya.Data.InstanceData.FrozenGlobalData"/> will be read from the JSON.</param>
            <returns></returns>
        </member>
        <member name="M:Suzunoya.Data.IKeyValueRepository.SaveData``1(System.String,``0)">
            <summary>
            Saves a key-value pair in the repository. Overwrites if existing. Noop if key is null.
            </summary>
        </member>
        <member name="M:Suzunoya.Data.IKeyValueRepository.GetData``1(System.String)">
            <summary>
            Retrieve a value from the repository. Throws if nonexistent or key is null.
            </summary>
        </member>
        <member name="M:Suzunoya.Data.IKeyValueRepository.HasData(System.String)">
            <summary>
            Check if a key exists in the repository. False if key is null.
            </summary>
        </member>
        <member name="P:Suzunoya.Data.IKeyValueRepository.Keys">
            <summary>
            Get all keys saved in this repository.
            </summary>
        </member>
        <member name="M:Suzunoya.Dialogue.SpeechParser.Parse(System.String)">
            <summary>
            Parse rich text tags out of a raw string.
            </summary>
            <param name="raw">Raw string</param>
            <returns>Parsed content</returns>
            <exception cref="T:System.Exception">Thrown if parsing fails</exception>
        </member>
        <member name="M:Suzunoya.Dialogue.SpeechTag.ModifySettings(Suzunoya.Dialogue.SpeechSettings)">
            <summary>
            Apply modifications to the text unrolling settings.
            </summary>
        </member>
        <member name="P:Suzunoya.Dialogue.SpeechTag.RequiresRender">
            <summary>
            If FALSE, the tag is used internally for data management and does not need to be handled by rendering plugins.
            </summary>
        </member>
        <member name="T:Suzunoya.Dialogue.SpeechTag.Unknown">
            <summary>
            A speech tag not handled by Suzunoya.
            </summary>
        </member>
        <member name="M:Suzunoya.Dialogue.SpeechTag.Unknown.#ctor(System.String,System.String)">
            <summary>
            A speech tag not handled by Suzunoya.
            </summary>
        </member>
        <member name="T:Suzunoya.Dialogue.SpeechTag.Speed">
            <summary>
            Changes the speed of text unrolling.
            </summary>
        </member>
        <member name="M:Suzunoya.Dialogue.SpeechTag.Speed.#ctor(System.Single)">
            <summary>
            Changes the speed of text unrolling.
            </summary>
        </member>
        <member name="T:Suzunoya.Dialogue.SpeechTag.Silent">
            <summary>
            Disables rolling events.
            </summary>
        </member>
        <member name="T:Suzunoya.Dialogue.SpeechTag.Color">
            <summary>
            Changes text color.
            </summary>
        </member>
        <member name="M:Suzunoya.Dialogue.SpeechTag.Color.#ctor(System.String)">
            <summary>
            Changes text color.
            </summary>
        </member>
        <member name="T:Suzunoya.Dialogue.SpeechTag.Furigana">
            <summary>
            Shows furigana (ruby) next to the main text.
            </summary>
        </member>
        <member name="M:Suzunoya.Dialogue.SpeechTag.Furigana.#ctor(System.String)">
            <summary>
            Shows furigana (ruby) next to the main text.
            </summary>
        </member>
        <member name="F:Suzunoya.Display.DisplayConfig.ZoomCenter">
            <summary>
            In (-1,1) screen coordinates, the location on the screen that is targeted by Zoom.
            </summary>
        </member>
        <member name="F:Suzunoya.Display.DisplayConfig.Zoom">
            <summary>
            The amount of zoom to apply in each coordinate axis.
            </summary>
        </member>
        <member name="T:Suzunoya.Display.RenderGroup">
            <summary>
            A group of objects rendered by the same camera to a unique texture.
            The Location/EulerAnglesD fields should be considered as referring to the transform
             of the render group's associated camera.
            The Scale field should be considered as referring to axis-specific zoom multipliers. As this requires nontrivial
             shader implementation in some engines, it is separated from Zoom, which is a single field.
            A render group is also a rendered object and this has similar fields to IRendered.
            </summary>
        </member>
        <member name="P:Suzunoya.Display.RenderGroup.NestedRenderGroup">
            <summary>
            A render group may render to another render group. Roughly equivalent to IRendered.RenderGroup,
             but it is a valid case for this to be null (in which case it renders to screen).
            </summary>
        </member>
        <member name="P:Suzunoya.Display.RenderGroup.RenderLayer">
            <summary>
            Equivalent to IRendered.RenderLayer.
            </summary>
        </member>
        <member name="P:Suzunoya.Display.RenderGroup.Priority">
            <summary>
            Equivalent to IRendered.SortingID.
            </summary>
        </member>
        <member name="P:Suzunoya.Display.RenderGroup.Visible">
            <summary>
            Whether or not the render group is visible.
            </summary>
        </member>
        <member name="P:Suzunoya.Display.RenderGroup.Tint">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.Display.RenderGroup.ComputedTint">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.Display.RenderGroup.Zoom">
            <summary>
            The camera zoom applied to the render group.
            </summary>
        </member>
        <member name="P:Suzunoya.Display.RenderGroup.ZoomTarget">
            <summary>
            The target that should be zoomed in on or away from when <see cref="P:Suzunoya.Display.RenderGroup.Zoom"/> != 1.
            </summary>
        </member>
        <member name="P:Suzunoya.Display.RenderGroup.ZoomTransformOffset">
            <summary>
            An offset that should be added to the camera position to handle simulating <see cref="P:Suzunoya.Display.RenderGroup.ZoomTarget"/> on
             cameras that only support zooming upon their center.
            </summary>
        </member>
        <member name="P:Suzunoya.Display.RenderGroup.Contents">
            <summary>
            The elements rendered within this rendering group.
            </summary>
        </member>
        <member name="P:Suzunoya.Display.RenderGroup.RendererAdded">
            <summary>
            An event that is fired whenever a new element is added to this rendering group.
            </summary>
        </member>
        <member name="M:Suzunoya.Display.RenderGroup.Add(Suzunoya.Entities.IRendered)">
            <summary>
            Add a new element to this rendering group.
            </summary>
        </member>
        <member name="M:Suzunoya.Display.RenderGroup.SortContents">
            <summary>
            Sort <see cref="P:Suzunoya.Display.RenderGroup.Contents"/> by sorting ID.
            </summary>
        </member>
        <member name="M:Suzunoya.Display.RenderGroup.Delete">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Display.RenderGroup.ClearEvents">
            <inheritdoc />
        </member>
        <member name="T:Suzunoya.Entities.ICharacter">
            <summary>
            Interface for entities that are VN characters. Characters can speak in dialogue boxes.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.ICharacter.Emote">
            <summary>
            Emote assigned to the character.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.ICharacter.SpeechCfg">
            <summary>
            Speech settings for the character.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.ICharacter.Name">
            <summary>
            Name of the character.
            </summary>
        </member>
        <member name="T:Suzunoya.Entities.Character">
            A character entity.
        </member>
        <member name="P:Suzunoya.Entities.Character.SpeechCfg">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.Entities.Character.Name">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.Entities.Character.Emote">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Entities.Character.Say(BagoumLib.Culture.LString,Suzunoya.Entities.IDialogueBox,Suzunoya.Entities.SpeakFlags)">
            <inheritdoc cref="M:Suzunoya.Entities.IDialogueBox.Say(BagoumLib.Culture.LString,Suzunoya.Entities.ICharacter,Suzunoya.Entities.SpeakFlags)"/>
        </member>
        <member name="M:Suzunoya.Entities.Character.SayC(BagoumLib.Culture.LString,Suzunoya.Entities.IDialogueBox,Suzunoya.Entities.SpeakFlags)">
            <summary>
            Have the character speak into the dialogue box, then wait for user confirmation.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.Character.AlsoSay(BagoumLib.Culture.LString,Suzunoya.Entities.IDialogueBox,Suzunoya.Entities.SpeakFlags)">
            <summary>
            Have the character speak into the dialogue box without clearing the existing text.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.Character.AlsoSayN(BagoumLib.Culture.LString,Suzunoya.Entities.IDialogueBox,Suzunoya.Entities.SpeakFlags)">
            <summary>
            Have the character speak into the dialogue box without clearing the existing text
             but adding a newline before printing the new text.
            </summary>
        </member>
        <member name="T:Suzunoya.Entities.SpeakFlags">
            <summary>
            Flags describing features for dialogue execution.
            </summary>
        </member>
        <member name="F:Suzunoya.Entities.SpeakFlags.None">
            <summary>
            No special features required.
            </summary>
        </member>
        <member name="F:Suzunoya.Entities.SpeakFlags.DontClearText">
            <summary>
            By default, every text command will reset all visible text and the speaker. To avoid this,
            use this flag (or call <see cref="M:Suzunoya.Helpers.AlsoSay(Suzunoya.Entities.IDialogueBox,BagoumLib.Culture.LString,Suzunoya.Entities.ICharacter,Suzunoya.Entities.SpeakFlags)"/>).
            </summary>
        </member>
        <member name="F:Suzunoya.Entities.SpeakFlags.Anonymous">
            <summary>
            Don't show the name, image, etc of the speaker on the dialogue box. This should be
            utilized by the mimic class.
            </summary>
        </member>
        <member name="F:Suzunoya.Entities.SpeakFlags.Default">
            <summary>
            Default value- <see cref="F:Suzunoya.Entities.SpeakFlags.None"/>
            </summary>
        </member>
        <member name="T:Suzunoya.Entities.IDialogueBox">
            <summary>
            Interface for dialogue boxes.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.IDialogueBox.DialogueStarted">
            <summary>
            A dialogue request starts with a DialogueStarted proc containing all information of the dialogue request.
            It then unrolls the text one character at a time into <see cref="P:Suzunoya.Entities.IDialogueBox.Dialogue"/>.
            Finally, it procs <see cref="P:Suzunoya.Entities.IDialogueBox.DialogueFinished"/>.
            <br/>Note: the VNContainer should be listening to this event to accumulate the dialogue log.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.IDialogueBox.Dialogue">
            <summary>
            All text fragments currently visible in the dialogue box. Cleared when <see cref="M:Suzunoya.Entities.IDialogueBox.Clear(System.Nullable{Suzunoya.Entities.SpeakFlags})"/> is called.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.IDialogueBox.DialogueFinished">
            <summary>
            Event procced when a line of dialogue is finished unrolling.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.IDialogueBox.DialogueCleared">
            <summary>
            Event procced when <see cref="M:Suzunoya.Entities.IDialogueBox.Clear(System.Nullable{Suzunoya.Entities.SpeakFlags})"/> is called.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.IDialogueBox.Speaker">
            <summary>
            The current character speaking in the dialogue box.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.IDialogueBox.Clear(System.Nullable{Suzunoya.Entities.SpeakFlags})">
            <summary>
            Clear the dialogue box.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.IDialogueBox.Say(BagoumLib.Culture.LString,Suzunoya.Entities.ICharacter,Suzunoya.Entities.SpeakFlags)">
            <summary>
            Have a character speak into the dialogue box.
            </summary>
        </member>
        <member name="T:Suzunoya.Entities.DialogueOp">
            <summary>
            A line of dialogue to be printed into the dialogue box.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.DialogueOp.Line">
            <summary>
            Dialogue text.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.DialogueOp.Speaker">
            <summary>
            The character that is speaking.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.DialogueOp.Flags">
            <inheritdoc cref="T:Suzunoya.Entities.SpeakFlags"/>
        </member>
        <member name="P:Suzunoya.Entities.DialogueOp.Location">
            <summary>
            The <see cref="T:Suzunoya.ControlFlow.VNLocation"/> produced by the dialogue operation.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.DialogueOp.#ctor(BagoumLib.Culture.LString,Suzunoya.Entities.ICharacter,Suzunoya.Entities.SpeakFlags,Suzunoya.ControlFlow.VNLocation)">
            <summary>
            Create a new <see cref="T:Suzunoya.Entities.DialogueOp"/>.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.DialogueOp.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Suzunoya.Entities.DialogueBox">
            <summary>
            An entity representing a dialogue box.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.DialogueBox.DialogueStarted">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.Entities.DialogueBox.Dialogue">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.Entities.DialogueBox.DialogueFinished">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.Entities.DialogueBox.DialogueCleared">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.Entities.DialogueBox.Speaker">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Entities.DialogueBox.Clear(System.Nullable{Suzunoya.Entities.SpeakFlags})">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Entities.DialogueBox.Say(BagoumLib.Culture.LString,Suzunoya.Entities.ICharacter,Suzunoya.Entities.SpeakFlags)">
            <inheritdoc/>
        </member>
        <member name="T:Suzunoya.Entities.EntityState">
            <summary>
            The state of the entity in its lifetime.
            </summary>
        </member>
        <member name="F:Suzunoya.Entities.EntityState.Active">
            <summary>
            The entity is currently active.
            </summary>
        </member>
        <member name="F:Suzunoya.Entities.EntityState.Predeletion">
            <summary>
            The entity is in the predeletion stage, when its events are cleared.
            </summary>
        </member>
        <member name="F:Suzunoya.Entities.EntityState.Deleted">
            <summary>
            The entity is dead.
            </summary>
        </member>
        <member name="T:Suzunoya.Entities.IEntity">
            <summary>
            Interface representing top-level entities that can be added under <see cref="T:Suzunoya.ControlFlow.IVNState"/>.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.IEntity.MimicRequested">
            <summary>
            Plugin libraries generally will try to construct mimics for all entities.
            However, some entities may not desire mimics (such as unsprited characters).
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.IEntity.LifetimeToken">
            <summary>
            Token representing the life of this entity. When cancelled, the entity is destroyed.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.IEntity.Tween(BagoumLib.Transitions.ITransition)">
            <summary>
            Run a tweening function on the entity.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.IEntity.Container">
            <summary>
            VN to which this entity is attached.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.IEntity.Update(System.Single)">
            <summary>
            Update the entity.
            </summary>
            <param name="deltaTime">Time since last update</param>
        </member>
        <member name="P:Suzunoya.Entities.IEntity.OnUpdate">
            <summary>
            Evented procced after Update is complete. Mimics may listen to this.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.IEntity.PreDelete">
            <summary>
            Clear events and other linked data on the object (but not the <see cref="P:Suzunoya.Entities.IEntity.EntityActive"/> event).
            <br/>Run within <see cref="M:Suzunoya.Entities.IEntity.Delete"/>, but can be manually run earlier.
            <br/>When calling <see cref="M:Suzunoya.ControlFlow.IVNState.DeleteAll"/>,
             PreDelete is run on all entities before Delete is run on any.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.IEntity.Delete">
            <summary>
            Destroy the object and sets EntityActive to false.
            Same as <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
            <exception cref="T:System.Exception">Thrown if any running coroutines cannot be closed.</exception>
        </member>
        <member name="P:Suzunoya.Entities.IEntity.EntityActive">
            <summary>
            When this is set to false, the object is destroyed and no further operations can be run.
            <br/>Do not modify this externally. To destroy the object, run Delete().
            </summary>
        </member>
        <member name="T:Suzunoya.Entities.Entity">
            <summary>
            A top-level entity that can be added under <see cref="T:Suzunoya.ControlFlow.VNState"/>.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.Entity.MimicRequested">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.Entities.Entity.Container">
            <inheritdoc/>
        </member>
        <member name="F:Suzunoya.Entities.Entity.tokens">
            <summary>
            Disposable tokens bounded by the lifetime of this entity.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.Entity.LifetimeToken">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.Entities.Entity.OnUpdate">
            <inheritdoc/>
        </member>
        <member name="P:Suzunoya.Entities.Entity.EntityActive">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Entities.Entity.Update(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Entities.Entity.Run(System.Collections.IEnumerator,BagoumLib.DataStructures.CoroutineOptions)">
            <summary>
            Run a corountine on this entity.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.Entity.AddToken(System.IDisposable)">
            <summary>
            Add a token to <see cref="F:Suzunoya.Entities.Entity.tokens"/>.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.Entity.Listen``1(System.IObservable{``0},System.Action{``0})">
            <summary>
            Subscribe to an event.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.Entity.Tween(BagoumLib.Transitions.ITransition)">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Entities.Entity.PreDelete">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Entities.Entity.ClearEvents">
            <summary>
            Run Event.OnCompleted for data events on this entity.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.Entity.SoftDelete">
            <summary>
            SoftSkip all coroutines before deleting.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.Entity.Delete">
            <inheritdoc/>
        </member>
        <member name="M:Suzunoya.Entities.Entity.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Suzunoya.Entities.ITinted">
            <summary>
            Interface for entities that can be tinted.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.ITinted.Tint">
            <summary>
            Base tint of the entity.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.ITinted.ComputedTint">
            <summary>
            Base tint with disturbance effects applied.
            </summary>
        </member>
        <member name="T:Suzunoya.Entities.IRendered">
            <summary>
            Interface for renderable entities.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.IRendered.RenderGroup">
            <summary>
            The render group under which this object renders.
            <br/>A basic plugin setup would be to associate a RenderGroup with an engine camera and game-object layer,
             then treat RenderLayer and SortingID as equivalent to engine "sorting layer" / "order in layer".
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.IRendered.RenderLayer">
            <summary>
            The rendering layer of the entity.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.IRendered.SortingID">
            <summary>
            The sorting ID of the entity.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.IRendered.UseSortingIDAsReference">
            <summary>
            Whether or not the render group should consider this sorting ID when automatically assigning sorting IDs.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.IRendered.Visible">
            <summary>
            Whether or not the entity is visible.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.IRendered.AddToRenderGroup(Suzunoya.Display.RenderGroup,System.Nullable{System.Int32})">
            <summary>
            Set that this object should be rendered under the provided rendering group.
            <br/>If the object is already associated with a render group,
            then it should deattach from the existing render group.
            </summary>
        </member>
        <member name="T:Suzunoya.Entities.Rendered">
            <summary>
            An entity with a transform that can be rendered.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.Rendered.RenderGroup">
            <inheritdoc />
        </member>
        <member name="P:Suzunoya.Entities.Rendered.RenderLayer">
            <inheritdoc />
        </member>
        <member name="P:Suzunoya.Entities.Rendered.SortingID">
            <inheritdoc />
        </member>
        <member name="P:Suzunoya.Entities.Rendered.UseSortingIDAsReference">
            <inheritdoc />
        </member>
        <member name="P:Suzunoya.Entities.Rendered.Visible">
            <inheritdoc />
        </member>
        <member name="P:Suzunoya.Entities.Rendered.Tint">
            <inheritdoc />
        </member>
        <member name="P:Suzunoya.Entities.Rendered.ComputedTint">
            <inheritdoc />
        </member>
        <member name="P:Suzunoya.Entities.Rendered.Alpha">
            <summary>
            The alpha value of the tint. GET returns the computed alpha, SET sets the base alpha.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.Rendered.DefaultRenderLayer">
            <summary>
            The default rendering layer for this class.
            <br/>NB: this should be "effectively static" as it is called in the constructor.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.Rendered.#ctor(System.Nullable{System.Numerics.Vector3},System.Nullable{System.Numerics.Vector3},System.Nullable{System.Numerics.Vector3},System.Boolean,System.Nullable{BagoumLib.DataStructures.FColor})">
            <summary>
            Constructor for <see cref="T:Suzunoya.Entities.Rendered"/>.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.Rendered.AddToRenderGroup(Suzunoya.Display.RenderGroup,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Suzunoya.Entities.Rendered.BindParent(Suzunoya.Entities.ITransform)">
            <inheritdoc />
        </member>
        <member name="M:Suzunoya.Entities.Rendered.Delete">
            <inheritdoc />
        </member>
        <member name="M:Suzunoya.Entities.Rendered.Hide">
            <summary>
            Short for Visible.Value = false
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.Rendered.Show">
            <summary>
            Short for Visible.Value = true
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.Rendered.ClearEvents">
            <inheritdoc />
        </member>
        <member name="T:Suzunoya.Entities.ITransform">
            <summary>
            Interface for entities that have transforms.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.ITransform.LocalLocation">
            <summary>
            Base location of the entity.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.ITransform.ComputedLocalLocation">
            <summary>
            Location with disturbance effects such as screenshake or displacement applied.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.ITransform.ComputedLocation">
            <summary>
            Location including offset of any parent objects.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.ITransform.EulerAnglesD">
            <summary>
            Base euler angles of the entity.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.ITransform.ComputedEulerAnglesD">
            <summary>
            Euler angles with disturbance effects applied.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.ITransform.Scale">
            <summary>
            Base scale of the entity.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.ITransform.ComputedScale">
            <summary>
            Scale with disturbance effects applied.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.ITransform.Children">
            <summary>
            Children of this transform.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.ITransform.Parent">
            <summary>
            Parent of this transform.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.ITransform.NotifyChildCreated(Suzunoya.Entities.ITransform)">
            <summary>
            Add a child to this object's <see cref="P:Suzunoya.Entities.ITransform.Children"/> list.
            <br/>Any modification of child properties caused by parenting should be handled by the caller,
            not this function.
            </summary>
        </member>
        <member name="T:Suzunoya.Entities.Transform">
            <summary>
            An entity with a transform.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.Transform.LocalLocation">
            <inheritdoc />
        </member>
        <member name="P:Suzunoya.Entities.Transform.ComputedLocalLocation">
            <inheritdoc />
        </member>
        <member name="P:Suzunoya.Entities.Transform.ComputedLocation">
            <inheritdoc />
        </member>
        <member name="P:Suzunoya.Entities.Transform.EulerAnglesD">
            <inheritdoc />
        </member>
        <member name="P:Suzunoya.Entities.Transform.ComputedEulerAnglesD">
            <inheritdoc />
        </member>
        <member name="P:Suzunoya.Entities.Transform.Scale">
            <inheritdoc />
        </member>
        <member name="P:Suzunoya.Entities.Transform.ComputedScale">
            <inheritdoc />
        </member>
        <member name="F:Suzunoya.Entities.Transform.parentTokens">
            <summary>
            Tokens that control dependencies on the parent.
            </summary>
        </member>
        <member name="P:Suzunoya.Entities.Transform.Children">
            <inheritdoc />
        </member>
        <member name="P:Suzunoya.Entities.Transform.Parent">
            <inheritdoc />
        </member>
        <member name="M:Suzunoya.Entities.Transform.#ctor(System.Nullable{System.Numerics.Vector3},System.Nullable{System.Numerics.Vector3},System.Nullable{System.Numerics.Vector3})">
            <summary>
            Create a transform entity.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.Transform.BindParent(Suzunoya.Entities.ITransform)">
            <summary>
            Set the parent of this transform. This means that the location, euler angles, and scale will be
             offset by the parent's values.
            </summary>
        </member>
        <member name="M:Suzunoya.Entities.Transform.NotifyChildCreated(Suzunoya.Entities.ITransform)">
            <inheritdoc />
        </member>
        <member name="M:Suzunoya.Entities.Transform.ClearEvents">
            <inheritdoc />
        </member>
        <member name="M:Suzunoya.Entities.Transform.Delete">
            <inheritdoc />
        </member>
        <member name="T:Suzunoya.Helpers">
            <summary>
            Various helper extensions for Suzunoya code.
            </summary>
        </member>
        <member name="M:Suzunoya.Helpers.AssertActive``1(``0)">
            <summary>
            Check that a VN is active before returning it. If it is inactive, throw <see cref="T:Suzunoya.ControlFlow.DestroyedObjectException"/>.
            </summary>
        </member>
        <member name="M:Suzunoya.Helpers.BindLifetime(Suzunoya.Entities.IEntity,BagoumLib.Cancellation.ICancellee)">
            <summary>
            Makes a derived cancellee that is cancelled by both the entity lifetime token and the given cT.
            <br/>Coroutines run on entities should pass their given tokens through this function.
            </summary>
        </member>
        <member name="M:Suzunoya.Helpers.MakeVNOp(Suzunoya.Entities.IEntity,System.Func{Suzunoya.ControlFlow.VNCancellee,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Construct a <see cref="T:Suzunoya.ControlFlow.VNOperation"/> from a task running on an entity.
            </summary>
            <param name="e">Entity on which a task is run.</param>
            <param name="task">Task to be run.</param>
            <param name="allowUserSkip">True iff the task can be soft-skipped by user input (<see cref="P:Suzunoya.ControlFlow.VNOperation.AllowUserSkip"/>)</param>
            <returns></returns>
        </member>
        <member name="M:Suzunoya.Helpers.MoveTo(Suzunoya.Entities.ITransform,System.Numerics.Vector3,System.Single,BagoumLib.Mathematics.Easer)">
            <summary>
            Create a tweener for moving an entity to a target position.
            </summary>
        </member>
        <member name="M:Suzunoya.Helpers.MoveBy(Suzunoya.Entities.ITransform,System.Numerics.Vector3,System.Single,BagoumLib.Mathematics.Easer)">
            <summary>
            Create a tweener for moving an entity by a delta.
            </summary>
        </member>
        <member name="M:Suzunoya.Helpers.RotateTo(Suzunoya.Entities.ITransform,System.Numerics.Vector3,System.Single,BagoumLib.Mathematics.Easer)">
            <summary>
            Create a tweener for rotating an entity to a target eulers.
            </summary>
        </member>
        <member name="M:Suzunoya.Helpers.RotateToClosest(Suzunoya.Entities.ITransform,System.Numerics.Vector3,System.Single,BagoumLib.Mathematics.Easer)">
            <summary>
            Create a tweener for rotating an entity to a target eulers, ignoring any multiples of 360 and moving in the closest direction.
            </summary>
        </member>
        <member name="M:Suzunoya.Helpers.RotateToClosestQ(Suzunoya.Entities.ITransform,System.Numerics.Vector3,System.Single,BagoumLib.Mathematics.Easer)">
            <summary>
            Create a tweener for rotating an entity to a target eulers, ignoring any multiples of 360 and moving in the closest direction. Uses quaternions internally.
            </summary>
        </member>
        <member name="M:Suzunoya.Helpers.ScaleTo(Suzunoya.Entities.ITransform,System.Numerics.Vector3,System.Single,BagoumLib.Mathematics.Easer)">
            <summary>
            Create a tweener for scaling an entity up to a target.
            </summary>
        </member>
        <member name="M:Suzunoya.Helpers.FadeTo(Suzunoya.Entities.ITinted,System.Single,System.Single,BagoumLib.Mathematics.Easer)">
            <summary>
            Create a tweener for the alpha value of an entity's tint.
            </summary>
        </member>
        <member name="M:Suzunoya.Helpers.TintTo(Suzunoya.Entities.ITinted,BagoumLib.DataStructures.FColor,System.Single,BagoumLib.Mathematics.Easer)">
            <summary>
            Create a tweener for changing the tint of an entity.
            </summary>
        </member>
        <member name="M:Suzunoya.Helpers.ZoomTo(Suzunoya.Display.RenderGroup,System.Single,System.Single,BagoumLib.Mathematics.Easer)">
            <summary>
            Create a tweener for changing the zoom of a render group.
            </summary>
        </member>
        <member name="M:Suzunoya.Helpers.AlsoSay(Suzunoya.Entities.IDialogueBox,BagoumLib.Culture.LString,Suzunoya.Entities.ICharacter,Suzunoya.Entities.SpeakFlags)">
            <summary>
            <see cref="M:Suzunoya.Entities.IDialogueBox.Say(BagoumLib.Culture.LString,Suzunoya.Entities.ICharacter,Suzunoya.Entities.SpeakFlags)"/> with <see cref="F:Suzunoya.Entities.SpeakFlags.DontClearText"/>.
            </summary>
        </member>
        <member name="M:Suzunoya.Helpers.AlsoSayN(Suzunoya.Entities.IDialogueBox,BagoumLib.Culture.LString,Suzunoya.Entities.ICharacter,Suzunoya.Entities.SpeakFlags)">
            <summary>
            <see cref="M:Suzunoya.Entities.IDialogueBox.Say(BagoumLib.Culture.LString,Suzunoya.Entities.ICharacter,Suzunoya.Entities.SpeakFlags)"/> with <see cref="F:Suzunoya.Entities.SpeakFlags.DontClearText"/> and a newline at the beginning.
            </summary>
        </member>
        <member name="M:Suzunoya.Helpers.TryGetData``1(Suzunoya.Data.IKeyValueRepository,System.String,``0@)">
            <summary>
            Run <see cref="M:Suzunoya.Data.IKeyValueRepository.GetData``1(System.String)"/> if a key exists in the repository.
            </summary>
        </member>
        <member name="M:Suzunoya.Helpers.SkipsOperations(System.Nullable{Suzunoya.ControlFlow.SkipMode})">
            <summary>
            Returns true if the mode automatically skips lines (loading or fastforward).
            </summary>
        </member>
        <member name="M:Suzunoya.Helpers.IsPlayerControlled(System.Nullable{Suzunoya.ControlFlow.SkipMode})">
            <summary>
            Returns true if the skip mode can be changed by the player (autoplay or fastforward).
            </summary>
        </member>
        <member name="M:Suzunoya.Helpers.SkipGuard(Suzunoya.ControlFlow.IVNState,System.Action)">
            <summary>
            Run an action only if the skip mode does not automatically skip lines.
            </summary>
        </member>
        <member name="M:Suzunoya.Helpers.Disturb``1(Suzunoya.Entities.Entity,BagoumLib.Events.DisturbedEvented{``0},System.Func{System.Single,``0},System.Single,System.Boolean)">
            <summary>
            Add a disturbance effect over time to a <see cref="T:BagoumLib.Events.DisturbedEvented`1"/>.
            </summary>
            <param name="ent">Entity on which the coroutine for the disturbance effect should be run.</param>
            <param name="dist">Base value to which to add the effect.</param>
            <param name="valuer">Function that produces the value of the disturbance.</param>
            <param name="time">Amount of time for which to run the disturbance effect.</param>
            <param name="timeTo01">True iff `valuer` operates over the range [0, 1], false iff over [0, time].</param>
        </member>
    </members>
</doc>
